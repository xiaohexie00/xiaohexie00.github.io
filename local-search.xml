<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>第九周作业</title>
    <link href="/2023/11/21/%E7%AC%AC%E4%B9%9D%E5%91%A8%E4%BD%9C%E4%B8%9A/"/>
    <url>/2023/11/21/%E7%AC%AC%E4%B9%9D%E5%91%A8%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="第九周作业"><a href="#第九周作业" class="headerlink" title="第九周作业"></a>第九周作业</h1><h1 id="1-总结-nginx反向代理及https安全加密。"><a href="#1-总结-nginx反向代理及https安全加密。" class="headerlink" title="1.总结 nginx反向代理及https安全加密。"></a>1.总结 nginx反向代理及https安全加密。</h1><h1 id="2-完成nginx实现LNMP架构wordpress应用"><a href="#2-完成nginx实现LNMP架构wordpress应用" class="headerlink" title="2.完成nginx实现LNMP架构wordpress应用"></a>2.完成nginx实现LNMP架构wordpress应用</h1><h1 id="3-总结-JumpServer管理配置"><a href="#3-总结-JumpServer管理配置" class="headerlink" title="3.总结 JumpServer管理配置"></a>3.总结 JumpServer管理配置</h1><h1 id="4-总结-tomcat实现多虚拟机"><a href="#4-总结-tomcat实现多虚拟机" class="headerlink" title="4.总结 tomcat实现多虚拟机"></a>4.总结 tomcat实现多虚拟机</h1><h1 id="5-总结-tomcat定制访问日志格式和反向代理tomcat"><a href="#5-总结-tomcat定制访问日志格式和反向代理tomcat" class="headerlink" title="5.总结 tomcat定制访问日志格式和反向代理tomcat"></a>5.总结 tomcat定制访问日志格式和反向代理tomcat</h1><h1 id="6-完成-tomcat实现MSM集群"><a href="#6-完成-tomcat实现MSM集群" class="headerlink" title="6.完成 tomcat实现MSM集群"></a>6.完成 tomcat实现MSM集群</h1><h1 id="7-总结-JVM垃圾回收算法和分代"><a href="#7-总结-JVM垃圾回收算法和分代" class="headerlink" title="7.总结 JVM垃圾回收算法和分代"></a>7.总结 JVM垃圾回收算法和分代</h1><h1 id="8-总结-tomcat性能优化方式及java源码编译"><a href="#8-总结-tomcat性能优化方式及java源码编译" class="headerlink" title="8.总结 tomcat性能优化方式及java源码编译"></a>8.总结 tomcat性能优化方式及java源码编译</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第八周作业</title>
    <link href="/2023/10/09/%E7%AC%AC%E5%85%AB%E5%91%A8%E4%BD%9C%E4%B8%9A/"/>
    <url>/2023/10/09/%E7%AC%AC%E5%85%AB%E5%91%A8%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="1、总结-哨兵机制实现原理，并搭建主从哨兵集群。"><a href="#1、总结-哨兵机制实现原理，并搭建主从哨兵集群。" class="headerlink" title="1、总结 哨兵机制实现原理，并搭建主从哨兵集群。"></a>1、总结 哨兵机制实现原理，并搭建主从哨兵集群。</h1><p><img src="image-20231011221943578.png" alt="image-20231011221943578"></p><p>哨兵机制解决了主从复制存在的以下问题：</p><ul><li>master和slave角色的自动切换，且不能影响业务</li><li>提升Redis服务整体性能，支持更高并发访问</li></ul><h2 id="1-1-哨兵机制实现原理"><a href="#1-1-哨兵机制实现原理" class="headerlink" title="1.1 哨兵机制实现原理"></a>1.1 哨兵机制实现原理</h2><h3 id="1-1-1-Sentinel-架构和故障转移"><a href="#1-1-1-Sentinel-架构和故障转移" class="headerlink" title="1.1.1 Sentinel 架构和故障转移"></a>1.1.1 Sentinel 架构和故障转移</h3><p><img src="image-20231011163802745.png" alt="image-20231011163802745"></p><p><img src="image-20231011163819031.png" alt="image-20231011163819031"></p><p>专门的Sentinel 服务进程是用于监控redis集群中Master工作的状态，当Master主服务器发生故障的时候，可以实现Master和Slave的角色的自动切换，从而实现系统的高可用性</p><p>Sentinel是一个分布式系统，即需要在多个节点上各自同时运行一个sentinel进程，Sentienl 进程通过流言协议(gossip protocols)来接收关于Master是否下线状态，并使用投票协议（Agreement Protocols)来决定是否执行自动故障转移，并选择合适的Slave作为新的Master</p><p>每个Sentinel进程会向其它Sentinel、Master、Slave定时发送消息，来确认对方是否存活，如果发现某个节点在指定配置时间内未得到响应，则会认为此节点已离线，即为主观宕机Subjective Down，简称为SDOWN</p><p>如果哨兵集群中的多数Sentinel进程认为Master存在SDown,共同利用is-master-down-by-addr命令互相通知后，则认为客观宕机Objectively Down，简称 ODOWN</p><p>接下来利用投票算法，从所有slave节点中，选一台合适的slave将之提升为新Master节点，然后自动修改其它slave相关配置，指向新的master节点，最终实现故障转移failover</p><p>Redis Sentinel中的Sentinel节点个数应该为大于等于3且最好为奇数客户端初始化时连接的是Sentinel节点集合，不再是具体的Redis节点，即Sentinel只是配置中心不是代理。</p><p>Redis Sentinel 节点与普通 Redis 没有区别，要实现读写分离依赖于客户端程序</p><p>Sentinel机制类似于MySQL中的MHA功能，只解决master和slave角色的自动故障转移问题，但单个Master的性能瓶颈问题并没有解决</p><p>Redis 3.0之前版本中,生产环境一般使用哨兵模式较多，Redis 3.0后推出Redis cluster功能，可以支持更大规模的高并发环境</p><h3 id="1-1-2-Sentinel中的三个定时任务"><a href="#1-1-2-Sentinel中的三个定时任务" class="headerlink" title="1.1.2 Sentinel中的三个定时任务"></a>1.1.2 Sentinel中的三个定时任务</h3><ul><li><p>每10秒每个sentinel对master和slave执行info</p><ul><li>发现slave节点</li><li>确认主从关系</li></ul></li><li><p>每2秒每个sentinel通过master节点的channel交换信息(pub/sub)</p><ul><li>通过sentinel_:hello频道交互</li><li>交互对节点的“看法”和自身信息</li></ul></li><li><p>每1秒每个sentinel对其他sentinel和redis执行ping</p></li></ul><h2 id="1-2-搭建主从哨兵集群"><a href="#1-2-搭建主从哨兵集群" class="headerlink" title="1.2 搭建主从哨兵集群"></a>1.2 搭建主从哨兵集群</h2><p>以下案例实现一主两从的基于哨兵的高可用Redis架构</p><p><img src="image-20231011171747922.png" alt="image-20231011171747922"></p><h3 id="1-2-1-哨兵需要先实现主从复制"><a href="#1-2-1-哨兵需要先实现主从复制" class="headerlink" title="1.2.1 哨兵需要先实现主从复制"></a>1.2.1 哨兵需要先实现主从复制</h3><p>哨兵的前提是已经实现了Redis的主从复制</p><p>注意：master的配置文件中masterauth和slave都必须相同</p><p>所有主从节点的 redis.conf 中关健配置</p><p>范例：准备主从环境配置</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在所有的主从节点执行</span><br>[17:19:41 root@Master-redis ~]#yum -y install redis<br>[17:21:45 root@Master-redis ~]#vim /etc/redis.conf <br>bind 0.0.0.0<br>masterauth &quot;123456&quot;<br>requirepass &quot;123456&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">或者非交互执行</span><br>[20:23:03 root@Slave-redis ~]#sed -i -e &#x27;s/bind 127.0.0.1/bind 0.0.0.0/&#x27; -e &#x27;s/^# masterauth .*/masterauth 123456/&#x27; -e &#x27;s/^# requirepass .*/requirepass 123456/&#x27; /etc/redis.conf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在所有从节点执行</span><br>[20:28:56 root@Slave-redis ~]#echo &quot;replicaof 10.0.0.128 6379&quot; &gt;&gt; /etc/redis.conf <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在所有的主从节点执行</span><br>[20:16:38 root@Master-redis ~]#systemctl enable --now  redis<br></code></pre></td></tr></table></figure><p><strong>master 服务器状态</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">[20:32:29 root@Master-redis ~]#redis-cli -a 123456<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>127.0.0.1:6379&gt; info replication<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Replication</span><br>role:master<br>connected_slaves:2<br>slave0:ip=10.0.0.3,port=6379,state=online,offset=112,lag=0<br>slave1:ip=10.0.0.4,port=6379,state=online,offset=98,lag=1<br>master_replid:63fd06aed1fa325a7b7efd74c2a2e5cbfbfdb59a<br>master_replid2:0000000000000000000000000000000000000000<br>master_repl_offset:112<br>second_repl_offset:-1<br>repl_backlog_active:1<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:1<br>repl_backlog_histlen:112<br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure><p><strong>配置 slave1</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">[20:32:33 root@Slave1-redis ~]#redis-cli  -a 123456<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>127.0.0.1:6379&gt; replicaof 10.0.0.128 6379<br>OK Already connected to specified master<br>127.0.0.1:6379&gt; config set masterauth &quot;123456&quot;<br>OK<br>127.0.0.1:6379&gt; info replication<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Replication</span><br>role:slave<br>master_host:10.0.0.128<br>master_port:6379<br>master_link_status:up<br>master_last_io_seconds_ago:9<br>master_sync_in_progress:0<br>slave_repl_offset:350<br>slave_priority:100<br>slave_read_only:1<br>connected_slaves:0<br>master_replid:63fd06aed1fa325a7b7efd74c2a2e5cbfbfdb59a<br>master_replid2:0000000000000000000000000000000000000000<br>master_repl_offset:350<br>second_repl_offset:-1<br>repl_backlog_active:1<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:1<br>repl_backlog_histlen:350<br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure><p><strong>配置 slave2</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">[20:38:28 root@Slave2-redis ~]#redis-cli -a 123456<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>127.0.0.1:6379&gt; replicaof 10.0.0.128 6379<br>OK Already connected to specified master<br>127.0.0.1:6379&gt; config set masterauth &quot;123456&quot;<br>OK<br>127.0.0.1:6379&gt; info replication<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Replication</span><br>role:slave<br>master_host:10.0.0.128<br>master_port:6379<br>master_link_status:up<br>master_last_io_seconds_ago:7<br>master_sync_in_progress:0<br>slave_repl_offset:588<br>slave_priority:100<br>slave_read_only:1<br>connected_slaves:0<br>master_replid:63fd06aed1fa325a7b7efd74c2a2e5cbfbfdb59a<br>master_replid2:0000000000000000000000000000000000000000<br>master_repl_offset:588<br>second_repl_offset:-1<br>repl_backlog_active:1<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:1<br>repl_backlog_histlen:588<br>127.0.0.1:6379&gt; <br></code></pre></td></tr></table></figure><h3 id="1-2-2编辑哨兵配置"><a href="#1-2-2编辑哨兵配置" class="headerlink" title="1.2.2编辑哨兵配置"></a>1.2.2编辑哨兵配置</h3><p>sentinel配置</p><p>Sentinel实际上是一个特殊的redis服务器，有些redis指令支持，但很多指令并不支持.默认监听在26379/tcp端口.</p><p>哨兵服务可以和Redis服务器分开部署在不同主机，但为了节约成本一般会部署在一起</p><p>所有redis节点使用相同的以下示例的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">如果是编译安装，在源码目录有sentinel.conf，复制到安装目录即可，如:/apps/redis/etc/sentinel.conf</span><br>[20:32:29 root@Master-redis ~]#cp redis-6.2.5/sentinel.conf /apps/redis/etc/sentinel.conf<br>[20:32:29 root@Master-redis ~]#chown redis.redis /apps/redis/etc/sentinel.conf<br>[20:32:29 root@Master-redis ~]#vim /etc/redis-sentinel.conf<br>bind 0.0.0.0<br>port 26379<br>daemonize yes<br>pidfile &quot;redis-sentinel.pid&quot;<br>logfile &quot;sentinel_26379.log&quot;<br>dir&quot;/tmp&quot;#工作目录<br><br>sentinel monitor mymaster 10.0.0.8 6379 2<br><span class="hljs-meta prompt_">#</span><span class="language-bash">mymaster是集群的名称，此行指定当前mymaster集群中master服务器的地址和端口</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2为法定人数限制(quorum)，即有几个sentinel认为master down了就进行故障转移，一般此值是所有sentine1节点（一般总数是&gt;=3的奇数，如：3，5，7等）的一半以上的整数值，比如，总数是3，即3/2=1.5，取整为2,是master的ODOwN客观下线的依据</span><br><br>sentinel auth-pass mymaster 123456<br><span class="hljs-meta prompt_">#</span><span class="language-bash">mymaster集群中master的密码，注意此行要在上面行的下面</span><br><br>sentinel down-after-milliseconds mymaster 30000<br><span class="hljs-meta prompt_">#</span><span class="language-bash">判断mymaster集群中所有节点的主观下线（SDowN）的时间，单位：毫秒，建议3000</span><br><br>sentinel parallel-syncs mymaster 1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">发生故障转移后，可以同时向新master同步数据的slave的数量，数字越小总同步时间越长，但可以减轻新master的负载压力</span><br><br>sentinel failover-timeout mymaster 180000<br><span class="hljs-meta prompt_">#</span><span class="language-bash">所有slaves指向新的master所需的超时时间，单位：毫秒</span><br><br>sentinel deny-scripts-reconfig yes #禁止修改脚本<br><br>logfile /var/log/redis/sentinel.log<br></code></pre></td></tr></table></figure><p><strong>三个哨兵服务器的配置如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell">[20:53:15 root@Master-redis ~]#grep -Ev &quot;^#|^$&quot; /etc/redis-sentinel.conf <br>port 26379<br>daemonize no<br>pidfile /var/run/redis-sentinel.pid<br>logfile &quot;&quot;<br>dir /tmp<br>sentinel monitor mymaster 10.0.0.128 6379 2#修改此行<br>sentinel auth-pass mymaster 123456#添加此行<br>sentinel down-after-milliseconds mymaster 3000#修改此行<br>sentinel parallel-syncs mymaster 1<br>sentinel failover-timeout mymaster 180000<br>sentinel deny-scripts-reconfig yes<br>logfile /var/log/redis/sentinel.log<br><br>[21:06:18 root@Master-redis ~]#sed -i -e &#x27;s/^sentinel monitor mymaster 127.0.0.1 6379 2/sentinel monitor mymaster 10.0.0.128 6379 2/&#x27; -e &#x27;s/# sentinel auth-pass &lt;master-name&gt; &lt;password&gt;/sentinel auth-pass mymaster 123456/&#x27; -e &#x27;s/sentinel down-after-milliseconds mymaster 30000/sentinel down-after-milliseconds mymaster 3000/&#x27;  /etc/redis-sentinel.conf <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">注意此行自动生成必须唯一，一般不需要修改，如果相同则需要修改此值需要重启redis和sentinel服务</span><br>sentinel myid 50547f34ed71fd48c197924969937e738a39975b<br><br>[21:17:37 root@Master-redis ~]#grep &quot;^sentinel&quot;  /etc/redis-sentinel.conf <br>sentinel myid 076fb219d24e911e7e3c29ea938e83ffb7a20f25<br>sentinel deny-scripts-reconfig yes<br>sentinel monitor mymaster 10.0.0.128 6379 2<br>sentinel down-after-milliseconds mymaster 3000<br>sentinel auth-pass mymaster 123456<br>sentinel config-epoch mymaster 0<br>sentinel leader-epoch mymaster 0<br>sentinel known-replica mymaster 10.0.0.4 6379<br>sentinel known-replica mymaster 10.0.0.3 6379<br>sentinel current-epoch 0<br></code></pre></td></tr></table></figure><h3 id="1-2-3启动哨兵服务"><a href="#1-2-3启动哨兵服务" class="headerlink" title="1.2.3启动哨兵服务"></a>1.2.3启动哨兵服务</h3><p>将所有哨兵服务器都启动起来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">确保每个哨兵主机myid唯一，如果相同必须手动修改为不同的值</span><br>[21:21:45 root@Master-redis ~]#grep &quot;^sentinel&quot;  /etc/redis-sentinel.conf <br>sentinel myid 076fb219d24e911e7e3c29ea938e83ffb7a20f25<br>[21:20:50 root@Slave1-redis ~]#grep &quot;^sentinel&quot;  /etc/redis-sentinel.conf <br>sentinel myid 5eb8954bea6142ca6a7e409ebf0eb5850c0f2fd8<br>[21:20:59 root@Slave2-redis ~]#grep &quot;^sentinel&quot;  /etc/redis-sentinel.conf <br>sentinel myid f55f6616eb3d0784cb68b38bb185ea487721d8bd<br><br><br><br>[21:15:48 root@Master-redis ~]#systemctl enable --now redis-sentinel.service<br>[21:15:44 root@Slave1-redis ~]#systemctl enable --now redis-sentinel.service<br>[21:15:37 root@Slave2-redis ~]#systemctl enable --now redis-sentinel.service<br></code></pre></td></tr></table></figure><p>如果是编译安装,在所有哨兵服务器执行下面操作启动哨兵</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@redis-master ~]#/apps/redis/bin/redis-sentinel/apps/redis/etc/sentinel.conf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果是编译安装，可以在所有节点生成新的service文件</span><br>[root@redis-master ~]#cat /lib/systemd/system/redis-sentinel.service<br>[unit]<br>Description=Redis Sentinel<br>After=network.target<br><br>[service]<br>ExecStart=/apps/redis/bin/redis-sentinel /apps/redis/etc/sentinel.conf --supervised systemd<br>ExecStop=/bin/ki11 -s QUIT $MAINPID<br>User=redis<br>Group=redis<br>RuntimeDirectory=redis<br>RuntimeDirectoryMode=0755<br><br>[Instal1]<br>WantedBy=multi-user.target<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">注意所有节点的目录权限，否则无法启动服务[root@redis-master ~]<span class="hljs-comment">#chown -R redis.redis /apps/redis/</span></span><br></code></pre></td></tr></table></figure><h3 id="1-2-4验证哨兵服务"><a href="#1-2-4验证哨兵服务" class="headerlink" title="1.2.4验证哨兵服务"></a>1.2.4验证哨兵服务</h3><h4 id="1-2-4-1查看哨兵服务端口状态"><a href="#1-2-4-1查看哨兵服务端口状态" class="headerlink" title="1.2.4.1查看哨兵服务端口状态"></a>1.2.4.1查看哨兵服务端口状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[21:26:30 root@Master-redis ~]#ss -ntl<br>State        Recv-Q       Send-Q             Local Address:Port              Peer Address:Port      Process       <br>LISTEN       0            128                      0.0.0.0:26379                  0.0.0.0:*                       <br>LISTEN       0            128                      0.0.0.0:6379                   0.0.0.0:*                       <br>LISTEN       0            128                      0.0.0.0:22                     0.0.0.0:*                       <br>LISTEN       0            128                         [::]:26379                     [::]:*                       <br>LISTEN       0            128                         [::]:22                        [::]:*                       <br>    <br></code></pre></td></tr></table></figure><h4 id="1-2-4-2-查看哨兵日志"><a href="#1-2-4-2-查看哨兵日志" class="headerlink" title="1.2.4.2 查看哨兵日志"></a>1.2.4.2 查看哨兵日志</h4><p><strong>master的哨兵日志</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[21:28:11 root@Master-redis ~]#tail -f /var/log/redis/sentinel.log <br>4069:X 11 Oct 2023 21:17:33.903 # Configuration loaded<br>4069:X 11 Oct 2023 21:17:33.903 * supervised by systemd, will signal readiness<br>4069:X 11 Oct 2023 21:17:33.903 * Running mode=sentinel, port=26379.<br>4069:X 11 Oct 2023 21:17:33.903 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.<br>4069:X 11 Oct 2023 21:17:33.907 # Sentinel ID is 076fb219d24e911e7e3c29ea938e83ffb7a20f25<br>4069:X 11 Oct 2023 21:17:33.907 # +monitor master mymaster 10.0.0.128 6379 quorum 2<br>4069:X 11 Oct 2023 21:17:33.907 * +slave slave 10.0.0.3:6379 10.0.0.3 6379 @ mymaster 10.0.0.128 6379<br>4069:X 11 Oct 2023 21:17:33.908 * +slave slave 10.0.0.4:6379 10.0.0.4 6379 @ mymaster 10.0.0.128 6379<br>4069:X 11 Oct 2023 21:20:52.823 * +sentinel sentinel 5eb8954bea6142ca6a7e409ebf0eb5850c0f2fd8 10.0.0.3 26379 @ mymaster 10.0.0.128 6379<br>4069:X 11 Oct 2023 21:21:01.535 * +sentinel sentinel f55f6616eb3d0784cb68b38bb185ea487721d8bd 10.0.0.4 26379 @ mymaster 10.0.0.128 6379<br></code></pre></td></tr></table></figure><p><strong>slave的哨兵日志</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[21:27:12 root@Slave1-redis ~]#tail /var/log/redis/sentinel.log <br>3124:X 11 Oct 2023 21:20:50.728 # Redis version=5.0.3, bits=64, commit=00000000, modified=0, pid=3124, just started<br>3124:X 11 Oct 2023 21:20:50.728 # Configuration loaded<br>3124:X 11 Oct 2023 21:20:50.728 * supervised by systemd, will signal readiness<br>3124:X 11 Oct 2023 21:20:50.729 * Running mode=sentinel, port=26379.<br>3124:X 11 Oct 2023 21:20:50.734 # Sentinel ID is 5eb8954bea6142ca6a7e409ebf0eb5850c0f2fd8<br>3124:X 11 Oct 2023 21:20:50.734 # +monitor master mymaster 10.0.0.128 6379 quorum 2<br>3124:X 11 Oct 2023 21:20:50.735 * +slave slave 10.0.0.3:6379 10.0.0.3 6379 @ mymaster 10.0.0.128 6379<br>3124:X 11 Oct 2023 21:20:50.736 * +slave slave 10.0.0.4:6379 10.0.0.4 6379 @ mymaster 10.0.0.128 6379<br>3124:X 11 Oct 2023 21:20:51.483 * +sentinel sentinel 076fb219d24e911e7e3c29ea938e83ffb7a20f25 10.0.0.128 26379 @ mymaster 10.0.0.128 6379<br>3124:X 11 Oct 2023 21:21:01.537 * +sentinel sentinel f55f6616eb3d0784cb68b38bb185ea487721d8bd 10.0.0.4 26379 @ mymaster 10.0.0.128 6379<br><br></code></pre></td></tr></table></figure><h4 id="1-2-4-3当前sentinel状态"><a href="#1-2-4-3当前sentinel状态" class="headerlink" title="1.2.4.3当前sentinel状态"></a>1.2.4.3当前sentinel状态</h4><p>在sentinel状态中尤其是最后一行,涉及到masterlP是多少,有几个slave,有几个sentinels,必须是符合全部服务器数量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[21:35:51 root@Master-redis ~]#redis-cli -p 26379<br>127.0.0.1:26379&gt; info sentinel<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Sentinel</span><br>sentinel_masters:1<br>sentinel_tilt:0<br>sentinel_running_scripts:0<br>sentinel_scripts_queue_length:0<br>sentinel_simulate_failure_flags:0<br>master0:name=mymaster,status=ok,address=10.0.0.128:6379,slaves=2,sentinels=3<br><span class="hljs-meta prompt_">#</span><span class="language-bash">两个slave，三个sentinel服务器，如果sentinels值不符合，检查myid可能冲突</span><br></code></pre></td></tr></table></figure><h4 id="1-2-4-5停止Master实现故障转移"><a href="#1-2-4-5停止Master实现故障转移" class="headerlink" title="1.2.4.5停止Master实现故障转移"></a>1.2.4.5停止Master实现故障转移</h4><h5 id="1-2-4-5-1停止Master-节点"><a href="#1-2-4-5-1停止Master-节点" class="headerlink" title="1.2.4.5.1停止Master 节点"></a>1.2.4.5.1停止Master 节点</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[21:38:55 root@Master-redis ~]#systemctl stop redis<br></code></pre></td></tr></table></figure><p>查看各节点上哨兵信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[21:39:21 root@Master-redis ~]#redis-cli -a 123456 -p 26379<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>127.0.0.1:26379&gt; info sentinel<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Sentinel</span><br>sentinel_masters:1<br>sentinel_tilt:0<br>sentinel_running_scripts:0<br>sentinel_scripts_queue_length:0<br>sentinel_simulate_failure_flags:0<br>master0:name=mymaster,status=ok,address=10.0.0.3:6379,slaves=2,sentinels=3<br></code></pre></td></tr></table></figure><p>故障转移时sentinel的信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[21:59:16 root@Master-redis ~]#tail -f /var/log/redis/sentinel.log <br>4069:X 11 Oct 2023 21:39:18.735 # +new-epoch 1<br>4069:X 11 Oct 2023 21:39:18.737 # +vote-for-leader f55f6616eb3d0784cb68b38bb185ea487721d8bd 1<br>4069:X 11 Oct 2023 21:39:18.787 # +odown master mymaster 10.0.0.128 6379 #quorum 3/2<br>4069:X 11 Oct 2023 21:39:18.787 # Next failover delay: I will not start a failover before Wed Oct 11 21:45:19 2023<br>4069:X 11 Oct 2023 21:39:19.832 # +config-update-from sentinel f55f6616eb3d0784cb68b38bb185ea487721d8bd 10.0.0.4 26379 @ mymaster 10.0.0.128 6379<br>4069:X 11 Oct 2023 21:39:19.832 # +switch-master mymaster 10.0.0.128 6379 10.0.0.3 6379<br>4069:X 11 Oct 2023 21:39:19.833 * +slave slave 10.0.0.4:6379 10.0.0.4 6379 @ mymaster 10.0.0.3 6379<br>4069:X 11 Oct 2023 21:39:19.833 * +slave slave 10.0.0.128:6379 10.0.0.128 6379 @ mymaster 10.0.0.3 6379<br>4069:X 11 Oct 2023 21:39:22.917 # +sdown slave 10.0.0.128:6379 10.0.0.128 6379 @ mymaster 10.0.0.3 6379<br>4069:X 11 Oct 2023 21:53:13.525 # -sdown slave 10.0.0.128:6379 10.0.0.128 6379 @ mymaster 10.0.0.3 6379<br></code></pre></td></tr></table></figure><h5 id="1-2-4-5-2验证故障转移"><a href="#1-2-4-5-2验证故障转移" class="headerlink" title="1.2.4.5.2验证故障转移"></a>1.2.4.5.2验证故障转移</h5><p>故障转移后redis.conf中的replicaof行的master IP会被修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[21:26:19 root@Slave2-redis ~]#grep ^replicaof /etc/redis.conf <br>replicaof 10.0.0.3 6379<br></code></pre></td></tr></table></figure><p>哨兵配置文件的sentinel monitor lP同样也会被修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">[21:44:12 root@Slave2-redis ~]#grep &quot;^[a-Z]&quot; /etc/redis-sentinel.conf <br>port 26379<br>daemonize no<br>pidfile &quot;/var/run/redis-sentinel.pid&quot;<br>logfile &quot;/var/log/redis/sentinel.log&quot;<br>dir &quot;/tmp&quot;<br>sentinel myid f55f6616eb3d0784cb68b38bb185ea487721d8bd<br>sentinel deny-scripts-reconfig yes<br>sentinel monitor mymaster 10.0.0.3 6379 2#此行被自动修改<br>sentinel down-after-milliseconds mymaster 3000<br>sentinel auth-pass mymaster 123456<br>sentinel config-epoch mymaster 1<br>protected-mode no<br>supervised systemd<br>sentinel leader-epoch mymaster 1<br>sentinel known-replica mymaster 10.0.0.4 6379<br>sentinel known-replica mymaster 10.0.0.128 6379<br>sentinel known-sentinel mymaster 10.0.0.128 26379 076fb219d24e911e7e3c29ea938e83ffb7a20f25<br>sentinel known-sentinel mymaster 10.0.0.3 26379 5eb8954bea6142ca6a7e409ebf0eb5850c0f2fd8<br>sentinel current-epoch 1<br><br></code></pre></td></tr></table></figure><h5 id="1-2-4-5-3验证Redis各节点状态"><a href="#1-2-4-5-3验证Redis各节点状态" class="headerlink" title="1.2.4.5.3验证Redis各节点状态"></a>1.2.4.5.3验证Redis各节点状态</h5><p>新的master状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[21:44:55 root@Slave1-redis ~]#redis-cli -a 123456<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>127.0.0.1:6379&gt; info replication<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Replication</span><br>role:master<br>connected_slaves:1<br>slave0:ip=10.0.0.4,port=6379,state=online,offset=369425,lag=0<br>master_replid:75c22bb37e895977d922a8851e1e1a178e0457d7<br>master_replid2:63fd06aed1fa325a7b7efd74c2a2e5cbfbfdb59a<br>master_repl_offset:369425<br>second_repl_offset:234939<br>repl_backlog_active:1<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:1<br>repl_backlog_histlen:369425<br></code></pre></td></tr></table></figure><p>另一个slave指向新的master</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">[21:44:20 root@Slave2-redis ~]#redis-cli -a 123456<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>127.0.0.1:6379&gt; info replication<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Replication</span><br>role:slave<br>master_host:10.0.0.3#指向新的master<br>master_port:6379<br>master_link_status:up<br>master_last_io_seconds_ago:1<br>master_sync_in_progress:0<br>slave_repl_offset:366251<br>slave_priority:100<br>slave_read_only:1<br>connected_slaves:0<br>master_replid:75c22bb37e895977d922a8851e1e1a178e0457d7<br>master_replid2:63fd06aed1fa325a7b7efd74c2a2e5cbfbfdb59a<br>master_repl_offset:366251<br>second_repl_offset:234939<br>repl_backlog_active:1<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:1<br>repl_backlog_histlen:366251<br></code></pre></td></tr></table></figure><h5 id="1-2-4-3-6原master重新加入Redis集群"><a href="#1-2-4-3-6原master重新加入Redis集群" class="headerlink" title="1.2.4.3.6原master重新加入Redis集群"></a>1.2.4.3.6原master重新加入Redis集群</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs shell">[21:53:28 root@Master-redis ~]#grep replicaof /etc/redis.conf <br><span class="hljs-meta prompt_">#</span><span class="language-bash">sentinel会自动修改下面行指向新的master</span><br>replicaof 10.0.0.3 6379<br><br>[21:54:16 root@Master-redis ~]#redis-cli -a 123456<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>127.0.0.1:6379&gt; info replication<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Replication</span><br>role:slave<br>master_host:10.0.0.3<br>master_port:6379<br>master_link_status:up<br>master_last_io_seconds_ago:1<br>master_sync_in_progress:0<br>slave_repl_offset:430712<br>slave_priority:100<br>slave_read_only:1<br>connected_slaves:0<br>master_replid:75c22bb37e895977d922a8851e1e1a178e0457d7<br>master_replid2:0000000000000000000000000000000000000000<br>master_repl_offset:430712<br>second_repl_offset:-1<br>repl_backlog_active:1<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:399801<br>repl_backlog_histlen:30912<br><br><br>[21:57:10 root@Master-redis ~]#redis-cli -p 26379<br>127.0.0.1:26379&gt; info sentinel<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Sentinel</span><br>sentinel_masters:1<br>sentinel_tilt:0<br>sentinel_running_scripts:0<br>sentinel_scripts_queue_length:0<br>sentinel_simulate_failure_flags:0<br>master0:name=mymaster,status=ok,address=10.0.0.3:6379,slaves=2,sentinels=3<br><br><br>[21:59:16 root@Master-redis ~]#tail -f /var/log/redis/sentinel.log <br>4069:X 11 Oct 2023 21:39:22.917 # +sdown slave 10.0.0.128:6379 10.0.0.128 6379 @ mymaster 10.0.0.3 6379<br>4069:X 11 Oct 2023 21:53:13.525 # -sdown slave 10.0.0.128:6379 10.0.0.128 6379 @ mymaster 10.0.0.3 6379<br></code></pre></td></tr></table></figure><h1 id="2、总结redis-cluster工作原理，并搭建集群实现扩缩容。"><a href="#2、总结redis-cluster工作原理，并搭建集群实现扩缩容。" class="headerlink" title="2、总结redis cluster工作原理，并搭建集群实现扩缩容。"></a>2、总结redis cluster工作原理，并搭建集群实现扩缩容。</h1><h2 id="2-1-Redis-cluster的工作原理"><a href="#2-1-Redis-cluster的工作原理" class="headerlink" title="2.1 Redis cluster的工作原理"></a>2.1 Redis cluster的工作原理</h2><h3 id="2-1-1-Redis-Cluster-介绍"><a href="#2-1-1-Redis-Cluster-介绍" class="headerlink" title="2.1.1 Redis Cluster 介绍"></a>2.1.1 Redis Cluster 介绍</h3><p>使用哨兵sentinel只能解决Redis高可用问题，实现Redis的自动故障转移，但仍然无法解决Redis Master单节点的性能瓶颈问题</p><p>为了解决单机性能的瓶颈，提高Redis服务整体性能，可以使用分布式集群的解决方案</p><p>Redis 3.0版本之后推出无中心架构的Redis Cluster，支持多个master节点并行写入和故障的自动转移动能.</p><h3 id="2-1-2Redis-cluster-架构"><a href="#2-1-2Redis-cluster-架构" class="headerlink" title="2.1.2Redis cluster 架构"></a>2.1.2Redis cluster 架构</h3><p><img src="image-20231011225146339.png" alt="image-20231011225146339"></p><p>Redis cluster需要至少3个master节点才能实现，slave节点数量不限，当然一般每个master都至少对应的有一个slave节点</p><p>如果有三个主节点采用哈希槽hash slot的方式来分配16384个槽位slot</p><p>此三个节点分别承担的slot 区间可以是如以下方式分配</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http">节点M1 0-5460<br>节点M2 5461-10922<br>节点M3 10923-16383<br></code></pre></td></tr></table></figure><h3 id="2-1-3-Redis-cluster的工作原理"><a href="#2-1-3-Redis-cluster的工作原理" class="headerlink" title="2.1.3 Redis cluster的工作原理"></a>2.1.3 Redis cluster的工作原理</h3><p><img src="image-20231012150335596.png" alt="image-20231012150335596"></p><h4 id="2-1-3-1数据分区"><a href="#2-1-3-1数据分区" class="headerlink" title="2.1.3.1数据分区"></a>2.1.3.1数据分区</h4><p>如果是单机存储的话，直接将数据存放在单机redis就行了。但是如果是集群存储，就需要考虑到数据分区了。</p><p><img src="image-20231012150446323.png" alt="image-20231012150446323"></p><p>数据分区通常采取顺序分布和hash分布。</p><table><thead><tr><th>分布方式</th><th>顺序分布</th><th>哈希分布</th></tr></thead><tbody><tr><td>数据分散度</td><td>分布倾斜</td><td>分布散列</td></tr><tr><td>顺序访问</td><td>支持</td><td>不支持</td></tr></tbody></table><p>顺序分布保障了数据的有序性，但是离散性低，可能导致某个分区的数据热度高，其他分区数据的热度低，分区访问不均衡。</p><p>哈希分布也分为多种分布方式，比如区域哈希分区，一致性哈希分区等。而redis cluster采用的是虚拟槽分区的方式。</p><p>虚拟槽分区</p><p>redis cluster设置有0~16383的槽，每个槽映射一个数据子集，通过hash函数，将数据存放在不同的槽位中，每个集群的节点保存一部分的槽。</p><p>每个key存储时，先经过哈希函数CRC16（key)得到一个整数，然后整数与16384取余，得到槽的数值，然后找到对应的节点，将数据存放入对应的槽中。</p><p><img src="image-20231012151010636.png" alt="image-20231012151010636"></p><p>集群通信</p><p>但是寻找槽的过程并不是一次就命中的，比如上图key将要存放在14396槽中，但是并不是一下就锁定了node3节点，可能先去询问node1，然后才访问node3。</p><p>而集群中节点之间的通信，保证了最多两次就能命中对应槽所在的节点。因为在每个节点中，都保存了其他节点的信息，知道哪个槽由哪个节点负责。这样即使第一次访问没有命中槽，但是会通知客户端，该槽在哪个节点，这样访问对应节点就能精准命中。</p><p><img src="image-20231012152844379.png" alt="image-20231012152844379"></p><ol><li>节点A对节点B发送一个meet操作，B返回后表示A和B之间能够进行沟通。</li><li>节点A对节点C发送meet操作，C返回后，A和C之间也能进行沟通</li><li>然后B根据对A的了解，就能找到C，B和C之间也建立了联系。</li><li>直到所有节点都能建立联系。</li></ol><p>这样每个节点都能互相知道对方负责哪些槽。</p><h4 id="2-1-3-2集群伸缩"><a href="#2-1-3-2集群伸缩" class="headerlink" title="2.1.3.2集群伸缩"></a>2.1.3.2集群伸缩</h4><p>集群并不是建立之后，节点数就固定不变的，也会有新的节点加入集群或者集群中的节点下线，这就是集群的扩容和缩容。但是由于集群节点和槽息息相关，所以集群的伸缩也对应了槽和数据的迁移</p><p><img src="image-20231012153041925.png" alt="image-20231012153041925"></p><p>集群扩容</p><p>当有新的节点准备好加入集群时，这个新的节点还是孤立节点，加入有两种方式。一个是通过集群节点执行命令来和孤立节点握手，另一个则是使用脚本来添加节点。</p><ol><li>cluster_node_ip:port: cluster meet ip port new_node_ip:port</li><li>redis-trib.rb add-node new_node_ip:port cluster_node_ip:port</li></ol><p>通常这个新的节点有两种身份，要么作为主节点，要么作为从节点：</p><ul><li><p>主节点：分摊槽和数据</p></li><li><p>从节点：作故障转移备份</p></li></ul><p><img src="image-20231012153315334.png" alt="image-20231012153315334"></p><p><strong>其中槽的迁移有以下步骤：</strong></p><p><img src="image-20231012154013997.png" alt="image-20231012154013997"></p><p><strong>集群缩容</strong></p><p><img src="image-20231012154048160.png" alt="image-20231012154048160"></p><p>下线节点的流程如下：</p><ol><li>判断该节点是否持有槽，如果未持有槽就跳转到下一步，持有槽则先迁移槽到其他节点</li><li>通知其他节点（cluster forget）忘记该下线节点</li><li>关闭下线节点的服务</li></ol><p>需要注意的是如果先下线主节点，再下线从节点，会进行故障转移，所以要先下线从节点。</p><h4 id="2-1-3-3故障转移"><a href="#2-1-3-3故障转移" class="headerlink" title="2.1.3.3故障转移"></a>2.1.3.3故障转移</h4><p><strong>除了手动下线节点外，也会面对突发故障。</strong>下面提到的主要是主节点的故障，因为从节点的故障并不影响主节点工作，对应的主节点只会记住自己哪个从节点下线了，并将信息发送给其他节点。故障的从节点重连后，继续官复原职，复制主节点的数据。</p><p>只有主节点才需要进行故障转移。在之前学习主从复制时，我们需要使用redis sentinel来实现故障转移。而redis cluster则不需要redis sentinel,其自身就具备了故障转移功能。</p><p>根据前面我们了解到，节点之间是会进行通信的，节点之间通过ping/pong交互消息，所以借此就能发现故障。集群节点发现故障同样是有主观下线和客观下线的</p><p><strong>主观下线</strong></p><p><img src="image-20231012154450625.png" alt="image-20231012154450625"></p><p>对于每个节点有一个故障列表，故障列表维护了当前节点接收到的其他所有节点的信息。当半数以上的持有槽的主节点都标记某个节点主观下线，就会尝试客观下线。</p><p><strong>客观下线</strong></p><p><img src="image-20231012154542411.png" alt="image-20231012154542411"></p><p>故障转移</p><p>集群同样具备了自动转移故障的功能，和哨兵有些类似，在进行客观下线之后，就开始准备让故障节点的从节点“上任”了。</p><p>首先是进行资格检查，只有具备资格的从节点才能参加选举：</p><ul><li>故障节点的所有从节点检查和故障主节点之间的断线时间</li><li>超过cluster-node-timeout*cluster-slave-validati-factor(默认10)则取消选举资格</li></ul><p>然后是准备选举顺序，不同偏移量的节点，参与选举的顺位不同。offset最大的slave节点，选举顺位最高，最优先选举。而offset较低的slave节点，要延迟选举。</p><p><img src="image-20231012154725022.png" alt="image-20231012154725022"></p><p>当有从节点参加选举后，主节点收到信息就开始投票。偏移量最大的节点，优先参与选举就更大可能获得最多的票数，称为主节点。</p><p><img src="image-20231012154802680.png" alt="image-20231012154802680"></p><p>当从节点走马上任变成主节点之后，就要开始进行替换主节点：</p><ol><li>让该slave节点执行slaveof no one变为master节点</li><li>将故障节点负责的槽分配给该节点</li><li>向集群中其他节点广播Pong消息，表明已完成故障转移</li><li>故障节点重启后，会成为new_master的slave节点</li></ol><h2 id="2-2-搭建redis-cluster集群，并实现扩、缩容"><a href="#2-2-搭建redis-cluster集群，并实现扩、缩容" class="headerlink" title="2.2 搭建redis cluster集群，并实现扩、缩容"></a>2.2 搭建redis cluster集群，并实现扩、缩容</h2><h3 id="2-2-1-实战案例：基于Redis-5以上版本的redis-cluster部署"><a href="#2-2-1-实战案例：基于Redis-5以上版本的redis-cluster部署" class="headerlink" title="2.2.1 实战案例：基于Redis 5以上版本的redis cluster部署"></a>2.2.1 实战案例：基于Redis 5以上版本的redis cluster部署</h3><p>官方文档：<a href="https://redis.io/docs/management/scaling/">https://redis.io/docs/management/scaling/</a></p><p>cluster 相关命令</p><p>范例：查看-cluster 选项帮助</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs shell">[14:52:17 root@Master-redis ~]#redis-cli --cluster help<br>Cluster Manager Commands:<br>  create         host1:port1 ... hostN:portN<br>                 --cluster-replicas &lt;arg&gt;<br>  check          host:port<br>                 --cluster-search-multiple-owners<br>  info           host:port<br>  fix            host:port<br>                 --cluster-search-multiple-owners<br>  reshard        host:port<br>                 --cluster-from &lt;arg&gt;<br>                 --cluster-to &lt;arg&gt;<br>                 --cluster-slots &lt;arg&gt;<br>                 --cluster-yes<br>                 --cluster-timeout &lt;arg&gt;<br>                 --cluster-pipeline &lt;arg&gt;<br>                 --cluster-replace<br>  rebalance      host:port<br>                 --cluster-weight &lt;node1=w1...nodeN=wN&gt;<br>                 --cluster-use-empty-masters<br>                 --cluster-timeout &lt;arg&gt;<br>                 --cluster-simulate<br>                 --cluster-pipeline &lt;arg&gt;<br>                 --cluster-threshold &lt;arg&gt;<br>                 --cluster-replace<br>  add-node       new_host:new_port existing_host:existing_port<br>                 --cluster-slave<br>                 --cluster-master-id &lt;arg&gt;<br>  del-node       host:port node_id<br>  call           host:port command arg arg .. arg<br>  set-timeout    host:port milliseconds<br>  import         host:port<br>                 --cluster-from &lt;arg&gt;<br>                 --cluster-copy<br>                 --cluster-replace<br>  help           <br><br>For check, fix, reshard, del-node, set-timeout you can specify the host and port of any working node in the cluster.<br><br></code></pre></td></tr></table></figure><h4 id="2-2-1-1创建redis-cluster集群的环境准备"><a href="#2-2-1-1创建redis-cluster集群的环境准备" class="headerlink" title="2.2.1.1创建redis cluster集群的环境准备"></a>2.2.1.1创建redis cluster集群的环境准备</h4><p><img src="image-20231012160858415.png" alt="image-20231012160858415"></p><ul><li>每个Redis 节点采用相同的相同的Redis版本、相同的密码、硬件配置</li><li>所有Redis服务器必须没有任何数据</li><li>准备六台主机，地址如下：</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs http">10.0.0.3<br>10.0.0.4<br>10.0.0.6<br>10.0.0.127<br>10.0.0.128<br>10.0.0.129<br></code></pre></td></tr></table></figure><h4 id="2-2-1-2启用redis-cluster配置"><a href="#2-2-1-2启用redis-cluster配置" class="headerlink" title="2.2.1.2启用redis cluster配置"></a>2.2.1.2启用redis cluster配置</h4><p>所有6台主机都执行以下配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[16:50:29 root@redis-Master3 ~]#dnf -y install redis<br></code></pre></td></tr></table></figure><p>每个节点修改redis配置，必须开启cluster功能的参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">[17:02:04 root@redis-Slave3 ~]#vim /etc/redis.conf<br>bind 0.0.0.0<br>masterauth &quot;123456&quot;#建议配置，否则后期的master和slave主从复制无法成功，还需在配置<br>requirepass &quot;123456&quot;<br>cluster-enabled yes#取消此行注释，必须开启集群，开启后redis进程会有cluster标识<br>cluster-config-file nodes-6379.conf#取消此行注释，此为集权状态文件，记录主从关系及slot范围信息，由redis cluster 集群自动创建和维护<br>cluster-require-full-coverage no#默认值为yes，设为no可以防止一个节点不可用导致整个cluster不可用<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">或在所有节点上执行以下命令</span><br>[20:23:03 root@Slave-redis ~]#sed -i -e &#x27;s/bind 127.0.0.1/bind 0.0.0.0/&#x27; -e &#x27;s/^# masterauth .*/masterauth 123456/&#x27; -e &#x27;s/^# requirepass .*/requirepass 123456/&#x27;  -e &#x27;s/# cluster-enabled yes/cluster-enabled yes/&#x27; -e &#x27;s/# cluster-config-file nodes-6379.conf/cluster-config-file nodes-6379.conf/&#x27; -e &#x27;s/# cluster-require-full-coverage yes/cluster-require-full-coverage no/&#x27;  /etc/redis.conf<br><br><br>[17:23:57 root@redis-Master1 ~]#systemctl enable --now redis<br></code></pre></td></tr></table></figure><p>验证当前Redis服务状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">开启了16379的cluster的端口,实际的端口=redis port+10000</span><br>[17:27:05 root@redis-Master1 ~]#ss -ntl <br>State        Recv-Q       Send-Q             Local Address:Port              Peer Address:Port      Process       <br>LISTEN       0            128                      0.0.0.0:22                     0.0.0.0:*                       <br>LISTEN       0            511                      0.0.0.0:16379                  0.0.0.0:*                       <br>LISTEN       0            511                      0.0.0.0:6379                   0.0.0.0:*                       <br>LISTEN       0            128                         [::]:22                        [::]:*     <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">注意进程有[cluster]状态</span><br>[17:28:45 root@redis-Master1 ~]#ps -ef | grep redis<br>redis       2947       1  0 17:27 ?        00:00:00 /usr/bin/redis-server 0.0.0.0:6379 [cluster]<br>root        2954    2470  0 17:30 pts/1    00:00:00 grep --color=auto redis<br></code></pre></td></tr></table></figure><h4 id="2-2-1-3创建集群"><a href="#2-2-1-3创建集群" class="headerlink" title="2.2.1.3创建集群"></a>2.2.1.3创建集群</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">命令redis-cli的选项--cluster-replicas 1表示每个master对应一个slave节点</span><br>[21:09:09 root@redis-Master1 ~]#redis-cli -a 123456 --cluster create 10.0.0.3:6379 10.0.0.4:6379 10.0.0.6:6379 10.0.0.127:6379 10.0.0.128:6379 10.0.0.129:6379 --cluster-replicas 1<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Performing <span class="hljs-built_in">hash</span> slots allocation on 6 nodes...</span><br>Master[0] -&gt; Slots 0 - 5460<br>Master[1] -&gt; Slots 5461 - 10922<br>Master[2] -&gt; Slots 10923 - 16383<br>Adding replica 10.0.0.127:6379 to 10.0.0.3:6379<br>Adding replica 10.0.0.128:6379 to 10.0.0.4:6379<br>Adding replica 10.0.0.129:6379 to 10.0.0.6:6379<br>M: 71b6b0ec24e2bbc6b62f581787b9030a5152828c 10.0.0.3:6379#带M的为master<br>   slots:[0-5460] (5461 slots) master#当前master的槽位起始<br>M: 9fd92ffbe358bfa8552793f56b3300209e2c4d8b 10.0.0.4:6379<br>   slots:[5461-10922] (5462 slots) master<br>M: 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e 10.0.0.6:6379<br>   slots:[10923-16383] (5461 slots) master<br>S: 241b0a2e5ceafc7832e1483afe57b0b1b8814a27 10.0.0.127:6379#带s的slave<br>   replicates 71b6b0ec24e2bbc6b62f581787b9030a5152828c<br>S: e32d1fea077cb8328a6948f7816489ce0a2db96f 10.0.0.128:6379<br>   replicates 9fd92ffbe358bfa8552793f56b3300209e2c4d8b<br>S: ee5c967d90ad1138b1ff463fbfe5a5e5273c653c 10.0.0.129:6379<br>   replicates 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e<br>Can I set the above configuration? (type &#x27;yes&#x27; to accept): yes#输入yes自动创建集群<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Nodes configuration updated</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Assign a different config epoch to each node</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Sending CLUSTER MEET messages to <span class="hljs-built_in">join</span> the cluster</span><br>Waiting for the cluster to join<br>.....<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Performing Cluster Check (using node 10.0.0.3:6379)</span><br>M: 71b6b0ec24e2bbc6b62f581787b9030a5152828c 10.0.0.3:6379<br>   slots:[0-5460] (5461 slots) master#已经分配的槽位<br>   1 additional replica(s)#分配了一个slave<br>S: ee5c967d90ad1138b1ff463fbfe5a5e5273c653c 10.0.0.129:6379<br>   slots: (0 slots) slave#slave没有分配槽位<br>   replicates 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e#对应的master的10.0.0.6的ID<br>S: e32d1fea077cb8328a6948f7816489ce0a2db96f 10.0.0.128:6379<br>   slots: (0 slots) slave<br>   replicates 9fd92ffbe358bfa8552793f56b3300209e2c4d8b#对应的master的10.0.0.4的ID<br>S: 241b0a2e5ceafc7832e1483afe57b0b1b8814a27 10.0.0.127:6379<br>   slots: (0 slots) slave<br>   replicates 71b6b0ec24e2bbc6b62f581787b9030a5152828c#对应的master的10.0.0.3的ID<br>M: 9fd92ffbe358bfa8552793f56b3300209e2c4d8b 10.0.0.4:6379<br>   slots:[5461-10922] (5462 slots) master<br>   1 additional replica(s)<br>M: 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e 10.0.0.6:6379<br>   slots:[10923-16383] (5461 slots) master<br>   1 additional replica(s)<br>[OK] All nodes agree about slots configuration. #所有节点槽位分配完成<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check <span class="hljs-keyword">for</span> open slots...<span class="hljs-comment">#检查打开的槽位</span></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check slots coverage...<span class="hljs-comment">#检查插槽覆盖范围</span></span><br>[OK] All 16384 slots covered.#所有槽位（16384个）分配完成<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">观察以上结果，可以看到3组master/slave</span><br>master:10.0.0.3---slave:10.0.0.127<br>master:10.0.0.4---slave:10.0.0.128<br>master:10.0.0.6---slave:10.0.0.129<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果节点少于3个会出下面提示错误</span><br>[root@nodel ~]#redis-cli -a 123456 --cluster create 10.0.0.8:6379 10.0.0.18:6379<br>warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interfacemay not be safe<br>.*** ERROR: Invalid configuration for cluster creation<br>.*** Redis Cluster requires at least 3 master nodes.<br>*** This is not possible with 2 nodes and 0 replicas per node.<br>*** At least 3 nodes are required.<br></code></pre></td></tr></table></figure><h4 id="2-2-1-4验证集群"><a href="#2-2-1-4验证集群" class="headerlink" title="2.2.1.4验证集群"></a>2.2.1.4验证集群</h4><h5 id="2-2-1-4-1查看主从状态"><a href="#2-2-1-4-1查看主从状态" class="headerlink" title="2.2.1.4.1查看主从状态"></a>2.2.1.4.1查看主从状态</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs shell">[21:11:48 root@redis-Master1 ~]#redis-cli -a 123456 -c info replication<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Replication</span><br>role:master<br>connected_slaves:1<br>slave0:ip=10.0.0.127,port=6379,state=online,offset=1078,lag=1<br>master_replid:20f889c974ca4549d61acde3089811df089f984b<br>master_replid2:0000000000000000000000000000000000000000<br>master_repl_offset:1078<br>second_repl_offset:-1<br>repl_backlog_active:1<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:1<br>repl_backlog_histlen:1078<br><br>[20:21:16 root@redis-Master2 ~]#redis-cli -a 123456 -c info replication<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Replication</span><br>role:master<br>connected_slaves:1<br>slave0:ip=10.0.0.128,port=6379,state=online,offset=1134,lag=1<br>master_replid:20f3b5e4bfd611cad295f077ac4cca396b0ce49c<br>master_replid2:0000000000000000000000000000000000000000<br>master_repl_offset:1148<br>second_repl_offset:-1<br>repl_backlog_active:1<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:1<br>repl_backlog_histlen:1148<br><br>[20:21:48 root@redis-Master3 ~]#redis-cli -a 123456 -c info replication<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Replication</span><br>role:master<br>connected_slaves:1<br>slave0:ip=10.0.0.129,port=6379,state=online,offset=1190,lag=1<br>master_replid:13fdac9b1950a34a302b76f8136214a746bdde22<br>master_replid2:0000000000000000000000000000000000000000<br>master_repl_offset:1190<br>second_repl_offset:-1<br>repl_backlog_active:1<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:1<br>repl_backlog_histlen:1190<br><br>[21:10:29 root@redis-Slave1 ~]#redis-cli -a 123456 -c info replication<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Replication</span><br>role:slave<br>master_host:10.0.0.3<br>master_port:6379<br>master_link_status:up<br>master_last_io_seconds_ago:3<br>master_sync_in_progress:0<br>slave_repl_offset:1246<br>slave_priority:100<br>slave_read_only:1<br>connected_slaves:0<br>master_replid:20f889c974ca4549d61acde3089811df089f984b<br>master_replid2:0000000000000000000000000000000000000000<br>master_repl_offset:1246<br>second_repl_offset:-1<br>repl_backlog_active:1<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:1<br>repl_backlog_histlen:1246<br><br>[20:22:07 root@redis-Slave2 ~]#redis-cli -a 123456 -c info replication<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Replication</span><br>role:slave<br>master_host:10.0.0.4<br>master_port:6379<br>master_link_status:up<br>master_last_io_seconds_ago:9<br>master_sync_in_progress:0<br>slave_repl_offset:1288<br>slave_priority:100<br>slave_read_only:1<br>connected_slaves:0<br>master_replid:20f3b5e4bfd611cad295f077ac4cca396b0ce49c<br>master_replid2:0000000000000000000000000000000000000000<br>master_repl_offset:1288<br>second_repl_offset:-1<br>repl_backlog_active:1<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:1<br>repl_backlog_histlen:1288<br><br>[20:22:17 root@redis-Slave3 ~]#redis-cli -a 123456 -c info replication<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Replication</span><br>role:slave<br>master_host:10.0.0.6<br>master_port:6379<br>master_link_status:up<br>master_last_io_seconds_ago:6<br>master_sync_in_progress:0<br>slave_repl_offset:1330<br>slave_priority:100<br>slave_read_only:1<br>connected_slaves:0<br>master_replid:13fdac9b1950a34a302b76f8136214a746bdde22<br>master_replid2:0000000000000000000000000000000000000000<br>master_repl_offset:1330<br>second_repl_offset:-1<br>repl_backlog_active:1<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:1<br>repl_backlog_histlen:1330<br><br></code></pre></td></tr></table></figure><p>范例：查看指定master节点的slave节点信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">[21:24:45 root@redis-Master1 ~]#redis-cli -a 123456 cluster nodes<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>ee5c967d90ad1138b1ff463fbfe5a5e5273c653c 10.0.0.129:6379@16379 slave 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e 0 1697117316188 6 connected<br>e32d1fea077cb8328a6948f7816489ce0a2db96f 10.0.0.128:6379@16379 slave 9fd92ffbe358bfa8552793f56b3300209e2c4d8b 0 1697117314171 5 connected<br>71b6b0ec24e2bbc6b62f581787b9030a5152828c 10.0.0.3:6379@16379 myself,master - 0 1697117313000 1 connected 0-5460<br>241b0a2e5ceafc7832e1483afe57b0b1b8814a27 10.0.0.127:6379@16379 slave 71b6b0ec24e2bbc6b62f581787b9030a5152828c 0 1697117314000 4 connected<br>9fd92ffbe358bfa8552793f56b3300209e2c4d8b 10.0.0.4:6379@16379 master - 0 1697117313163 2 connected 5461-10922<br>6780cddc5d7b21255416d7a47ef5ed9addcfcb8e 10.0.0.6:6379@16379 master - 0 1697117315180 3 connected 10923-16383<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">以下命令查看指定master节点的slave节点信息，其中</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">71b6b0ec24e2bbc6b62f581787b9030a5152828c 为master节点的ID</span><br>[21:28:36 root@redis-Master1 ~]#redis-cli -a 123456 cluster slaves 71b6b0ec24e2bbc6b62f581787b9030a5152828c<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>1) &quot;241b0a2e5ceafc7832e1483afe57b0b1b8814a27 10.0.0.127:6379@16379 slave 71b6b0ec24e2bbc6b62f581787b9030a5152828c 0 1697117486000 4 connected&quot;<br><br></code></pre></td></tr></table></figure><h5 id="2-2-1-4-2验证集群状态"><a href="#2-2-1-4-2验证集群状态" class="headerlink" title="2.2.1.4.2验证集群状态"></a>2.2.1.4.2验证集群状态</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell">21:32:37 root@redis-Master1 ~]#redis-cli -a 123456 -c cluster info<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>cluster_state:ok<br>cluster_slots_assigned:16384<br>cluster_slots_ok:16384<br>cluster_slots_pfail:0<br>cluster_slots_fail:0<br>cluster_known_nodes:6#节点数<br>cluster_size:3#三个集群<br>cluster_current_epoch:6<br>cluster_my_epoch:1<br>cluster_stats_messages_ping_sent:1255<br>cluster_stats_messages_pong_sent:1204<br>cluster_stats_messages_sent:2459<br>cluster_stats_messages_ping_received:1199<br>cluster_stats_messages_pong_received:1255<br>cluster_stats_messages_meet_received:5<br>cluster_stats_messages_received:2459<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看任意节点的集群状态</span><br>[21:32:46 root@redis-Master1 ~]#redis-cli -a 123456 --cluster info 10.0.0.4:6379<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>10.0.0.4:6379 (9fd92ffb...) -&gt; 0 keys | 5462 slots | 1 slaves.<br>10.0.0.3:6379 (71b6b0ec...) -&gt; 0 keys | 5461 slots | 1 slaves.<br>10.0.0.6:6379 (6780cddc...) -&gt; 0 keys | 5461 slots | 1 slaves.<br>[OK] 0 keys in 3 masters.<br>0.00 keys per slot on average.<br><br></code></pre></td></tr></table></figure><h5 id="2-2-1-4-3查看对应关系"><a href="#2-2-1-4-3查看对应关系" class="headerlink" title="2.2.1.4.3查看对应关系"></a>2.2.1.4.3查看对应关系</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs shell">[21:34:21 root@redis-Master1 ~]#redis-cli -a 123456 cluster nodes<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>ee5c967d90ad1138b1ff463fbfe5a5e5273c653c 10.0.0.129:6379@16379 slave 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e 0 1697117749587 6 connected<br>e32d1fea077cb8328a6948f7816489ce0a2db96f 10.0.0.128:6379@16379 slave 9fd92ffbe358bfa8552793f56b3300209e2c4d8b 0 1697117748577 5 connected<br>71b6b0ec24e2bbc6b62f581787b9030a5152828c 10.0.0.3:6379@16379 myself,master - 0 1697117747000 1 connected 0-5460<br>241b0a2e5ceafc7832e1483afe57b0b1b8814a27 10.0.0.127:6379@16379 slave 71b6b0ec24e2bbc6b62f581787b9030a5152828c 0 1697117747570 4 connected<br>9fd92ffbe358bfa8552793f56b3300209e2c4d8b 10.0.0.4:6379@16379 master - 0 1697117748000 2 connected 5461-10922<br>6780cddc5d7b21255416d7a47ef5ed9addcfcb8e 10.0.0.6:6379@16379 master - 0 1697117750596 3 connected 10923-16383<br><br><br>[21:35:50 root@redis-Master1 ~]#redis-cli -a 123456 --cluster check 10.0.0.6:6379<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>10.0.0.6:6379 (6780cddc...) -&gt; 0 keys | 5461 slots | 1 slaves.<br>10.0.0.3:6379 (71b6b0ec...) -&gt; 0 keys | 5461 slots | 1 slaves.<br>10.0.0.4:6379 (9fd92ffb...) -&gt; 0 keys | 5462 slots | 1 slaves.<br>[OK] 0 keys in 3 masters.<br>0.00 keys per slot on average.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Performing Cluster Check (using node 10.0.0.6:6379)</span><br>M: 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e 10.0.0.6:6379<br>   slots:[10923-16383] (5461 slots) master<br>   1 additional replica(s)<br>M: 71b6b0ec24e2bbc6b62f581787b9030a5152828c 10.0.0.3:6379<br>   slots:[0-5460] (5461 slots) master<br>   1 additional replica(s)<br>M: 9fd92ffbe358bfa8552793f56b3300209e2c4d8b 10.0.0.4:6379<br>   slots:[5461-10922] (5462 slots) master<br>   1 additional replica(s)<br>S: e32d1fea077cb8328a6948f7816489ce0a2db96f 10.0.0.128:6379<br>   slots: (0 slots) slave<br>   replicates 9fd92ffbe358bfa8552793f56b3300209e2c4d8b<br>S: 241b0a2e5ceafc7832e1483afe57b0b1b8814a27 10.0.0.127:6379<br>   slots: (0 slots) slave<br>   replicates 71b6b0ec24e2bbc6b62f581787b9030a5152828c<br>S: ee5c967d90ad1138b1ff463fbfe5a5e5273c653c 10.0.0.129:6379<br>   slots: (0 slots) slave<br>   replicates 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e<br>[OK] All nodes agree about slots configuration.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check <span class="hljs-keyword">for</span> open slots...</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check slots coverage...</span><br>[OK] All 16384 slots covered.<br></code></pre></td></tr></table></figure><h4 id="2-2-1-5测试集群写入数据"><a href="#2-2-1-5测试集群写入数据" class="headerlink" title="2.2.1.5测试集群写入数据"></a>2.2.1.5测试集群写入数据</h4><p><img src="image-20231012213754844.png" alt="image-20231012213754844"></p><h5 id="3-3-3-5-1-redis-cluster-写入key"><a href="#3-3-3-5-1-redis-cluster-写入key" class="headerlink" title="3.3.3.5.1 redis cluster 写入key"></a>3.3.3.5.1 redis cluster 写入key</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">经过算法计算，当前key的槽位需要写入指定的node</span><br>[21:39:28 root@redis-Master1 ~]#redis-cli -a 123456 -h 10.0.0.3 set key1 values1<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>(error) MOVED 9189 10.0.0.4:6379#槽位不在当前node所以无法写入<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">指定槽位对应node可写入</span><br>[21:39:40 root@redis-Master1 ~]#redis-cli -a 123456 -h 10.0.0.4 set key1 values1<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>OK<br>[21:41:27 root@redis-Master1 ~]#redis-cli -a 123456 -h 10.0.0.4 get key1 <br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>&quot;values1&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">对应的slave节点可以KEYS*，但GET key1失败，可以到master上执行GET key1</span><br>[21:46:43 root@redis-Master1 ~]#redis-cli -a 123456 -h 10.0.0.128 KEYS &quot;*&quot;<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>1) &quot;key1&quot;<br>[21:46:57 root@redis-Master1 ~]#redis-cli -a 123456 -h 10.0.0.128 get key1<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>(error) MOVED 9189 10.0.0.4:6379<br>[21:47:12 root@redis-Master1 ~]#redis-cli -a 123456 -h 10.0.0.4 get key1<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>&quot;values1&quot;<br></code></pre></td></tr></table></figure><h5 id="3-3-3-5-2-redis-cluster-计算key所属的slot"><a href="#3-3-3-5-2-redis-cluster-计算key所属的slot" class="headerlink" title="3.3.3.5.2 redis cluster 计算key所属的slot"></a>3.3.3.5.2 redis cluster 计算key所属的slot</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[21:47:46 root@redis-Master1 ~]#redis-cli -h 10.0.0.3 -a 123456 --no-auth-warning cluster nodes<br>ee5c967d90ad1138b1ff463fbfe5a5e5273c653c 10.0.0.129:6379@16379 slave 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e 0 1697118541397 6 connected<br>e32d1fea077cb8328a6948f7816489ce0a2db96f 10.0.0.128:6379@16379 slave 9fd92ffbe358bfa8552793f56b3300209e2c4d8b 0 1697118541000 5 connected<br>71b6b0ec24e2bbc6b62f581787b9030a5152828c 10.0.0.3:6379@16379 myself,master - 0 1697118539000 1 connected 0-5460<br>241b0a2e5ceafc7832e1483afe57b0b1b8814a27 10.0.0.127:6379@16379 slave 71b6b0ec24e2bbc6b62f581787b9030a5152828c 0 1697118542403 4 connected<br>9fd92ffbe358bfa8552793f56b3300209e2c4d8b 10.0.0.4:6379@16379 master - 0 1697118543411 2 connected 5461-10922<br>6780cddc5d7b21255416d7a47ef5ed9addcfcb8e 10.0.0.6:6379@16379 master - 0 1697118541000 3 connected 10923-16383<br></code></pre></td></tr></table></figure><h4 id="2-2-1-6-模拟故障实现故障转移"><a href="#2-2-1-6-模拟故障实现故障转移" class="headerlink" title="2.2.1.6 模拟故障实现故障转移"></a>2.2.1.6 模拟故障实现故障转移</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">模拟master2节点出故障，需要相应的数秒故障转移时间</span><br>[22:16:16 root@redis-Master2 ~]#tail -f  /var/log/redis/redis.log  <br>[21:53:14 root@redis-Master2 ~]#redis-cli -a 123456<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>127.0.0.1:6379&gt; shutdown<br>not connected&gt; exit<br>[22:20:52 root@redis-Master2 ~]#ss -ntl<br>State        Recv-Q       Send-Q             Local Address:Port             Peer Address:Port       Process                          <br>LISTEN       0            128                      0.0.0.0:22                    0.0.0.0:*                                                                     <br>LISTEN       0            128                         [::]:22                       [::]:*                        <br><br><br>[22:20:55 root@redis-Master2 ~]#redis-cli -a 123456 --cluster info 10.0.0.3:6379<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>Could not connect to Redis at 10.0.0.4:6379: Connection refused<br>10.0.0.3:6379 (71b6b0ec...) -&gt; 2 keys | 5461 slots | 1 slaves.<br>10.0.0.128:6379 (e32d1fea...) -&gt; 5 keys | 5462 slots | 0 slaves.<br>10.0.0.6:6379 (6780cddc...) -&gt; 3 keys | 5461 slots | 1 slaves.<br>[OK] 10 keys in 3 masters.<br>0.00 keys per slot on average.<br><br><br>[22:22:04 root@redis-Master2 ~]#redis-cli -a 123456 --cluster check 10.0.0.3:6379<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>Could not connect to Redis at 10.0.0.4:6379: Connection refused<br>10.0.0.3:6379 (71b6b0ec...) -&gt; 2 keys | 5461 slots | 1 slaves.<br>10.0.0.128:6379 (e32d1fea...) -&gt; 5 keys | 5462 slots | 0 slaves.<br>10.0.0.6:6379 (6780cddc...) -&gt; 3 keys | 5461 slots | 1 slaves.<br>[OK] 10 keys in 3 masters.<br>0.00 keys per slot on average.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Performing Cluster Check (using node 10.0.0.3:6379)</span><br>M: 71b6b0ec24e2bbc6b62f581787b9030a5152828c 10.0.0.3:6379<br>   slots:[0-5460] (5461 slots) master<br>   1 additional replica(s)<br>S: ee5c967d90ad1138b1ff463fbfe5a5e5273c653c 10.0.0.129:6379<br>   slots: (0 slots) slave<br>   replicates 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e<br>M: e32d1fea077cb8328a6948f7816489ce0a2db96f 10.0.0.128:6379<br>   slots:[5461-10922] (5462 slots) master<br>S: 241b0a2e5ceafc7832e1483afe57b0b1b8814a27 10.0.0.127:6379<br>   slots: (0 slots) slave<br>   replicates 71b6b0ec24e2bbc6b62f581787b9030a5152828c<br>M: 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e 10.0.0.6:6379<br>   slots:[10923-16383] (5461 slots) master<br>   1 additional replica(s)<br>[OK] All nodes agree about slots configuration.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check <span class="hljs-keyword">for</span> open slots...</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check slots coverage...</span><br>[OK] All 16384 slots covered.<br><br><br>[22:23:06 root@redis-Master2 ~]#redis-cli -a 123456 -h 10.0.0.128<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>10.0.0.128:6379&gt; info replication<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Replication</span><br>role:master<br>connected_slaves:0<br>master_replid:00a4e3bd45cc7569400a9f2c64faf59d7f1382e0<br>master_replid2:20f3b5e4bfd611cad295f077ac4cca396b0ce49c<br>master_repl_offset:5922<br>second_repl_offset:5923<br>repl_backlog_active:1<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:1<br>repl_backlog_histlen:5922<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">恢复故障节点master2自动成为slave节点</span><br>[22:25:27 root@redis-Master2 ~]#systemctl start redis<br>[22:25:41 root@redis-Master2 ~]#cat /var/lib/redis/nodes-6379.conf <br>9fd92ffbe358bfa8552793f56b3300209e2c4d8b 10.0.0.4:6379@16379 myself,slave e32d1fea077cb8328a6948f7816489ce0a2db96f 0 1697120733950 2 connected<br>e32d1fea077cb8328a6948f7816489ce0a2db96f 10.0.0.128:6379@16379 master - 0 1697120733955 7 connected 5461-10922<br>6780cddc5d7b21255416d7a47ef5ed9addcfcb8e 10.0.0.6:6379@16379 master - 0 1697120733955 3 connected 10923-16383<br>71b6b0ec24e2bbc6b62f581787b9030a5152828c 10.0.0.3:6379@16379 master - 0 1697120733955 1 connected 0-5460<br>ee5c967d90ad1138b1ff463fbfe5a5e5273c653c 10.0.0.129:6379@16379 slave 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e 0 1697120733955 6 connected<br>241b0a2e5ceafc7832e1483afe57b0b1b8814a27 10.0.0.127:6379@16379 slave 71b6b0ec24e2bbc6b62f581787b9030a5152828c 0 1697120733955 4 connected<br>vars currentEpoch 7 lastVoteEpoch 0<br><br>[22:26:47 root@redis-Master2 ~]#redis-cli -a 123456 -h 10.0.0.128<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>10.0.0.128:6379&gt; info replication<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Replication</span><br>role:master<br>connected_slaves:1<br>slave0:ip=10.0.0.4,port=6379,state=online,offset=6090,lag=1<br>master_replid:00a4e3bd45cc7569400a9f2c64faf59d7f1382e0<br>master_replid2:20f3b5e4bfd611cad295f077ac4cca396b0ce49c<br>master_repl_offset:6090<br>second_repl_offset:5923<br>repl_backlog_active:1<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:1<br>repl_backlog_histlen:6090<br></code></pre></td></tr></table></figure><h3 id="2-2-2-Redis-cluster管理扩容-缩容"><a href="#2-2-2-Redis-cluster管理扩容-缩容" class="headerlink" title="2.2.2 Redis cluster管理扩容/缩容"></a>2.2.2 Redis cluster管理扩容/缩容</h3><h4 id="2-2-2-1集群扩容"><a href="#2-2-2-1集群扩容" class="headerlink" title="2.2.2.1集群扩容"></a>2.2.2.1集群扩容</h4><p><strong>扩容适用场景：</strong></p><p>当前客户量激增，现有的Redis cluster架构已经无法满足越来越高的并发访问请求，为解决此问题，新购置两台服务器，要求将其动态添加到现有集群，但不能影响业务的正常访问。</p><p>注意：生产环境一般建议master节点为奇数个，比如：3,5,7,以防止脑裂现象</p><p><img src="image-20231012223019823.png" alt="image-20231012223019823"></p><p><img src="image-20231012223029776.png" alt="image-20231012223029776"></p><h5 id="2-2-2-1-1添加节点准备"><a href="#2-2-2-1-1添加节点准备" class="headerlink" title="2.2.2.1.1添加节点准备"></a>2.2.2.1.1添加节点准备</h5><p>增加Redis新节点，需要与之前的Redis node版本和配置一致，然后分别再启动两台Redis node，应为一主一从。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">Master4节点、Slave4节点</span><br>[23:37:57 root@redis-Master4 ~]#yum install -y redis<br><br>[23:39:55 root@redis-Master4 ~]#sed -i -e &#x27;s/bind 127.0.0.1/bind 0.0.0.0/&#x27; -e &#x27;s/^# masterauth .*/masterauth 123456/&#x27; -e &#x27;s/^# requirepass .*/requirepass 123456/&#x27;  -e &#x27;s/# cluster-enabled yes/cluster-enabled yes/&#x27; -e &#x27;s/# cluster-config-file nodes-6379.conf/cluster-config-file nodes-6379.conf/&#x27; -e &#x27;s/# cluster-require-full-coverage yes/cluster-require-full-coverage no/&#x27;  /etc/redis.conf<br><br><br><br>[23:40:08 root@redis-Master4 ~]#systemctl enable --now redis<br></code></pre></td></tr></table></figure><h5 id="2-2-21-2添加新的master节点到集群"><a href="#2-2-21-2添加新的master节点到集群" class="headerlink" title="2.2.21.2添加新的master节点到集群"></a>2.2.21.2添加新的master节点到集群</h5><p>使用以下命令添加新节点，要添加的新redis节点IP和端口添加到的已有的集群中任意节点的IP：端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[--slave --master-idadd-node new_host:new_port existing_host:existing_port&lt;arg&gt;]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">说明：</span><br>new_host:new_port#指定新添加的主机的IP和端口<br>existing_host:existing_port#指定已有的集群中任意节点的IP和端口<br></code></pre></td></tr></table></figure><p><strong>Redis 5 以上版本的添加命令：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">将一台新的主机10.0.0.133加入集群，以下示例中10.0.0.6可以是任意存在的集群节点</span><br>[23:01:53 root@redis-Master3 ~]#redis-cli -a 123456 --cluster add-node 10.0.0.9:6379 10.0.0.6:6379<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Adding node 10.0.0.9:6379 to cluster 10.0.0.6:6379</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Performing Cluster Check (using node 10.0.0.6:6379)</span><br>M: 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e 10.0.0.6:6379<br>   slots:[10923-16383] (5461 slots) master<br>   1 additional replica(s)<br>M: 71b6b0ec24e2bbc6b62f581787b9030a5152828c 10.0.0.3:6379<br>   slots:[0-5460] (5461 slots) master<br>   1 additional replica(s)<br>S: 9fd92ffbe358bfa8552793f56b3300209e2c4d8b 10.0.0.4:6379<br>   slots: (0 slots) slave<br>   replicates e32d1fea077cb8328a6948f7816489ce0a2db96f<br>M: e32d1fea077cb8328a6948f7816489ce0a2db96f 10.0.0.128:6379<br>   slots:[5461-10922] (5462 slots) master<br>   1 additional replica(s)<br>S: 241b0a2e5ceafc7832e1483afe57b0b1b8814a27 10.0.0.127:6379<br>   slots: (0 slots) slave<br>   replicates 71b6b0ec24e2bbc6b62f581787b9030a5152828c<br>S: ee5c967d90ad1138b1ff463fbfe5a5e5273c653c 10.0.0.129:6379<br>   slots: (0 slots) slave<br>   replicates 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e<br>[OK] All nodes agree about slots configuration.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check <span class="hljs-keyword">for</span> open slots...</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check slots coverage...</span><br>[OK] All 16384 slots covered.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Send CLUSTER MEET to node 10.0.0.9:6379 to make it <span class="hljs-built_in">join</span> the cluster.</span><br>[OK] New node added correctly.<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">观察到该节点已经加入成功，但此节点上没有slot位，也无从节点，而且新的节点是master</span><br>[23:47:08 root@redis-Master3 ~]#redis-cli -a 123456 --cluster info 10.0.0.6:6379<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>10.0.0.6:6379 (6780cddc...) -&gt; 3 keys | 5461 slots | 1 slaves.<br>10.0.0.3:6379 (71b6b0ec...) -&gt; 2 keys | 5461 slots | 1 slaves.<br>10.0.0.9:6379 (96915f53...) -&gt; 0 keys | 0 slots | 0 slaves.<br>10.0.0.128:6379 (e32d1fea...) -&gt; 5 keys | 5462 slots | 1 slaves.<br>[OK] 10 keys in 4 masters.<br>0.00 keys per slot on average.<br><br><br>[23:48:10 root@redis-Master3 ~]#redis-cli -a 123456 --cluster check 10.0.0.6:6379<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>10.0.0.6:6379 (6780cddc...) -&gt; 3 keys | 5461 slots | 1 slaves.<br>10.0.0.3:6379 (71b6b0ec...) -&gt; 2 keys | 5461 slots | 1 slaves.<br>10.0.0.9:6379 (96915f53...) -&gt; 0 keys | 0 slots | 0 slaves.<br>10.0.0.128:6379 (e32d1fea...) -&gt; 5 keys | 5462 slots | 1 slaves.<br>[OK] 10 keys in 4 masters.<br>0.00 keys per slot on average.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Performing Cluster Check (using node 10.0.0.6:6379)</span><br>M: 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e 10.0.0.6:6379<br>   slots:[10923-16383] (5461 slots) master<br>   1 additional replica(s)<br>M: 71b6b0ec24e2bbc6b62f581787b9030a5152828c 10.0.0.3:6379<br>   slots:[0-5460] (5461 slots) master<br>   1 additional replica(s)<br>S: 9fd92ffbe358bfa8552793f56b3300209e2c4d8b 10.0.0.4:6379<br>   slots: (0 slots) slave<br>   replicates e32d1fea077cb8328a6948f7816489ce0a2db96f<br>M: 96915f53b227e3edfa27dae770b17850f579d8fe 10.0.0.9:6379<br>   slots: (0 slots) master<br>M: e32d1fea077cb8328a6948f7816489ce0a2db96f 10.0.0.128:6379<br>   slots:[5461-10922] (5462 slots) master<br>   1 additional replica(s)<br>S: 241b0a2e5ceafc7832e1483afe57b0b1b8814a27 10.0.0.127:6379<br>   slots: (0 slots) slave<br>   replicates 71b6b0ec24e2bbc6b62f581787b9030a5152828c<br>S: ee5c967d90ad1138b1ff463fbfe5a5e5273c653c 10.0.0.129:6379<br>   slots: (0 slots) slave<br>   replicates 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e<br>[OK] All nodes agree about slots configuration.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check <span class="hljs-keyword">for</span> open slots...</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check slots coverage...</span><br>[OK] All 16384 slots covered.<br><br><br><br>[23:49:14 root@redis-Master3 ~]#cat /var/lib/redis/nodes-6379.conf <br>71b6b0ec24e2bbc6b62f581787b9030a5152828c 10.0.0.3:6379@16379 master - 0 1697125626772 1 connected 0-5460<br>9fd92ffbe358bfa8552793f56b3300209e2c4d8b 10.0.0.4:6379@16379 slave e32d1fea077cb8328a6948f7816489ce0a2db96f 0 1697125624762 7 connected<br>96915f53b227e3edfa27dae770b17850f579d8fe 10.0.0.9:6379@16379 master - 0 1697125628583 0 connected<br>e32d1fea077cb8328a6948f7816489ce0a2db96f 10.0.0.128:6379@16379 master - 0 1697125625000 7 connected 5461-10922<br>6780cddc5d7b21255416d7a47ef5ed9addcfcb8e 10.0.0.6:6379@16379 myself,master - 0 1697125626000 3 connected 10923-16383<br>241b0a2e5ceafc7832e1483afe57b0b1b8814a27 10.0.0.127:6379@16379 slave 71b6b0ec24e2bbc6b62f581787b9030a5152828c 0 1697125625768 4 connected<br>ee5c967d90ad1138b1ff463fbfe5a5e5273c653c 10.0.0.129:6379@16379 slave 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e 0 1697125627778 6 connected<br>vars currentEpoch 7 lastVoteEpoch 7<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">和上面显示结果一样</span><br>[23:49:58 root@redis-Master3 ~]#redis-cli -a 123456 cluster nodes<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>71b6b0ec24e2bbc6b62f581787b9030a5152828c 10.0.0.3:6379@16379 master - 0 1697125837000 1 connected 0-5460<br>9fd92ffbe358bfa8552793f56b3300209e2c4d8b 10.0.0.4:6379@16379 slave e32d1fea077cb8328a6948f7816489ce0a2db96f 0 1697125838000 7 connected<br>96915f53b227e3edfa27dae770b17850f579d8fe 10.0.0.9:6379@16379 master - 0 1697125837000 0 connected<br>e32d1fea077cb8328a6948f7816489ce0a2db96f 10.0.0.128:6379@16379 master - 0 1697125838000 7 connected 5461-10922<br>6780cddc5d7b21255416d7a47ef5ed9addcfcb8e 10.0.0.6:6379@16379 myself,master - 0 1697125836000 3 connected 10923-16383<br>241b0a2e5ceafc7832e1483afe57b0b1b8814a27 10.0.0.127:6379@16379 slave 71b6b0ec24e2bbc6b62f581787b9030a5152828c 0 1697125839413 4 connected<br>ee5c967d90ad1138b1ff463fbfe5a5e5273c653c 10.0.0.129:6379@16379 slave 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e 0 1697125838405 6 connected<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看集群状态</span><br>[23:50:40 root@redis-Master3 ~]#redis-cli -a 123456 cluster info<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>cluster_state:ok<br>cluster_slots_assigned:16384<br>cluster_slots_ok:16384<br>cluster_slots_pfail:0<br>cluster_slots_fail:0<br>cluster_known_nodes:7<br>cluster_size:3<br>cluster_current_epoch:7<br>cluster_my_epoch:3<br>cluster_stats_messages_ping_sent:12668<br>cluster_stats_messages_pong_sent:9434<br>cluster_stats_messages_meet_sent:3<br>cluster_stats_messages_fail_sent:4<br>cluster_stats_messages_auth-ack_sent:1<br>cluster_stats_messages_sent:22110<br>cluster_stats_messages_ping_received:9431<br>cluster_stats_messages_pong_received:9535<br>cluster_stats_messages_meet_received:3<br>cluster_stats_messages_fail_received:1<br>cluster_stats_messages_auth-req_received:1<br>cluster_stats_messages_received:18971<br></code></pre></td></tr></table></figure><h5 id="2-2-2-1-3在新的master上重新分配槽位"><a href="#2-2-2-1-3在新的master上重新分配槽位" class="headerlink" title="2.2.2.1.3在新的master上重新分配槽位"></a>2.2.2.1.3在新的master上重新分配槽位</h5><p>新的node节点加到集群之后，默认是master节点，但是没有slots，需要重新分配，否则没有槽位将无法访问</p><p><strong>注意：重新分配槽位需要清空数据，所以需要先备份数据，扩展后再恢复数据</strong></p><p>Redis 5以上版本命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs shell">[23:59:38 root@redis-Master3 ~]#redis-cli -a 123456 --cluster reshard 10.0.0.6:6379<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Performing Cluster Check (using node 10.0.0.6:6379)</span><br>M: 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e 10.0.0.6:6379<br>   slots:[12288-16383] (4096 slots) master<br>   1 additional replica(s)<br>M: 71b6b0ec24e2bbc6b62f581787b9030a5152828c 10.0.0.3:6379<br>   slots:[1365-5460] (4096 slots) master<br>   1 additional replica(s)<br>S: 9fd92ffbe358bfa8552793f56b3300209e2c4d8b 10.0.0.4:6379<br>   slots: (0 slots) slave<br>   replicates e32d1fea077cb8328a6948f7816489ce0a2db96f<br>M: 96915f53b227e3edfa27dae770b17850f579d8fe 10.0.0.9:6379<br>   slots:[0-1364],[5461-6826],[10923-12287] (4096 slots) master<br>M: e32d1fea077cb8328a6948f7816489ce0a2db96f 10.0.0.128:6379<br>   slots:[6827-10922] (4096 slots) master<br>   1 additional replica(s)<br>S: 241b0a2e5ceafc7832e1483afe57b0b1b8814a27 10.0.0.127:6379<br>   slots: (0 slots) slave<br>   replicates 71b6b0ec24e2bbc6b62f581787b9030a5152828c<br>S: ee5c967d90ad1138b1ff463fbfe5a5e5273c653c 10.0.0.129:6379<br>   slots: (0 slots) slave<br>   replicates 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e<br>[OK] All nodes agree about slots configuration.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check <span class="hljs-keyword">for</span> open slots...</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check slots coverage...</span><br>[OK] All 16384 slots covered.<br>How many slots do you want to move (from 1 to 16384)? 4096 #新分配多少个槽位=16384/master个数<br>What is the receiving node ID? 96915f53b227e3edfa27dae770b17850f579d8fe#新的masterID<br>Please enter all the source node IDs.<br>  Type &#x27;all&#x27; to use all the nodes as source nodes for the hash slots.<br>  Type &#x27;done&#x27; once you entered all the source nodes IDs.<br>Source node #1: all#输入all，将哪些源主机的槽位分配给新的节点，al1是自动在所有的redis node选择划分，如果是从redis cluster删除某个主机可以使用此方式将指定主机上的槽位全部移动到别的redis主机<br>Do you want to proceed with the proposed reshard plan (yes/no)? yes #确认分配<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">确定slot分配成功</span><br>[00:01:09 root@redis-Master3 ~]#redis-cli -a 123456 --cluster check 10.0.0.6:6379<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>10.0.0.6:6379 (6780cddc...) -&gt; 2 keys | 4096 slots | 1 slaves.<br>10.0.0.3:6379 (71b6b0ec...) -&gt; 2 keys | 4096 slots | 1 slaves.<br>10.0.0.9:6379 (96915f53...) -&gt; 2 keys | 4096 slots | 0 slaves.<br>10.0.0.128:6379 (e32d1fea...) -&gt; 4 keys | 4096 slots | 1 slaves.<br>[OK] 10 keys in 4 masters.<br>0.00 keys per slot on average.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Performing Cluster Check (using node 10.0.0.6:6379)</span><br>M: 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e 10.0.0.6:6379<br>   slots:[12288-16383] (4096 slots) master<br>   1 additional replica(s)<br>M: 71b6b0ec24e2bbc6b62f581787b9030a5152828c 10.0.0.3:6379<br>   slots:[1365-5460] (4096 slots) master<br>   1 additional replica(s)<br>S: 9fd92ffbe358bfa8552793f56b3300209e2c4d8b 10.0.0.4:6379<br>   slots: (0 slots) slave<br>   replicates e32d1fea077cb8328a6948f7816489ce0a2db96f<br>M: 96915f53b227e3edfa27dae770b17850f579d8fe 10.0.0.9:6379<br>   slots:[0-1364],[5461-6826],[10923-12287] (4096 slots) master #可以看4096个slots<br>M: e32d1fea077cb8328a6948f7816489ce0a2db96f 10.0.0.128:6379<br>   slots:[6827-10922] (4096 slots) master<br>   1 additional replica(s)<br>S: 241b0a2e5ceafc7832e1483afe57b0b1b8814a27 10.0.0.127:6379<br>   slots: (0 slots) slave<br>   replicates 71b6b0ec24e2bbc6b62f581787b9030a5152828c<br>S: ee5c967d90ad1138b1ff463fbfe5a5e5273c653c 10.0.0.129:6379<br>   slots: (0 slots) slave<br>   replicates 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e<br>[OK] All nodes agree about slots configuration.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check <span class="hljs-keyword">for</span> open slots...</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check slots coverage...</span><br>[OK] All 16384 slots covered.<br></code></pre></td></tr></table></figure><h5 id="2-2-2-1-4为新的master指定新的slave节点"><a href="#2-2-2-1-4为新的master指定新的slave节点" class="headerlink" title="2.2.2.1.4为新的master指定新的slave节点"></a>2.2.2.1.4为新的master指定新的slave节点</h5><p>当前Redis集群中新的master节点存单点问题,还需要给其添加一个对应slave节点，实现高可用功能有</p><p>两种方式：</p><p><strong>方法1：在新加节点到集群时，直接将之设置为slave</strong></p><p>Redis 5 以上版本添加命令：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">redis-cli-a 123456--cluster add-node 10.0.0.78:6379&lt;任意集群节点&gt;:6379--cluster-slave --cluster-master-id  d6eleca6b338b717923f64866bd31d42e52edc98<br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs shell">[00:07:52 root@redis-Master3 ~]#redis-cli -a 123456 --cluster add-node 10.0.0.133:6379 10.0.0.9:6379 --cluster-slave --cluster-master-id 96915f53b227e3edfa27dae770b17850f579d8fe<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Adding node 10.0.0.133:6379 to cluster 10.0.0.6:6379</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Performing Cluster Check (using node 10.0.0.6:6379)</span><br>M: 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e 10.0.0.6:6379<br>   slots:[12288-16383] (4096 slots) master<br>   1 additional replica(s)<br>M: 71b6b0ec24e2bbc6b62f581787b9030a5152828c 10.0.0.3:6379<br>   slots:[1365-5460] (4096 slots) master<br>   1 additional replica(s)<br>S: 9fd92ffbe358bfa8552793f56b3300209e2c4d8b 10.0.0.4:6379<br>   slots: (0 slots) slave<br>   replicates e32d1fea077cb8328a6948f7816489ce0a2db96f<br>M: 96915f53b227e3edfa27dae770b17850f579d8fe 10.0.0.9:6379<br>   slots:[0-1364],[5461-6826],[10923-12287] (4096 slots) master<br>M: e32d1fea077cb8328a6948f7816489ce0a2db96f 10.0.0.128:6379<br>   slots:[6827-10922] (4096 slots) master<br>   1 additional replica(s)<br>S: 241b0a2e5ceafc7832e1483afe57b0b1b8814a27 10.0.0.127:6379<br>   slots: (0 slots) slave<br>   replicates 71b6b0ec24e2bbc6b62f581787b9030a5152828c<br>S: ee5c967d90ad1138b1ff463fbfe5a5e5273c653c 10.0.0.129:6379<br>   slots: (0 slots) slave<br>   replicates 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e<br>[OK] All nodes agree about slots configuration.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check <span class="hljs-keyword">for</span> open slots...</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check slots coverage...</span><br>[OK] All 16384 slots covered.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Send CLUSTER MEET to node 10.0.0.133:6379 to make it <span class="hljs-built_in">join</span> the cluster.</span><br>Waiting for the cluster to join<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Configure node as replica of 10.0.0.9:6379.</span><br>[OK] New node added correctly.<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">验证是否成功</span><br>[00:08:59 root@redis-Master3 ~]#redis-cli -a 123456 --cluster check 10.0.0.129:6379<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>10.0.0.9:6379 (96915f53...) -&gt; 2 keys | 4096 slots | 1 slaves.<br>10.0.0.6:6379 (6780cddc...) -&gt; 2 keys | 4096 slots | 1 slaves.<br>10.0.0.3:6379 (71b6b0ec...) -&gt; 2 keys | 4096 slots | 1 slaves.<br>10.0.0.128:6379 (e32d1fea...) -&gt; 4 keys | 4096 slots | 1 slaves.<br>[OK] 10 keys in 4 masters.<br>0.00 keys per slot on average.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Performing Cluster Check (using node 10.0.0.129:6379)</span><br>S: ee5c967d90ad1138b1ff463fbfe5a5e5273c653c 10.0.0.129:6379<br>   slots: (0 slots) slave<br>   replicates 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e<br>S: 241b0a2e5ceafc7832e1483afe57b0b1b8814a27 10.0.0.127:6379<br>   slots: (0 slots) slave<br>   replicates 71b6b0ec24e2bbc6b62f581787b9030a5152828c<br>M: 96915f53b227e3edfa27dae770b17850f579d8fe 10.0.0.9:6379<br>   slots:[0-1364],[5461-6826],[10923-12287] (4096 slots) master<br>   1 additional replica(s)<br>S: 9fd92ffbe358bfa8552793f56b3300209e2c4d8b 10.0.0.4:6379<br>   slots: (0 slots) slave<br>   replicates e32d1fea077cb8328a6948f7816489ce0a2db96f<br>S: f4e581677b640e84f6990f4193f84fb57c9ee324 10.0.0.133:6379<br>   slots: (0 slots) slave<br>   replicates 96915f53b227e3edfa27dae770b17850f579d8fe<br>M: 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e 10.0.0.6:6379<br>   slots:[12288-16383] (4096 slots) master<br>   1 additional replica(s)<br>M: 71b6b0ec24e2bbc6b62f581787b9030a5152828c 10.0.0.3:6379<br>   slots:[1365-5460] (4096 slots) master<br>   1 additional replica(s)<br>M: e32d1fea077cb8328a6948f7816489ce0a2db96f 10.0.0.128:6379<br>   slots:[6827-10922] (4096 slots) master<br>   1 additional replica(s)<br>[OK] All nodes agree about slots configuration.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check <span class="hljs-keyword">for</span> open slots...</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check slots coverage...</span><br>[OK] All 16384 slots covered.<br><br><br>[00:10:25 root@redis-Master3 ~]#redis-cli -a 123456 -h 10.0.0.9 --no-auth-warning cluster info<br>cluster_state:ok<br>cluster_slots_assigned:16384<br>cluster_slots_ok:16384<br>cluster_slots_pfail:0<br>cluster_slots_fail:0<br>cluster_known_nodes:8<br>cluster_size:4<br>cluster_current_epoch:8<br>cluster_my_epoch:8<br>cluster_stats_messages_ping_sent:1518<br>cluster_stats_messages_pong_sent:1430<br>cluster_stats_messages_meet_sent:6<br>cluster_stats_messages_update_sent:6<br>cluster_stats_messages_sent:2960<br>cluster_stats_messages_ping_received:1429<br>cluster_stats_messages_pong_received:1524<br>cluster_stats_messages_meet_received:1<br>cluster_stats_messages_received:2954<br></code></pre></td></tr></table></figure><p><strong>方法2：先将新节点加入集群，再修改为slave</strong></p><ul><li><strong>为新的master添加slave节点</strong></li></ul><p>Redis 5以上版本命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">把10.0.0.133：6379添加到集群中：</span><br>[root@redis-nodel ~]#redis-cli -a 123456 --cluster add-node 10.0.0.133:6379 10.0.0.6:6379<br></code></pre></td></tr></table></figure><p><strong>更改新节点更改状态为slave：</strong></p><p>需要手动将其指定为某个master的slave,否则其默认角色为master。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">[root@redis-node1~]#</span><span class="language-bash">redis-c1i-h 10.0.0.133 -p 6379 -a 123456 <span class="hljs-comment">#登录到新添加节点</span></span><br>10.0.0.78:6380&gt;CLUSTER NODES #查看当前集群节点，找到目标master的ID<br>10.0.0.78:6380&gt;CLUSTER REPLICATE 886338acd50c3015be68a760502b239f4509881c #将其设置slave,命令格式为cluster replicate MASTERID<br>10.0.0.78：6380&gt;CLUSTER NODES #再次查看集群节点状态，验证节点是否已经更改为指定master 的slave<br></code></pre></td></tr></table></figure><h4 id="2-2-2-2集群缩容"><a href="#2-2-2-2集群缩容" class="headerlink" title="2.2.2.2集群缩容"></a>2.2.2.2集群缩容</h4><p><strong>缩容适用场景：</strong></p><p>随着业务萎缩用户量下降明显，和领导商量决定将现有Redis集群的8台主机中下线两台主机挪做它用，缩容后性能仍能满足当前业务需求</p><p><strong>删除节点过程：</strong></p><p>扩容时是先添加node到集群，然后再分配槽位，而缩容时的操作相反，是先将被要删除的node上的槽位迁移到集群中的其他node上，然后才能再将其从集群中删除，如果一个node上的槽位没有被完全迁移空，删除该node时也会提示有数据出错导致无法删除。</p><p><img src="image-20231013001749039.png" alt="image-20231013001749039"></p><h5 id="2-2-2-2-1迁移要删除的master节点上面的槽位到其它master"><a href="#2-2-2-2-1迁移要删除的master节点上面的槽位到其它master" class="headerlink" title="2.2.2.2.1迁移要删除的master节点上面的槽位到其它master"></a>2.2.2.2.1迁移要删除的master节点上面的槽位到其它master</h5><p><strong>注意：被迁移Redis master源服务器必须保证没有数据，否则迁移报错并会被强制中断。</strong></p><p>Redis 5版本以上命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><code class="hljs shell">[00:27:25 root@redis-Master3 ~]#redis-cli -a 123456 --cluster check 10.0.0.129:6379<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>10.0.0.9:6379 (96915f53...) -&gt; 2 keys | 4096 slots | 1 slaves.<br>10.0.0.6:6379 (6780cddc...) -&gt; 2 keys | 4096 slots | 1 slaves.<br>10.0.0.3:6379 (71b6b0ec...) -&gt; 2 keys | 4096 slots | 1 slaves.<br>10.0.0.128:6379 (e32d1fea...) -&gt; 4 keys | 4096 slots | 1 slaves.<br>[OK] 10 keys in 4 masters.<br>0.00 keys per slot on average.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Performing Cluster Check (using node 10.0.0.129:6379)</span><br>S: ee5c967d90ad1138b1ff463fbfe5a5e5273c653c 10.0.0.129:6379<br>   slots: (0 slots) slave<br>   replicates 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e<br>S: 241b0a2e5ceafc7832e1483afe57b0b1b8814a27 10.0.0.127:6379<br>   slots: (0 slots) slave<br>   replicates 71b6b0ec24e2bbc6b62f581787b9030a5152828c<br>M: 96915f53b227e3edfa27dae770b17850f579d8fe 10.0.0.9:6379<br>   slots:[0-1364],[5461-6826],[10923-12287] (4096 slots) master<br>   1 additional replica(s)<br>S: 9fd92ffbe358bfa8552793f56b3300209e2c4d8b 10.0.0.4:6379<br>   slots: (0 slots) slave<br>   replicates e32d1fea077cb8328a6948f7816489ce0a2db96f<br>S: f4e581677b640e84f6990f4193f84fb57c9ee324 10.0.0.133:6379<br>   slots: (0 slots) slave<br>   replicates 96915f53b227e3edfa27dae770b17850f579d8fe<br>M: 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e 10.0.0.6:6379<br>   slots:[12288-16383] (4096 slots) master<br>   1 additional replica(s)<br>M: 71b6b0ec24e2bbc6b62f581787b9030a5152828c 10.0.0.3:6379<br>   slots:[1365-5460] (4096 slots) master<br>   1 additional replica(s)<br>M: e32d1fea077cb8328a6948f7816489ce0a2db96f 10.0.0.128:6379<br>   slots:[6827-10922] (4096 slots) master<br>   1 additional replica(s)<br>[OK] All nodes agree about slots configuration.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check <span class="hljs-keyword">for</span> open slots...</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check slots coverage...</span><br>[OK] All 16384 slots covered.<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">连接到任意集群节点，<span class="hljs-comment">#最后1365个slot从10.0.0.9移动到第一个master节点10.0.0.3上</span></span><br>[00:27:33 root@redis-Master3 ~]#redis-cli -a 123456 --cluster reshard 10.0.0.6:6379<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Performing Cluster Check (using node 10.0.0.6:6379)</span><br>M: 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e 10.0.0.6:6379<br>   slots:[12288-16383] (4096 slots) master<br>   1 additional replica(s)<br>M: 71b6b0ec24e2bbc6b62f581787b9030a5152828c 10.0.0.3:6379<br>   slots:[1365-5460] (4096 slots) master<br>   1 additional replica(s)<br>S: 9fd92ffbe358bfa8552793f56b3300209e2c4d8b 10.0.0.4:6379<br>   slots: (0 slots) slave<br>   replicates e32d1fea077cb8328a6948f7816489ce0a2db96f<br>M: 96915f53b227e3edfa27dae770b17850f579d8fe 10.0.0.9:6379<br>   slots:[0-1364],[5461-6826],[10923-12287] (4096 slots) master<br>   1 additional replica(s)<br>M: e32d1fea077cb8328a6948f7816489ce0a2db96f 10.0.0.128:6379<br>   slots:[6827-10922] (4096 slots) master<br>   1 additional replica(s)<br>S: f4e581677b640e84f6990f4193f84fb57c9ee324 10.0.0.133:6379<br>   slots: (0 slots) slave<br>   replicates 96915f53b227e3edfa27dae770b17850f579d8fe<br>S: 241b0a2e5ceafc7832e1483afe57b0b1b8814a27 10.0.0.127:6379<br>   slots: (0 slots) slave<br>   replicates 71b6b0ec24e2bbc6b62f581787b9030a5152828c<br>S: ee5c967d90ad1138b1ff463fbfe5a5e5273c653c 10.0.0.129:6379<br>   slots: (0 slots) slave<br>   replicates 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e<br>[OK] All nodes agree about slots configuration.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check <span class="hljs-keyword">for</span> open slots...</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check slots coverage...</span><br>[OK] All 16384 slots covered.<br>How many slots do you want to move (from 1 to 16384)? 1365 #0-1064共4096/3分别给其它三个<br>What is the receiving node ID? 71b6b0ec24e2bbc6b62f581787b9030a5152828c#Master10.0.0.3的ID <br>Please enter all the source node IDs.<br>  Type &#x27;all&#x27; to use all the nodes as source nodes for the hash slots.<br>  Type &#x27;done&#x27; once you entered all the source nodes IDs.<br>Source node #1: 96915f53b227e3edfa27dae770b17850f579d8fe#输入要删除节原10.0.0.9的<br>Source node #2: done<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">非交互式方式</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">再将1365个slot从10.0.0.9移动到第二个master节点10.0.0.128上</span><br>[root@redis-nodel ~]#redis-cli -a 123456 --cluster reshard 10.0.0.6:6379 --cluster-slots 1365 --cluster-from  96915f53b227e3edfa27dae770b17850f579d8fe --cluster-to e32d1fea077cb8328a6948f7816489ce0a2db96f --cluster-yes<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">最后的s1ot从10.0.0.9移动到第三个master节点10.0.0.6上</span><br>[root@redis-nodel ~]#redis-cli -a 123456 --cluster reshard 10.0.0.6:6379 --cluster-slots 1366 --cluster-from  96915f53b227e3edfa27dae770b17850f579d8fe --cluster-to 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e --cluster-yes<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">确认10.0.0.8的所有slot都移走了，上面的slave也自动删除，成为其它master的slave</span><br>[00:47:56 root@redis-Master3 ~]#redis-cli -a 123456 --cluster check 10.0.0.6:6379<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>10.0.0.6:6379 (6780cddc...) -&gt; 3 keys | 5462 slots | 2 slaves.<br>10.0.0.3:6379 (71b6b0ec...) -&gt; 2 keys | 5461 slots | 1 slaves.<br>10.0.0.9:6379 (96915f53...) -&gt; 0 keys | 0 slots | 0 slaves.<br>10.0.0.128:6379 (e32d1fea...) -&gt; 5 keys | 5461 slots | 1 slaves.<br>[OK] 10 keys in 4 masters.<br>0.00 keys per slot on average.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Performing Cluster Check (using node 10.0.0.6:6379)</span><br>M: 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e 10.0.0.6:6379<br>   slots:[6826],[10923-16383] (5462 slots) master<br>   2 additional replica(s)<br>M: 71b6b0ec24e2bbc6b62f581787b9030a5152828c 10.0.0.3:6379<br>   slots:[0-5460] (5461 slots) master<br>   1 additional replica(s)<br>S: 9fd92ffbe358bfa8552793f56b3300209e2c4d8b 10.0.0.4:6379<br>   slots: (0 slots) slave<br>   replicates e32d1fea077cb8328a6948f7816489ce0a2db96f<br>M: 96915f53b227e3edfa27dae770b17850f579d8fe 10.0.0.9:6379<br>   slots: (0 slots) master<br>M: e32d1fea077cb8328a6948f7816489ce0a2db96f 10.0.0.128:6379<br>   slots:[5461-6825],[6827-10922] (5461 slots) master<br>   1 additional replica(s)<br>S: f4e581677b640e84f6990f4193f84fb57c9ee324 10.0.0.133:6379<br>   slots: (0 slots) slave<br>   replicates 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e<br>S: 241b0a2e5ceafc7832e1483afe57b0b1b8814a27 10.0.0.127:6379<br>   slots: (0 slots) slave<br>   replicates 71b6b0ec24e2bbc6b62f581787b9030a5152828c<br>S: ee5c967d90ad1138b1ff463fbfe5a5e5273c653c 10.0.0.129:6379<br>   slots: (0 slots) slave<br>   replicates 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e<br>[OK] All nodes agree about slots configuration.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check <span class="hljs-keyword">for</span> open slots...</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check slots coverage...</span><br>[OK] All 16384 slots covered.<br><br><br><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">原有的10.0.0.133自动成为10.0.0.6的s1ave</span><br>[00:48:26 root@redis-Master3 ~]#redis-cli -a 123456 -h 10.0.0.6 info replication<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Replication</span><br>role:master<br>connected_slaves:2<br>slave0:ip=10.0.0.129,port=6379,state=online,offset=18578,lag=1<br>slave1:ip=10.0.0.133,port=6379,state=online,offset=18578,lag=0<br>master_replid:13fdac9b1950a34a302b76f8136214a746bdde22<br>master_replid2:0000000000000000000000000000000000000000<br>master_repl_offset:18578<br>second_repl_offset:-1<br>repl_backlog_active:1<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:1<br>repl_backlog_histlen:18578<br><br><br><br>[00:51:51 root@redis-Master3 ~]#redis-cli -a 123456 -h 10.0.0.6 cluster info <br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>cluster_state:ok<br>cluster_slots_assigned:16384<br>cluster_slots_ok:16384<br>cluster_slots_pfail:0<br>cluster_slots_fail:0<br>cluster_known_nodes:8#集群中8个节点<br>cluster_size:3#少了一个主从的slot<br>cluster_current_epoch:11<br>cluster_my_epoch:11<br>cluster_stats_messages_ping_sent:16314<br>cluster_stats_messages_pong_sent:12826<br>cluster_stats_messages_meet_sent:3<br>cluster_stats_messages_fail_sent:4<br>cluster_stats_messages_auth-ack_sent:1<br>cluster_stats_messages_update_sent:10<br>cluster_stats_messages_sent:29158<br>cluster_stats_messages_ping_received:12822<br>cluster_stats_messages_pong_received:13181<br>cluster_stats_messages_meet_received:4<br>cluster_stats_messages_fail_received:1<br>cluster_stats_messages_auth-req_received:1<br>cluster_stats_messages_received:26009<br><br></code></pre></td></tr></table></figure><h5 id="2-2-2-2-2从集群中删除服务器"><a href="#2-2-2-2-2从集群中删除服务器" class="headerlink" title="2.2.2.2.2从集群中删除服务器"></a>2.2.2.2.2从集群中删除服务器</h5><p>上面步骤完成后,槽位已经迁移走，但是节点仍然还属于集群成员，因此还需从集群删除该节点</p><p>注意：删除服务器前，必须清除主机上面的槽位，否则会删除主机失败</p><p>Redis 5以上版本命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[00:56:08 root@redis-Master3 ~]#redis-cli -a 123456 --cluster del-node 10.0.0.6:6379 96915f53b227e3edfa27dae770b17850f579d8fe<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Removing node 96915f53b227e3edfa27dae770b17850f579d8fe from cluster 10.0.0.6:6379</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Sending CLUSTER FORGET messages to the cluster...</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; SHUTDOWN the node.</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除节点后，redis进程自动关闭</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除节点信息</span><br>[00:59:01 root@redis-Master4 ~]#rm -rf /var/lib/redis/nodes-6379.conf<br></code></pre></td></tr></table></figure><h5 id="2-2-2-2-3删除多余的slave节点验证结果"><a href="#2-2-2-2-3删除多余的slave节点验证结果" class="headerlink" title="2.2.2.2.3删除多余的slave节点验证结果"></a>2.2.2.2.3删除多余的slave节点验证结果</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">验证删除成功</span><br>[00:58:54 root@redis-Master4 ~]#ss -ntl<br>State        Recv-Q       Send-Q             Local Address:Port             Peer Address:Port       Process       <br>LISTEN       0            128                      0.0.0.0:22                    0.0.0.0:*                        <br>LISTEN       0            128                         [::]:22                       [::]:*      <br><br>[01:00:16 root@redis-Master3 ~]#redis-cli -a 123456 --cluster check 10.0.0.6:6379<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>10.0.0.6:6379 (6780cddc...) -&gt; 3 keys | 5462 slots | 2 slaves.<br>10.0.0.3:6379 (71b6b0ec...) -&gt; 2 keys | 5461 slots | 1 slaves.<br>10.0.0.128:6379 (e32d1fea...) -&gt; 5 keys | 5461 slots | 1 slaves.<br>[OK] 10 keys in 3 masters.<br>0.00 keys per slot on average.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Performing Cluster Check (using node 10.0.0.6:6379)</span><br>M: 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e 10.0.0.6:6379<br>   slots:[6826],[10923-16383] (5462 slots) master<br>   2 additional replica(s)<br>M: 71b6b0ec24e2bbc6b62f581787b9030a5152828c 10.0.0.3:6379<br>   slots:[0-5460] (5461 slots) master<br>   1 additional replica(s)<br>S: 9fd92ffbe358bfa8552793f56b3300209e2c4d8b 10.0.0.4:6379<br>   slots: (0 slots) slave<br>   replicates e32d1fea077cb8328a6948f7816489ce0a2db96f<br>M: e32d1fea077cb8328a6948f7816489ce0a2db96f 10.0.0.128:6379<br>   slots:[5461-6825],[6827-10922] (5461 slots) master<br>   1 additional replica(s)<br>S: f4e581677b640e84f6990f4193f84fb57c9ee324 10.0.0.133:6379<br>   slots: (0 slots) slave<br>   replicates 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e<br>S: 241b0a2e5ceafc7832e1483afe57b0b1b8814a27 10.0.0.127:6379<br>   slots: (0 slots) slave<br>   replicates 71b6b0ec24e2bbc6b62f581787b9030a5152828c<br>S: ee5c967d90ad1138b1ff463fbfe5a5e5273c653c 10.0.0.129:6379<br>   slots: (0 slots) slave<br>   replicates 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e<br>[OK] All nodes agree about slots configuration.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check <span class="hljs-keyword">for</span> open slots...</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check slots coverage...</span><br>[OK] All 16384 slots covered.<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除多余的slave从节点</span><br>[01:00:36 root@redis-Master3 ~]#redis-cli -a 123456 --cluster del-node 10.0.0.6:6379 f4e581677b640e84f6990f4193f84fb57c9ee324<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Removing node f4e581677b640e84f6990f4193f84fb57c9ee324 from cluster 10.0.0.6:6379</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Sending CLUSTER FORGET messages to the cluster...</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; SHUTDOWN the node.</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除集群文件</span><br><br><br><br>[01:01:48 root@redis-Master3 ~]#redis-cli -a 123456 --cluster check 10.0.0.6:6379<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>10.0.0.6:6379 (6780cddc...) -&gt; 3 keys | 5462 slots | 1 slaves.<br>10.0.0.3:6379 (71b6b0ec...) -&gt; 2 keys | 5461 slots | 1 slaves.<br>10.0.0.128:6379 (e32d1fea...) -&gt; 5 keys | 5461 slots | 1 slaves.<br>[OK] 10 keys in 3 masters.<br>0.00 keys per slot on average.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Performing Cluster Check (using node 10.0.0.6:6379)</span><br>M: 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e 10.0.0.6:6379<br>   slots:[6826],[10923-16383] (5462 slots) master<br>   1 additional replica(s)<br>M: 71b6b0ec24e2bbc6b62f581787b9030a5152828c 10.0.0.3:6379<br>   slots:[0-5460] (5461 slots) master<br>   1 additional replica(s)<br>S: 9fd92ffbe358bfa8552793f56b3300209e2c4d8b 10.0.0.4:6379<br>   slots: (0 slots) slave<br>   replicates e32d1fea077cb8328a6948f7816489ce0a2db96f<br>M: e32d1fea077cb8328a6948f7816489ce0a2db96f 10.0.0.128:6379<br>   slots:[5461-6825],[6827-10922] (5461 slots) master<br>   1 additional replica(s)<br>S: 241b0a2e5ceafc7832e1483afe57b0b1b8814a27 10.0.0.127:6379<br>   slots: (0 slots) slave<br>   replicates 71b6b0ec24e2bbc6b62f581787b9030a5152828c<br>S: ee5c967d90ad1138b1ff463fbfe5a5e5273c653c 10.0.0.129:6379<br>   slots: (0 slots) slave<br>   replicates 6780cddc5d7b21255416d7a47ef5ed9addcfcb8e<br>[OK] All nodes agree about slots configuration.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check <span class="hljs-keyword">for</span> open slots...</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check slots coverage...</span><br>[OK] All 16384 slots covered.<br><br><br><br><br><br>[01:02:08 root@redis-Master3 ~]#redis-cli -a 123456 --cluster info 10.0.0.6:6379<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>10.0.0.6:6379 (6780cddc...) -&gt; 3 keys | 5462 slots | 1 slaves.<br>10.0.0.3:6379 (71b6b0ec...) -&gt; 2 keys | 5461 slots | 1 slaves.<br>10.0.0.128:6379 (e32d1fea...) -&gt; 5 keys | 5461 slots | 1 slaves.<br>[OK] 10 keys in 3 masters.<br>0.00 keys per slot on average.<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看集群信息</span><br>[01:04:46 root@redis-Master3 ~]#redis-cli -a 123456  -h 10.0.0.6  cluster info<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br>cluster_state:ok<br>cluster_slots_assigned:16384<br>cluster_slots_ok:16384<br>cluster_slots_pfail:0<br>cluster_slots_fail:0<br>cluster_known_nodes:6#只有6个节点<br>cluster_size:3<br>cluster_current_epoch:11<br>cluster_my_epoch:11<br>cluster_stats_messages_ping_sent:17078<br>cluster_stats_messages_pong_sent:13560<br>cluster_stats_messages_meet_sent:3<br>cluster_stats_messages_fail_sent:4<br>cluster_stats_messages_auth-ack_sent:1<br>cluster_stats_messages_update_sent:10<br>cluster_stats_messages_sent:30656<br>cluster_stats_messages_ping_received:13556<br>cluster_stats_messages_pong_received:13945<br>cluster_stats_messages_meet_received:4<br>cluster_stats_messages_fail_received:1<br>cluster_stats_messages_auth-req_received:1<br>cluster_stats_messages_received:27507<br><br><br><br></code></pre></td></tr></table></figure><h1 id="3、总结-LVS的NAT和DR模型工作原理，并完成DR模型实战。"><a href="#3、总结-LVS的NAT和DR模型工作原理，并完成DR模型实战。" class="headerlink" title="3、总结 LVS的NAT和DR模型工作原理，并完成DR模型实战。"></a>3、总结 LVS的NAT和DR模型工作原理，并完成DR模型实战。</h1><h2 id="3-1-LVS-NAT模型工作原理"><a href="#3-1-LVS-NAT模型工作原理" class="headerlink" title="3.1 LVS-NAT模型工作原理"></a>3.1 LVS-NAT模型工作原理</h2><p>官网：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">http://www.linuxvirtualserver.org/VS-NAT.html<br></code></pre></td></tr></table></figure><p><img src="image-20231009213808559.png" alt="image-20231009213808559"></p><p>lvs-nat：本质上是多目标IP的DNAT，是通过将请求的报文中的目的地址和目的端口转换为其挑选出的真实服务器的IP和port实现转发</p><ul><li>RIP（real IP）和DIP应该在同一个IP网络，且应使用私网地址；RS的网关要指向DIP</li><li>请求报文和响应报文都必须经由Director转发，Director易于成为系统瓶颈</li><li>支持端口映射，支持修改请求报文的目标port</li><li>VS必须是Linux系统，RS可以是任意OS系统</li></ul><p><img src="image-20231009220005364.png" alt="image-20231009220005364"></p><h2 id="3-2-LVS-DR模型工作原理"><a href="#3-2-LVS-DR模型工作原理" class="headerlink" title="3.2 LVS-DR模型工作原理"></a>3.2 LVS-DR模型工作原理</h2><p>官网链接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">http://www.linuxvirtualserver.org/VS-DRouting.html<br></code></pre></td></tr></table></figure><p><img src="image-20231009220327859.png" alt="image-20231009220327859"></p><p>LVS-DR：Director Routing，直接路由，LVS默认模式，应用最广泛，通过为请求报文重新封装一个MAC头部进行转发，源MAC是DIP所在接口的MAC。目标MAC是其挑选出的真实服务器的RIP所在接口的MAC地址；源IP/PORT，以及目标IP/PORT均保持不变</p><p><img src="image-20231009222402918.png" alt="image-20231009222402918"></p><p><img src="image-20231009222740904.png" alt="image-20231009222740904"></p><p>DR模式的特点：</p><ol><li><p>Director和各RS都配置有相同VIP（在回环接口配置）</p></li><li><p>确保前端路由器将目标IP为VIP的请求报文发往Director</p><ul><li>在前端网关做静态绑定VIP和Director的MAC地址</li><li>在RS上使用arptables工具</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">arptables -A IN -d $VIP -j DROP<br>arptables -A OUT -s $VIP -j mangle --mangle-ip-s$RIP<br></code></pre></td></tr></table></figure><ul><li>在RS上修改内核参数以限制arp通告及应答级别</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">/proc/sys/net/ipv4/conf/al1/arp_ignore/proc/sys/net/ipv4/conf/al1/arp_announce<br></code></pre></td></tr></table></figure></li><li><p>RS的RIP可以使用私网地址，也可以是公网地址；RIP与DIP在同一IP网络；RIP的网关不能指向DIP，以确保响应报文不会经由Director</p></li><li><p>RS和Director要在同一个物理网络</p></li><li><p>请求报文要经由Director，但响应报文不经由Director，而由RS直接发往Client</p></li><li><p>不支持端口映射（端口不能修改）</p></li><li><p>无需开启ip_forward</p></li><li><p>RS可以使用大多数OS系统</p></li></ol><h2 id="3-3-LVS-DR模型实战"><a href="#3-3-LVS-DR模型实战" class="headerlink" title="3.3 LVS-DR模型实战"></a>3.3 LVS-DR模型实战</h2><h3 id="3-3-1-LVS-DR模式单网段案例实现"><a href="#3-3-1-LVS-DR模式单网段案例实现" class="headerlink" title="3.3.1 LVS-DR模式单网段案例实现"></a>3.3.1 LVS-DR模式单网段案例实现</h3><p>DR模型中各主机上均需要配置VIP，解决地址冲突的方式有三种</p><ol><li>在前端网关做静态绑定</li><li>在各RS使用arptables</li><li>在各RS修改内核参数，来限制arp响应和通告级别</li></ol><p>限制响应级别：arp_ignore</p><ul><li>0：默认值，表示可使用本地任意接口上配置的任意地址进行响应</li><li>1：仅在请求的目标IP配置在本地主机上，且接收到请求报文接囗的IP就是请求目标IP时，才给予响应</li></ul><p>限制通告级别：arp_announce</p><ul><li>0：默认值，把本机所有接囗的所有信息向每个接口的网络进行通告</li><li>1：尽量避免将接口信息向非直接连接网络进行通告</li><li>2：必须避免将接口信息向非本网络进行通告</li></ul><p><strong>配置要点</strong></p><ol><li>Director服务器采用双IP桥接网络，一个是VIP,一个DIP</li><li>Web服务器采用和DIP相同的网段和Director连接</li><li>每个Web服务器配置VIP</li><li>每个web服务器可以出外网</li></ol><p>范例：</p><p><img src="image-20231009235721938.png" alt="image-20231009235721938"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html">环境：五台主机<br>第一台：internet-client<br>eth0：仅主机192.168.0.7/24 GW：192.168.0.5<br><br>第二台：router<br>eth0：NAT 10.0.0.129/24<br>eth1：仅主机192.168.0.5/24<br>启用：IP_FORWARD<br><br>第三台：LVS<br>eth0：NAT：DIP：10.0.0.128/24 GW：10.0.0.129<br><br>第四台：RS1<br>RS1：eth0：NAT:10.0.0.3/24  GW：10.0.0.129<br><br>第五台：RS2<br>RS2：eth0：NAT:10.0.0.4/24  GW：10.0.0.129<br></code></pre></td></tr></table></figure><h4 id="3-3-1-1-LVS的网络配置"><a href="#3-3-1-1-LVS的网络配置" class="headerlink" title="3.3.1.1 LVS的网络配置"></a>3.3.1.1 LVS的网络配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">所有主机禁用iptables和SElinux</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">internet-client主机环境</span><br>[08:10:47 root@internet-client ~]#hostname -I<br>192.168.0.7 <br><br>[08:19:44 root@internet-client ~]#route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         192.168.0.5     0.0.0.0         UG    0      0        0 ens37<br>192.168.0.0     0.0.0.0         255.255.255.0   U     100    0        0 ens37<br><br>[22:24:15 root@internet-client ~]#cat  /etc/sysconfig/network-scripts/ifcfg-ens33 <br>TYPE=&quot;Ethernet&quot;<br>BOOTPROTO=static<br>IPADDR=192.168.0.7<br>NETMASK=255.255.255.0<br>DNS1=223.6.6.6<br>DNS2=114.114.114.114<br>GATEWAY=192.168.0.5<br>DEFROUTE=&quot;yes&quot;<br>NAME=&quot;ens37&quot;<br>UUID=&quot;b7b43824-3aba-417e-badc-190cdff2f31e&quot;<br>DEVICE=&quot;ens37&quot;<br>ONBOOT=&quot;yes&quot;<br><br><br><br>[08:50:46 root@internet-client ~]#ping 10.0.0.4<br>PING 10.0.0.4 (10.0.0.4) 56(84) bytes of data.<br>64 bytes from 10.0.0.4: icmp_seq=204 ttl=63 time=0.224 ms<br><br>[08:31:41 root@internet-client ~]#ping 10.0.0.3<br>PING 10.0.0.3 (10.0.0.3) 56(84) bytes of data.<br>64 bytes from 10.0.0.3: icmp_seq=1 ttl=63 time=1.09 ms<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">############################################################################</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">路由器的网络配置</span><br>[00:37:16 root@Router ~]#sysctl -a | grep ip_forward<br>net.ipv4.ip_forward = 0<br>net.ipv4.ip_forward_update_priority = 1<br>net.ipv4.ip_forward_use_pmtu = 0<br>[00:40:29 root@Router ~]#echo &#x27;net.ipv4.ip_forward = 1&#x27; &gt;&gt; /etc/sysctl.conf <br>[00:41:29 root@Router ~]#sysctl -p<br>net.ipv4.ip_forward = 1<br><br>[00:41:37 root@Router ~]#ip a<br>2: ens160: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000<br>    link/ether 00:0c:29:24:99:c9 brd ff:ff:ff:ff:ff:ff<br>    inet 10.0.0.129/24 brd 10.0.0.255 scope global dynamic noprefixroute ens160<br>       valid_lft 1040sec preferred_lft 1040sec<br>    inet6 fe80::20c:29ff:fe24:99c9/64 scope link noprefixroute <br>       valid_lft forever preferred_lft forever<br>3: ens224: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000<br>    link/ether 00:0c:29:24:99:d3 brd ff:ff:ff:ff:ff:ff<br>    inet 192.168.0.5/24 brd 192.168.0.255 scope global dynamic noprefixroute ens224<br>       valid_lft 1040sec preferred_lft 1040sec<br>    inet6 fe80::cfc0:2e36:e0ef:d54c/64 scope link noprefixroute <br>       valid_lft forever preferred_lft forever<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">####################################################################</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">RS1的网络配置</span><br>[00:51:51 root@RS1 ~]#hostname -I<br>10.0.0.3<br>[00:50:24 root@RS1 ~]#cat /etc/sysconfig/network-scripts/ifcfg-ens160 <br>TYPE=Ethernet<br>BOOTPROTO=static<br>IPADDR=10.0.0.3<br>PREFIX=24<br>GATEWAY=10.0.0.129<br>NAME=ens160<br>DEVICE=ens160<br>ONBOOT=yes<br>[00:52:08 root@RS1 ~]#route -n <br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         10.0.0.129      0.0.0.0         UG    100    0        0 ens160<br>10.0.0.0        0.0.0.0         255.255.255.0   U     100    0        0 ens160<br><br><br>[01:00:50 root@RS1 ~]#yum install -y httpd<br>[01:01:10 root@RS1 ~]#systemctl enable --now httpd<br>Created symlink /etc/systemd/system/multi-user.target.wants/httpd.service → /usr/lib/systemd/system/httpd.service.<br>[01:01:34 root@RS1 ~]#hostname -I &gt; /var/www/html/index.html<br>[01:02:30 root@RS1 ~]#ping 192.168.0.7<br>PING 192.168.0.7 (192.168.0.7) 56(84) bytes of data.<br>64 bytes from 192.168.0.7: icmp_seq=1 ttl=63 time=0.418 ms<br>64 bytes from 192.168.0.7: icmp_seq=2 ttl=63 time=1.13 ms<br>^C<br>--- 192.168.0.7 ping statistics ---<br>2 packets transmitted, 2 received, 0% packet loss, time 1061ms<br>rtt min/avg/max/mdev = 0.418/0.773/1.129/0.356 ms<br>[01:03:50 root@RS1 ~]#curl 10.0.0.4<br>10.0.0.4 <br>[01:04:13 root@RS1 ~]#curl 10.0.0.3<br>10.0.0.3 <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#########################################################################</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">RS2的网络配置</span><br>[00:57:25 root@RS2 ~]#hostname -I<br>10.0.0.4<br>[00:57:06 root@RS2 ~]#cat  /etc/sysconfig/network-scripts/ifcfg-ens160 <br>TYPE=Ethernet<br>PROXY_METHOD=none<br>BROWSER_ONLY=no<br>BOOTPROTO=static<br>IPADDR=10.0.0.4<br>PREFIX=24<br>GATEWAY=10.0.0.129<br>NAME=eth0<br>DEVICE=eth0<br>ONBOOT=yes<br>[00:57:12 root@RS2 ~]#route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         10.0.0.129      0.0.0.0         UG    100    0        0 eth0<br>10.0.0.0        0.0.0.0         255.255.255.0   U     100    0        0 eth0<br><br>[01:00:50 root@RS2 ~]#yum install -y httpd<br>[01:01:10 root@RS2 ~]#systemctl enable --now httpd<br>Created symlink /etc/systemd/system/multi-user.target.wants/httpd.service → /usr/lib/systemd/system/httpd.service.<br>[01:01:34 root@RS2 ~]#hostname -I &gt; /var/www/html/index.html<br>[01:02:21 root@RS2 ~]#ping 192.168.0.7<br>PING 192.168.0.7 (192.168.0.7) 56(84) bytes of data.<br>64 bytes from 192.168.0.7: icmp_seq=1 ttl=63 time=0.513 ms<br>64 bytes from 192.168.0.7: icmp_seq=2 ttl=63 time=1.01 ms<br>^C<br>--- 192.168.0.7 ping statistics ---<br>2 packets transmitted, 2 received, 0% packet loss, time 1020ms<br>rtt min/avg/max/mdev = 0.513/0.760/1.008/0.249 ms<br>[01:05:07 root@RS2 ~]#curl 10.0.0.3<br>10.0.0.3 <br>[01:05:14 root@RS2 ~]#curl 10.0.0.4<br>10.0.0.4 <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">####################################################################</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">LVS的网络配置</span><br>[13:10:02 root@LVS ~]#hostname -I<br>10.0.0.128 <br>[13:10:12 root@LVS ~]#route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         10.0.0.129      0.0.0.0         UG    100    0        0 eth0<br>10.0.0.0        0.0.0.0         255.255.255.0   U     100    0        0 eth0<br>[13:10:17 root@LVS ~]#cat   /etc/sysconfig/network-scripts/ifcfg-ens160 <br>TYPE=Ethernet<br>BOOTPROTO=static<br>IPADDR=10.0.0.128<br>GATEWAY=10.0.0.129<br>PREFIX=24<br>DEFROUTE=yes<br>IPV4_FAILURE_FATAL=no<br>NAME=eth0<br>DEVICE=eth0<br>ONBOOT=yes<br>[13:10:25 root@LVS ~]#ping 192.168.0.7<br>PING 192.168.0.7 (192.168.0.7) 56(84) bytes of data.<br>64 bytes from 192.168.0.7: icmp_seq=1 ttl=63 time=0.406 ms<br><br></code></pre></td></tr></table></figure><h4 id="3-3-1-2-后端RS的IPVS配置"><a href="#3-3-1-2-后端RS的IPVS配置" class="headerlink" title="3.3.1.2 后端RS的IPVS配置"></a>3.3.1.2 后端RS的IPVS配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">RS1的IPVS配置</span><br>[01:04:16 root@RS1 ~]#echo 1 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore <br>[01:13:09 root@RS1 ~]#echo 2 &gt; /proc/sys/net/ipv4/conf/all/arp_announce <br>[01:13:25 root@RS1 ~]#echo 1 &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore <br>[01:13:34 root@RS1 ~]#echo 2 &gt; /proc/sys/net/ipv4/conf/lo/arp_announce <br>[14:10:05 root@RS1 ~]#ifconfig lo:1 10.0.0.100/32<br>[14:10:32 root@RS1 ~]#ip a<br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000<br>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>    inet 127.0.0.1/8 scope host lo<br>       valid_lft forever preferred_lft forever<br>    inet 10.0.0.100/0 scope global lo:1<br>       valid_lft forever preferred_lft forever<br>    inet6 ::1/128 scope host <br>       valid_lft forever preferred_lft forever<br>2: ens160: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000<br>    link/ether 00:0c:29:99:e8:44 brd ff:ff:ff:ff:ff:ff<br>    altname enp3s0<br>    inet 10.0.0.3/24 brd 10.0.0.255 scope global noprefixroute ens160<br>       valid_lft forever preferred_lft forever<br>    inet6 fe80::20c:29ff:fe99:e844/64 scope link noprefixroute <br>       valid_lft forever preferred_lft forever<br>[14:10:34 root@RS1 ~]#<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">RS2的IPVS配置</span><br>01:05:16 root@RS2 ~]#echo 1 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore <br>[01:16:22 root@RS2 ~]#echo 1 &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore <br>[01:16:38 root@RS2 ~]#echo 2 &gt; /proc/sys/net/ipv4/conf/lo/arp_announce <br>[01:16:48 root@RS2 ~]#echo 2 &gt; /proc/sys/net/ipv4/conf/all/arp_announce <br>[01:16:52 root@RS2 ~]#ifconfig lo:1 10.0.0.100/32<br>[01:17:16 root@RS2 ~]#ip a<br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000<br>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>    inet 127.0.0.1/8 scope host lo<br>       valid_lft forever preferred_lft forever<br>    inet 10.0.0.100/0 scope global lo:1<br>       valid_lft forever preferred_lft forever<br>    inet6 ::1/128 scope host <br>       valid_lft forever preferred_lft forever<br>2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000<br>    link/ether 00:0c:29:2c:30:b9 brd ff:ff:ff:ff:ff:ff<br>    altname enp3s0<br>    altname ens160<br>    inet 10.0.0.4/24 brd 10.0.0.255 scope global noprefixroute eth0<br>       valid_lft forever preferred_lft forever<br>    inet6 fe80::20c:29ff:fe2c:30b9/64 scope link noprefixroute <br>       valid_lft forever preferred_lft forever<br></code></pre></td></tr></table></figure><h4 id="3-3-1-3-LVS主机的配置"><a href="#3-3-1-3-LVS主机的配置" class="headerlink" title="3.3.1.3 LVS主机的配置"></a>3.3.1.3 LVS主机的配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在LVS上添加VIP</span><br>[13:11:06 root@LVS ~]#ifconfig lo:1 10.0.0.100/32<br>[13:18:46 root@LVS ~]#ip a<br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000<br>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>    inet 127.0.0.1/8 scope host lo<br>       valid_lft forever preferred_lft forever<br>    inet 10.0.0.100/0 scope global lo:1<br>       valid_lft forever preferred_lft forever<br>    inet6 ::1/128 scope host <br>       valid_lft forever preferred_lft forever<br>2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000<br>    link/ether 00:0c:29:e9:f4:40 brd ff:ff:ff:ff:ff:ff<br>    inet 10.0.0.128/24 brd 10.0.0.255 scope global noprefixroute eth0<br>       valid_lft forever preferred_lft forever<br>    inet6 fe80::20c:29ff:fee9:f440/64 scope link noprefixroute <br>       valid_lft forever preferred_lft forever<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">实现LVS规则</span><br>[13:18:48 root@LVS ~]#dnf -y install ipvsadm<br>[13:19:57 root@LVS ~]#ipvsadm -A -t 10.0.0.100:80 -s rr <br>[13:20:54 root@LVS ~]#ipvsadm -a -t 10.0.0.100:80 -r 10.0.0.3:80 -g <br>[13:21:19 root@LVS ~]#ipvsadm -a -t 10.0.0.100:80 -r 10.0.0.4:80 -g <br>[13:21:26 root@LVS ~]#ipvsadm -Ln<br>IP Virtual Server version 1.2.1 (size=4096)<br>Prot LocalAddress:Port Scheduler Flags<br><span class="hljs-meta prompt_">  -&gt; </span><span class="language-bash">RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br>TCP  10.0.0.100:80 rr<br><span class="hljs-meta prompt_">  -&gt; </span><span class="language-bash">10.0.0.3:80                  Route   1      0          0</span>         <br><span class="hljs-meta prompt_">  -&gt; </span><span class="language-bash">10.0.0.4:80                  Route   1      0          0</span>         <br></code></pre></td></tr></table></figure><h4 id="3-3-1-4-测试访问"><a href="#3-3-1-4-测试访问" class="headerlink" title="3.3.1.4 测试访问"></a>3.3.1.4 测试访问</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">[09:10:07 root@internet-client ~]#curl 10.0.0.100<br>10.0.0.4 <br>[09:22:40 root@internet-client ~]#curl 10.0.0.100<br>10.0.0.3 <br>[09:22:41 root@internet-client ~]#curl 10.0.0.100<br>10.0.0.4 <br>[09:22:42 root@internet-client ~]#curl 10.0.0.100<br>10.0.0.3 <br>[09:22:43 root@internet-client ~]#curl 10.0.0.100<br>10.0.0.4 <br><br><br>[01:15:41 root@RS1 ~]#tail -f /var/log/httpd/access_log -n0<br>192.168.0.7 - - [10/Oct/2023:01:23:39 +0800] &quot;GET / HTTP/1.1&quot; 200 10 &quot;-&quot; &quot;curl/7.29.0&quot;<br>192.168.0.7 - - [10/Oct/2023:01:23:40 +0800] &quot;GET / HTTP/1.1&quot; 200 10 &quot;-&quot; &quot;curl/7.29.0&quot;<br>192.168.0.7 - - [10/Oct/2023:01:23:42 +0800] &quot;GET / HTTP/1.1&quot; 200 10 &quot;-&quot; &quot;curl/7.29.0&quot;<br><br><br><br></code></pre></td></tr></table></figure><p><img src="image-20231010154618994.png" alt="image-20231010154618994"></p><h3 id="3-3-2-LVS-DR模式多网段案例实现"><a href="#3-3-2-LVS-DR模式多网段案例实现" class="headerlink" title="3.3.2 LVS-DR模式多网段案例实现"></a>3.3.2 LVS-DR模式多网段案例实现</h3><p><img src="image-20231010155831327.png" alt="image-20231010155831327"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html">环境：五台主机<br>第一台：internet-client<br>eth0：仅主机192.168.0.7/24 GW：192.168.0.5<br><br>第二台：router<br>eth0：NAT 10.0.0.129/24<br>eth0:1：NAT 172.16.0.200/24<br>eth1：仅主机192.168.0.5/24<br>启用：IP_FORWARD<br><br>第三台：LVS<br>eth0：NAT：DIP：10.0.0.128/24 GW：10.0.0.129<br>lo:1:VIP :172.16.0.100/32<br><br>第四台：RS1<br>RS1：eth0：NAT:10.0.0.3/24  GW：10.0.0.129<br>lo:1:VIP :172.16.0.100/32<br><br>第五台：RS2<br>RS2：eth0：NAT:10.0.0.4/24  GW：10.0.0.129<br>lo:1:VIP :172.16.0.100/32<br></code></pre></td></tr></table></figure><h4 id="3-3-2-1-LVS的网络配置"><a href="#3-3-2-1-LVS的网络配置" class="headerlink" title="3.3.2.1 LVS的网络配置"></a>3.3.2.1 LVS的网络配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">所有主机禁用iptables和SElinux</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">internet-client主机环境</span><br>[08:10:47 root@internet-client ~]#hostname -I<br>192.168.0.7 <br><br>[08:19:44 root@internet-client ~]#route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         192.168.0.5     0.0.0.0         UG    0      0        0 ens37<br>192.168.0.0     0.0.0.0         255.255.255.0   U     100    0        0 ens37<br><br>[22:24:15 root@internet-client ~]#cat  /etc/sysconfig/network-scripts/ifcfg-ens33 <br>TYPE=&quot;Ethernet&quot;<br>BOOTPROTO=static<br>IPADDR=192.168.0.7<br>NETMASK=255.255.255.0<br>DNS1=223.6.6.6<br>DNS2=114.114.114.114<br>GATEWAY=192.168.0.5<br>DEFROUTE=&quot;yes&quot;<br>NAME=&quot;ens37&quot;<br>UUID=&quot;b7b43824-3aba-417e-badc-190cdff2f31e&quot;<br>DEVICE=&quot;ens37&quot;<br>ONBOOT=&quot;yes&quot;<br><br><br><br>[08:50:46 root@internet-client ~]#ping 10.0.0.4<br>PING 10.0.0.4 (10.0.0.4) 56(84) bytes of data.<br>64 bytes from 10.0.0.4: icmp_seq=204 ttl=63 time=0.224 ms<br><br>[08:31:41 root@internet-client ~]#ping 10.0.0.3<br>PING 10.0.0.3 (10.0.0.3) 56(84) bytes of data.<br>64 bytes from 10.0.0.3: icmp_seq=1 ttl=63 time=1.09 ms<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">############################################################################</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">路由器的网络配置</span><br>[00:37:16 root@Router ~]#sysctl -a | grep ip_forward<br>net.ipv4.ip_forward = 0<br>net.ipv4.ip_forward_update_priority = 1<br>net.ipv4.ip_forward_use_pmtu = 0<br>[00:40:29 root@Router ~]#echo &#x27;net.ipv4.ip_forward = 1&#x27; &gt;&gt; /etc/sysctl.conf <br>[00:41:29 root@Router ~]#sysctl -p<br>net.ipv4.ip_forward = 1<br><br><br>[16:02:59 root@Router ~]#ip addr add 172.16.0.200/24 dev ens160<br>[16:03:58 root@Router ~]#ip a<br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000<br>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>    inet 127.0.0.1/8 scope host lo<br>       valid_lft forever preferred_lft forever<br>    inet6 ::1/128 scope host <br>       valid_lft forever preferred_lft forever<br>2: ens160: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000<br>    link/ether 00:0c:29:24:99:c9 brd ff:ff:ff:ff:ff:ff<br>    inet 10.0.0.129/24 brd 10.0.0.255 scope global dynamic noprefixroute ens160<br>       valid_lft 1152sec preferred_lft 1152sec<br>    inet 172.16.0.200/24 scope global ens160<br>       valid_lft forever preferred_lft forever<br>    inet6 fe80::20c:29ff:fe24:99c9/64 scope link noprefixroute <br>       valid_lft forever preferred_lft forever<br>3: ens224: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000<br>    link/ether 00:0c:29:24:99:d3 brd ff:ff:ff:ff:ff:ff<br>    inet 192.168.0.5/24 brd 192.168.0.255 scope global dynamic noprefixroute ens224<br>       valid_lft 1152sec preferred_lft 1152sec<br>    inet6 fe80::cfc0:2e36:e0ef:d54c/64 scope link noprefixroute <br>       valid_lft forever preferred_lft forever<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">####################################################################</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">LVS的网络配置</span><br>[13:10:02 root@LVS ~]#hostname -I<br>10.0.0.128 <br>[13:10:12 root@LVS ~]#route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         10.0.0.129      0.0.0.0         UG    100    0        0 eth0<br>10.0.0.0        0.0.0.0         255.255.255.0   U     100    0        0 eth0<br>[13:10:17 root@LVS ~]#cat   /etc/sysconfig/network-scripts/ifcfg-ens160 <br>TYPE=Ethernet<br>BOOTPROTO=static<br>IPADDR=10.0.0.128<br>GATEWAY=10.0.0.129<br>PREFIX=24<br>DEFROUTE=yes<br>IPV4_FAILURE_FATAL=no<br>NAME=eth0<br>DEVICE=eth0<br>ONBOOT=yes<br>[13:10:25 root@LVS ~]#ping 192.168.0.7<br>PING 192.168.0.7 (192.168.0.7) 56(84) bytes of data.<br>64 bytes from 192.168.0.7: icmp_seq=1 ttl=63 time=0.406 ms<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">####################################################################</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">RS1的网络配置</span><br>[00:51:51 root@RS1 ~]#hostname -I<br>10.0.0.3<br>[00:50:24 root@RS1 ~]#cat /etc/sysconfig/network-scripts/ifcfg-ens160 <br>TYPE=Ethernet<br>BOOTPROTO=static<br>IPADDR=10.0.0.3<br>PREFIX=24<br>GATEWAY=10.0.0.129<br>NAME=ens160<br>DEVICE=ens160<br>ONBOOT=yes<br>[00:52:08 root@RS1 ~]#route -n <br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         10.0.0.129      0.0.0.0         UG    100    0        0 ens160<br>10.0.0.0        0.0.0.0         255.255.255.0   U     100    0        0 ens160<br><br><br>[01:00:50 root@RS1 ~]#yum install -y httpd<br>[01:01:10 root@RS1 ~]#systemctl enable --now httpd<br>Created symlink /etc/systemd/system/multi-user.target.wants/httpd.service → /usr/lib/systemd/system/httpd.service.<br>[01:01:34 root@RS1 ~]#hostname -I &gt; /var/www/html/index.html<br>[01:02:30 root@RS1 ~]#ping 192.168.0.7<br>PING 192.168.0.7 (192.168.0.7) 56(84) bytes of data.<br>64 bytes from 192.168.0.7: icmp_seq=1 ttl=63 time=0.418 ms<br>64 bytes from 192.168.0.7: icmp_seq=2 ttl=63 time=1.13 ms<br>^C<br>--- 192.168.0.7 ping statistics ---<br>2 packets transmitted, 2 received, 0% packet loss, time 1061ms<br>rtt min/avg/max/mdev = 0.418/0.773/1.129/0.356 ms<br>[01:03:50 root@RS1 ~]#curl 10.0.0.4<br>10.0.0.4 <br>[01:04:13 root@RS1 ~]#curl 10.0.0.3<br>10.0.0.3 <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#########################################################################</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">RS2的网络配置</span><br>[00:57:25 root@RS2 ~]#hostname -I<br>10.0.0.4<br>[00:57:06 root@RS2 ~]#cat  /etc/sysconfig/network-scripts/ifcfg-ens160 <br>TYPE=Ethernet<br>PROXY_METHOD=none<br>BROWSER_ONLY=no<br>BOOTPROTO=static<br>IPADDR=10.0.0.4<br>PREFIX=24<br>GATEWAY=10.0.0.129<br>NAME=eth0<br>DEVICE=eth0<br>ONBOOT=yes<br>[00:57:12 root@RS2 ~]#route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         10.0.0.129      0.0.0.0         UG    100    0        0 eth0<br>10.0.0.0        0.0.0.0         255.255.255.0   U     100    0        0 eth0<br><br>[01:00:50 root@RS2 ~]#yum install -y httpd<br>[01:01:10 root@RS2 ~]#systemctl enable --now httpd<br>Created symlink /etc/systemd/system/multi-user.target.wants/httpd.service → /usr/lib/systemd/system/httpd.service.<br>[01:01:34 root@RS2 ~]#hostname -I &gt; /var/www/html/index.html<br>[01:02:21 root@RS2 ~]#ping 192.168.0.7<br>PING 192.168.0.7 (192.168.0.7) 56(84) bytes of data.<br>64 bytes from 192.168.0.7: icmp_seq=1 ttl=63 time=0.513 ms<br>64 bytes from 192.168.0.7: icmp_seq=2 ttl=63 time=1.01 ms<br>^C<br>--- 192.168.0.7 ping statistics ---<br>2 packets transmitted, 2 received, 0% packet loss, time 1020ms<br>rtt min/avg/max/mdev = 0.513/0.760/1.008/0.249 ms<br>[01:05:07 root@RS2 ~]#curl 10.0.0.3<br>10.0.0.3 <br>[01:05:14 root@RS2 ~]#curl 10.0.0.4<br>10.0.0.4 <br><br><br><br><br></code></pre></td></tr></table></figure><h4 id="3-3-2-2-后端RS的IPVS配置"><a href="#3-3-2-2-后端RS的IPVS配置" class="headerlink" title="3.3.2.2 后端RS的IPVS配置"></a>3.3.2.2 后端RS的IPVS配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">RS1的IPVS配置</span><br>[01:04:16 root@RS1 ~]#echo 1 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore <br>[01:13:09 root@RS1 ~]#echo 2 &gt; /proc/sys/net/ipv4/conf/all/arp_announce <br>[01:13:25 root@RS1 ~]#echo 1 &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore <br>[01:13:34 root@RS1 ~]#echo 2 &gt; /proc/sys/net/ipv4/conf/lo/arp_announce <br>[14:10:05 root@RS1 ~]#ifconfig lo:1 172.16.0.100/32<br>[14:10:32 root@RS1 ~]#ip a<br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000<br>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>    inet 127.0.0.1/8 scope host lo<br>       valid_lft forever preferred_lft forever<br>    inet 10.0.0.100/0 scope global lo:1<br>       valid_lft forever preferred_lft forever<br>    inet6 ::1/128 scope host <br>       valid_lft forever preferred_lft forever<br>2: ens160: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000<br>    link/ether 00:0c:29:99:e8:44 brd ff:ff:ff:ff:ff:ff<br>    altname enp3s0<br>    inet 10.0.0.3/24 brd 10.0.0.255 scope global noprefixroute ens160<br>       valid_lft forever preferred_lft forever<br>    inet6 fe80::20c:29ff:fe99:e844/64 scope link noprefixroute <br>       valid_lft forever preferred_lft forever<br>[14:10:34 root@RS1 ~]#<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">RS2的IPVS配置</span><br>01:05:16 root@RS2 ~]#echo 1 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore <br>[01:16:22 root@RS2 ~]#echo 1 &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore <br>[01:16:38 root@RS2 ~]#echo 2 &gt; /proc/sys/net/ipv4/conf/lo/arp_announce <br>[01:16:48 root@RS2 ~]#echo 2 &gt; /proc/sys/net/ipv4/conf/all/arp_announce <br>[01:16:52 root@RS2 ~]#ifconfig lo:1 172.16.0.100/32<br>[01:17:16 root@RS2 ~]#ip a<br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000<br>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>    inet 127.0.0.1/8 scope host lo<br>       valid_lft forever preferred_lft forever<br>    inet 10.0.0.100/0 scope global lo:1<br>       valid_lft forever preferred_lft forever<br>    inet6 ::1/128 scope host <br>       valid_lft forever preferred_lft forever<br>2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000<br>    link/ether 00:0c:29:2c:30:b9 brd ff:ff:ff:ff:ff:ff<br>    altname enp3s0<br>    altname ens160<br>    inet 10.0.0.4/24 brd 10.0.0.255 scope global noprefixroute eth0<br>       valid_lft forever preferred_lft forever<br>    inet6 fe80::20c:29ff:fe2c:30b9/64 scope link noprefixroute <br>       valid_lft forever preferred_lft forever<br></code></pre></td></tr></table></figure><h4 id="3-3-2-3-LVS主机的配置"><a href="#3-3-2-3-LVS主机的配置" class="headerlink" title="3.3.2.3 LVS主机的配置"></a>3.3.2.3 LVS主机的配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在LVS上添加VIP</span><br>[13:11:06 root@LVS ~]#ifconfig lo:1 172.16.0.100/32<br>[13:18:46 root@LVS ~]#ip a<br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000<br>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>    inet 127.0.0.1/8 scope host lo<br>       valid_lft forever preferred_lft forever<br>    inet 10.0.0.100/0 scope global lo:1<br>       valid_lft forever preferred_lft forever<br>    inet6 ::1/128 scope host <br>       valid_lft forever preferred_lft forever<br>2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000<br>    link/ether 00:0c:29:e9:f4:40 brd ff:ff:ff:ff:ff:ff<br>    inet 10.0.0.128/24 brd 10.0.0.255 scope global noprefixroute eth0<br>       valid_lft forever preferred_lft forever<br>    inet6 fe80::20c:29ff:fee9:f440/64 scope link noprefixroute <br>       valid_lft forever preferred_lft forever<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">实现LVS规则</span><br>[13:18:48 root@LVS ~]#dnf -y install ipvsadm<br>[04:18:39 root@LVS ~]#ipvsadm -A -t 172.16.0.100:80 -s rr<br>[04:20:55 root@LVS ~]#ipvsadm -a -t 172.16.0.100:80 -r 10.0.0.3:80 <br>[04:21:53 root@LVS ~]#ipvsadm -a -t 172.16.0.100:80 -r 10.0.0.4:80 <br>[04:21:56 root@LVS ~]#ipvsadm -Ln<br>IP Virtual Server version 1.2.1 (size=4096)<br>Prot LocalAddress:Port Scheduler Flags<br><span class="hljs-meta prompt_">  -&gt; </span><span class="language-bash">RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br>TCP  172.16.0.100:80 rr<br><span class="hljs-meta prompt_">  -&gt; </span><span class="language-bash">10.0.0.3:80                  Route   1      0          0</span>         <br><span class="hljs-meta prompt_">  -&gt; </span><span class="language-bash">10.0.0.4:80                  Route   1      0          0</span>         <br>         <br></code></pre></td></tr></table></figure><h4 id="3-3-2-4-测试访问"><a href="#3-3-2-4-测试访问" class="headerlink" title="3.3.2.4 测试访问"></a>3.3.2.4 测试访问</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[00:22:17 root@internet-client ~]#curl 172.16.0.100<br>10.0.0.4 <br>[00:22:23 root@internet-client ~]#curl 172.16.0.100<br>10.0.0.3 <br>[00:22:25 root@internet-client ~]#curl 172.16.0.100<br>10.0.0.4 <br>[00:22:26 root@internet-client ~]#curl 172.16.0.100<br>10.0.0.3 <br>[00:22:26 root@internet-client ~]#curl 172.16.0.100<br>10.0.0.4 <br><br></code></pre></td></tr></table></figure><h2 id="3-4-脚本实现DR模型实战"><a href="#3-4-脚本实现DR模型实战" class="headerlink" title="3.4 脚本实现DR模型实战"></a>3.4 脚本实现DR模型实战</h2><h3 id="3-4-1-VS的配置脚本："><a href="#3-4-1-VS的配置脚本：" class="headerlink" title="3.4.1 VS的配置脚本："></a>3.4.1 VS的配置脚本：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment">#***************************************************************************</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Author:tangbeiting</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">QQ:306876058</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Date:2023-10-10</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">FileName:lvs_dr.sh</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">URL:https://xiaohexie00.github.io/</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Description:The <span class="hljs-built_in">test</span> script</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Copyright (C):2023 ALL rights reserved</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">**************************************************************************</span><br><br>iface=&#x27;lo:1&#x27;<br>mask=&#x27;255.255.255.255&#x27;<br>RIP1=&#x27;10.0.0.3&#x27;<br>RIP2=&#x27;10.0.0.4&#x27;<br>VIP=&#x27;172.16.0.100&#x27;<br>PORT=&#x27;80&#x27;<br>scheduler=&#x27;rr&#x27;<br>rpm -q ipvsadm &amp;&gt; /dev/null || yum install -y ipvsadm &amp;&gt; /dev/null<br><br>case $1 in<br>start)<br>    ifconfig $iface $VIP netmask $mask <br>    iptables -F<br><br>    ipvsadm -A -t $&#123;VIP&#125;:$&#123;PORT&#125; -s rr<br>    ipvsadm -a -t $&#123;VIP&#125;:$&#123;PORT&#125; -r $&#123;RIP1&#125;<br>    ipvsadm -a -t $&#123;VIP&#125;:$&#123;PORT&#125; -r $&#123;RIP2&#125; <br>    echo &quot;VS server is ready!&quot;<br>    ;;<br><br>stop)<br>    ipvsadm -C<br>    ifconfig $iface down<br>    echo &quot;VS server is canceled!&quot;<br>    ;;<br>*)<br>    echo &quot;Usage $(basename $0) start|stop&quot;<br>    exit 1<br>esac<br></code></pre></td></tr></table></figure><h3 id="3-4-2-RS的配置脚本"><a href="#3-4-2-RS的配置脚本" class="headerlink" title="3.4.2 RS的配置脚本"></a>3.4.2 RS的配置脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment">#***************************************************************************</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Author:tangbeiting</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">QQ:306876058</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Date:2023-10-10</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">FileName:lvs_rs.sh</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">URL:https://xiaohexie00.github.io/</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Description:The <span class="hljs-built_in">test</span> script</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Copyright (C):2023 ALL rights reserved</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">**************************************************************************</span><br><br>iface=&#x27;lo:1&#x27;<br>mask=&#x27;255.255.255.255&#x27;<br>VIP=&#x27;172.16.0.100&#x27;<br><br>rpm -q httpd &amp;&gt; /dev/null || yum -y install httpd &amp;&gt; /dev/null<br>systemctl enabled --now httpd &amp;&gt; /dev/null &amp;&amp; echo &quot;the httpd server is ready!&quot;<br><br><br>case $1 in <br>start)<br>    ifconfig $iface $VIP netmask $mask<br>    iptables -F<br>    <br>    echo 1 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore<br>    echo 1 &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore <br>    echo 2 &gt; /proc/sys/net/ipv4/conf/lo/arp_announce <br>    echo 2 &gt; /proc/sys/net/ipv4/conf/all/arp_announce <br>    echo &quot;RS server is ready!&quot;<br>    ;;<br>stop)<br>    echo 0 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore<br>    echo 0 &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore <br>    echo 0 &gt; /proc/sys/net/ipv4/conf/lo/arp_announce <br>    echo 0 &gt; /proc/sys/net/ipv4/conf/all/arp_announce <br>    echo &quot;RS server is canceled!&quot;<br>    ;;<br>*)<br>    echo &quot;Usage $(basename $0)&quot;<br>    exit 1<br>    ;;<br>esac<br></code></pre></td></tr></table></figure><h1 id="4、总结-http协议的通信过程详解"><a href="#4、总结-http协议的通信过程详解" class="headerlink" title="4、总结 http协议的通信过程详解"></a>4、总结 http协议的通信过程详解</h1><p><img src="image-20231107200906439.png" alt="image-20231107200906439"></p><p><strong>web http协议通信过程</strong></p><ol><li>DNS解析</li><li>CDN</li><li>TCP三次握手</li><li>web服务处理<ul><li>建立连接</li><li>接受请求</li><li>处理请求</li><li>获取资源</li><li>构建响应报文</li><li>发送响应</li><li>记录日志</li></ul></li><li>浏览器接受请求报文，进行页面渲染</li></ol><h1 id="5、总结-网络IO模型和nginx架构"><a href="#5、总结-网络IO模型和nginx架构" class="headerlink" title="5、总结 网络IO模型和nginx架构"></a>5、总结 网络IO模型和nginx架构</h1><p><strong>I/O模型相关概念</strong></p><p>同步/异步：关注的是消息通信机制，即调用者在等待一件事情的处理结果时，被调用者是否提供完成状态的通知。</p><ul><li>同步：synchronous，被调用者并不提供事件的处理结果相关的通知消息，需要调用者主动询问事情是否处理完成</li><li>异步：asynchronous,被调用者通过状态、通知或回调机制主动通知调用者被调用者的运行状态</li></ul><p>阻塞/非阻塞：关注调用者在等待结果返回之前所处的状态</p><ul><li>阻塞：blocking，指IO操作需要彻底完成后才返回到用户空间，调用结果返回之前，调用者被挂起，干不了别的事情。</li><li>非阻塞：nonblocking，指IO操作被调用后立即返回给用户一个状态值，而无需等到IO操作彻底完成，在最终的调用结果返回之前，调用者不会被挂起，可以去做别的事情。</li></ul><h2 id="5-1-网络I-O模型"><a href="#5-1-网络I-O模型" class="headerlink" title="5.1 网络I/O模型"></a>5.1 网络I/O模型</h2><p>阻塞型、非阻塞型、复用型、信号驱动型、异步</p><h3 id="5-1-1-阻塞型I-0模型（blocking-10）"><a href="#5-1-1-阻塞型I-0模型（blocking-10）" class="headerlink" title="5.1.1 阻塞型I/0模型（blocking 10）"></a>5.1.1 阻塞型I/0模型（blocking 10）</h3><p>阻塞IO模型是最简单的I/O模型，用户线程在内核进行IO操作时被阻塞 用户线程通过系统调用read发起I/O读操作，由用户空间转到内核空间。内核等到数据包到达后，然后将接收的数据拷贝到用户空间，完成read操作 用户需要等待read将数据读取到buffer后，才继续处理接收的数据。整个I/O请求的过程中，用户线程是被阻塞的，这导致用户在发起IO请求时，不能做任何事情，对CPU的资源利用率不够 优点：程序简单，在阻塞等待数据期间进程/线程挂起，基本不会占用 CPU 资源 缺点：每个连接需要独立的进程/线程单独处理，当并发请求量大时为了维护程序，内存、线程切换开销较大，apache 的prefork使用的是这种模式。</p><h3 id="5-1-2-非阻塞型-I-O-模型-nonblocking-IO"><a href="#5-1-2-非阻塞型-I-O-模型-nonblocking-IO" class="headerlink" title="5.1.2 非阻塞型 I/O 模型 (nonblocking IO)"></a>5.1.2 非阻塞型 I/O 模型 (nonblocking IO)</h3><p>用户线程发起IO请求时立即返回。但并未读取到任何数据，用户线程需要不断地发起IO请求，直到数据到达后，才真正读取到数据，继续执行。即 “轮询”机制存在两个问题：如果有大量文件描述符都要等，那么就得一个一个的read。这会带来大量的Context Switch（read是系统调用，每调用一次就得在用户态和核心态切换一次）。轮询的时间不好把握。这里是要猜多久之后数据才能到。等待时间设的太长，程序响应延迟就过大;设的太短，就会造成过于频繁的重试，干耗CPU而已，是比较浪费CPU的方式，一般很少直接使用这种模型，而是在其他IO模型中使用非阻塞IO这一特性。</p><h3 id="5-1-3-多路复用型-I-O-multiplexing"><a href="#5-1-3-多路复用型-I-O-multiplexing" class="headerlink" title="5.1.3 多路复用型 (I/O multiplexing)"></a>5.1.3 多路复用型 (I/O multiplexing)</h3><p>多路复用IO指一个线程可以同时（实际是交替实现，即并发完成）监控和处理多个文件描述符对应各自的IO，即复用同一个线程 一个线程之所以能实现同时处理多个IO,是因为这个线程调用了内核中的SELECT,POLL或EPOLL等系统调用，从而实现多路复用IO</p><p>1、select(轮训–IO数量越多速度越慢) 2、epoll(IO完成内核立刻主动发生主动地通报) I/O multiplexing 主要包括:select，poll，epoll三种系统调用，select/poll/epoll的好处就在于单个process就可以同时处理多个网络连接的IO。 它的基本原理就是select/poll/epoll这个function会不断的轮询所负责的所有socket，当某个socket有数据到达了，就通知用户进程。 当用户进程调用了select，那么整个进程会被block，而同时，kernel会“监视”所有select负责的socket，当任何一个socket中的数据准备好了，select就会返回。这个时候用户进程再调用read操作，将数据从kernel拷贝到用户进程。 Apache prefork是此模式的select，worker是poll模式。</p><h3 id="5-1-4-信号驱动式-I-O-模型-signal-driven-IO"><a href="#5-1-4-信号驱动式-I-O-模型-signal-driven-IO" class="headerlink" title="5.1.4 信号驱动式 I/O 模型 (signal-driven IO)"></a>5.1.4 信号驱动式 I/O 模型 (signal-driven IO)</h3><p>信号驱动I/O的意思就是进程现在不用傻等着，也不用去轮询。而是让内核在数据就绪时，发送信号通知进程。 调用的步骤是，通过系统调用 sigaction ，并注册一个信号处理的回调函数，该调用会立即返回，然后主程序可以继续向下执行，当有I/O操作准备就绪,即内核数据就绪时，内核会为该进程产生一个 SIGIO信号，并回调注册的信号回调函数，这样就可以在信号回调函数中系统调用 recvfrom 获取数据,将用户进程所需要的数据从内核空间拷贝到用户空间 此模型的优势在于等待数据报到达期间进程不被阻塞。用户主程序可以继续执行，只要等待来自信号处理函数的通知。 在信号驱动式 I/O 模型中，应用程序使用套接口进行信号驱动 I/O，并安装一个信号处理函数，进程继续运行并不阻塞 当数据准备好时，进程会收到一个 SIGIO 信号，可以在信号处理函数中调用 I/O 操作函数处理数据。优点：线程并没有在等待数据时被阻塞，内核直接返回调用接收信号，不影响进程继续处理其他请求因此可以提高资源的利用率 缺点：信号 I/O 在大量 IO 操作时可能会因为信号队列溢出导致没法通知</p><h3 id="5-1-5-异步-I-O-模型-asynchronous-IO"><a href="#5-1-5-异步-I-O-模型-asynchronous-IO" class="headerlink" title="5.1.5 异步 I/O 模型 (asynchronous IO)"></a>5.1.5 异步 I/O 模型 (asynchronous IO)</h3><p>异步1/O与信号驱动I/O最大区别在于，信号驱动是内核通知用户进程何时开始一个1/0操作，而异步1/O是由内核通知用户进程1/O操作何时完成，两者有本质区别，相当于不用去饭店场吃饭，直接点个外卖，把等待上菜的时间也给省了</p><p>相对于同步I/O，异步l/o不是顺序执行。用户进程进行aio_read系统调用之后，无论内核数据是否准备好，都会直接返回给用户进程，然后用户态进程可以去做别的事情。等到socket数据准备好了，内核直接复制数据给进程，然后从内核向进程发送通知。lO两个阶段，进程都是非阻塞的。</p><p>信号驱动IO当内核通知触发信号处理程序时，信号处理程序还需要阻塞在从内核空间缓冲区拷贝数据到用户空间缓冲区这个阶段，而异步10直接是在第二个阶段完成后，内核直接通知用户线程可以进行后续操作了</p><p>优点：异步I/O能够充分利用DMA特性，让I/O操作与计算重叠</p><p>缺点：要实现真正的异步I/O，操作系统需要做大量的工作。目前Windows下通过IOCP实现了真正的异步I/O，在Linux系统下，Linux2.6才引入，目前AlO并不完善，因此在Linux下实现高并发网络编程时以I0复用模型模式+多线程任务的架构基本可以满足需求</p><p>Linux提供了AlO库函数实现异步，但是用的很少。目前有很多开源的异步IO库，例如libevent、libev、libuv。</p><h2 id="5-2-nginx架构"><a href="#5-2-nginx架构" class="headerlink" title="5.2 nginx架构"></a>5.2 nginx架构</h2><p><img src="https://img2023.cnblogs.com/blog/3203793/202308/3203793-20230829000709007-322144217.png" alt="img"></p><h3 id="5-2-1-Nginx进程结构"><a href="#5-2-1-Nginx进程结构" class="headerlink" title="5.2.1 Nginx进程结构"></a>5.2.1 Nginx进程结构</h3><p>web请求处理机制</p><ul><li>多进程方式：服务器每接收到一个客户端请求就有服务器的主进程生成一个子进程响应客户端，直到用户关闭连接，这样的优势是处理速度快，子进程之间相互独立，但是如果访问过大会导致服务器资源耗尽而无法提供请求。</li><li> 多线程方式：与多进程方式类似，但是每收到一个客户端请求会有服务进程派生出一个线程和此客户端进行交互，一个线程的开销远远小于一个进程，因此多线程方式在很大程度减轻了web服务器对系统资源的要求，但是多线程也有自己的缺点，即当多个线程位于同一个进程内工作的时候，可以相互访问同样的内存地址空间，所以他们相互影响，一旦主进程挂掉则所有子线程都不能工作了，IIS服务器使用了多线程的方式，需要间隔一段时间就重启一次才能稳定。</li></ul><p>Nginx是多进程组织模型，而且是一个由Master主进程和Worker工作进程组成。</p><p><img src="image-20231107210531529.png" alt="image-20231107210531529"></p><p>主进程(master process)的功能：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs http">对外接口：接收外部的操作（信号） <br>对内转发：根据外部的操作的不同，通过信号管理 Worker <br>监控：监控 worker 进程的运行状态，worker 进程异常终止后，自动重启 worker 进程 <br>读取Nginx 配置文件并验证其有效性和正确性 <br>建立、绑定和关闭socket连接 <br>按照配置生成、管理和结束工作进程 <br>接受外界指令，比如重启、升级及退出服务器等指令 <br>不中断服务，实现平滑升级，重启服务并应用新的配置 <br>开启日志文件，获取文件描述符 <br>不中断服务，实现平滑升级，升级失败进行回滚处理 <br>编译和处理perl脚本<br></code></pre></td></tr></table></figure><p>工作进程（worker process）的功能：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs http">所有 Worker 进程都是平等的 <br>实际处理：网络请求，由 Worker <br>进程处理 Worker进程数量：一般设置为核心数，充分利用CPU资源，同时避免进程数量过多，导致进程竞争CPU资源， <br>增加上下文切换的损耗 <br>接受处理客户的请求 <br>将请求依次送入各个功能模块进行处理 I/O调用，获取响应数据 <br>与后端服务器通信，接收后端服务器的处理结果 <br>缓存数据，访问缓存索引，查询和调用缓存数据 <br>发送请求结果，响应客户的请求 <br>接收主程序指令，比如重启、升级和退出等<br></code></pre></td></tr></table></figure><h1 id="6、完成nginx编译安装脚本"><a href="#6、完成nginx编译安装脚本" class="headerlink" title="6、完成nginx编译安装脚本"></a>6、完成nginx编译安装脚本</h1><h2 id="6-1实战案例：一键安装nginx脚本"><a href="#6-1实战案例：一键安装nginx脚本" class="headerlink" title="6.1实战案例：一键安装nginx脚本"></a>6.1实战案例：一键安装nginx脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment">#***************************************************************************</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Author:tangbeiting</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">QQ:306876058</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Date:2023-10-15</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">FileName:nginx_install.sh</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">URL:https://xiaohexie00.github.io/</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Description:The <span class="hljs-built_in">test</span> script</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Copyright (C):2023 ALL rights reserved</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">**************************************************************************</span><br><br>USER=&#x27;nginx&#x27;<br>INSTALL_DIR=&#x27;/apps/nginx&#x27;<br>NGINX_VERSION=&#x27;1.22.1&#x27;<br>CPUS=`lscpu | awk &#x27;/^CPU\(s\)/&#123;print $2&#125;&#x27;`<br><br>. /etc/os-release<br><br>color () &#123;<br>    RES_COL=60<br>    MOVE_TO_COL=&quot;echo -en \\033[$&#123;RES_COL&#125;G&quot;<br>    SETCOLOR_SUCCESS=&quot;echo -en \\033[1;32m&quot;<br>    SETCOLOR_FAILURE=&quot;echo -en \\033[1;31m&quot;<br>    SETCOLOR_WARNING=&quot;echo -en \\033[1;33m&quot;<br>    SETCOLOR_NORMAL=&quot;echo -en \E[0m&quot;<br>    echo -n &quot;$1&quot; &amp;&amp; $MOVE_TO_COL<br>    echo -n &quot;[&quot;<br>    if [ $2 = &quot;success&quot; -o $2 = &quot;0&quot; ] ;then<br>        $&#123;SETCOLOR_SUCCESS&#125;<br>        echo -n $&quot;  OK  &quot;    <br>    elif [ $2 = &quot;failure&quot; -o $2 = &quot;1&quot;  ] ;then <br>        $&#123;SETCOLOR_FAILURE&#125;<br>        echo -n $&quot;FAILED&quot;<br>    else<br>        $&#123;SETCOLOR_WARNING&#125;<br>        echo -n $&quot;WARNING&quot;<br>    fi<br>    $&#123;SETCOLOR_NORMAL&#125;<br>    echo -n &quot;]&quot;<br>    echo <br>&#125;<br><br><br>install_nginx () &#123;<br>    color &quot;开始安装 nginx&quot; 0<br>    if id $&#123;USER&#125; &amp;&gt; /dev/null ;then<br>        color &quot; $USER用户已存在&quot; 1<br>    else<br>        useradd -s /sbin/nologin -r $&#123;USER&#125;<br>        color &quot; 创建$&#123;USER&#125;用户&quot; 0<br>    fi<br>    <br>    color &quot; 开始安装依赖包&quot; 0    <br>    if [ $ID = &#x27;rocky&#x27; -o $ID = &#x27;centos&#x27; ] ; then<br>        yum -y install gcc pcre-devel openssl-devel zlib-devel wget make &amp;&gt; /dev/null<br>    elif [ $ID = &#x27;ubuntu&#x27; ] ;then<br>        apt update  &amp;&gt; /dev/null<br>        apt install -y make gcc libpcre3 libpcre3-dev openssl libssl-dev  zlib1g-dev wget  &amp;&gt; /dev/null<br>    else<br>        color &quot;不支持此操作系统，退出！&quot; 1<br>        exit<br>    fi<br>    <br>    if [ ! -f nginx-$&#123;NGINX_VERSION&#125;.tar.gz  ] ; then<br>        wget https://nginx.org/download/nginx-$&#123;NGINX_VERSION&#125;.tar.gz<br>    fi<br>    <br>    cp  nginx-$&#123;NGINX_VERSION&#125;.tar.gz /usr/local/src/<br>    cd /usr/local/src/<br>    tar xf nginx-$&#123;NGINX_VERSION&#125;.tar.gz<br>    cd nginx-$&#123;NGINX_VERSION&#125;/<br>    ./configure --prefix=$&#123;INSTALL_DIR&#125; --user=nginx --group=nginx --with-http_ssl_module --with-http_v2_module --with-http_realip_module --with-http_stub_status_module --with-http_gzip_static_module --with-pcre --with-stream --with-stream_ssl_module --with-stream_realip_module<br>    make -j $CPUS &amp;&amp; make install<br>    [ $? -eq 0 ] &amp;&amp; color &quot;nginx 编译安装成功&quot; 0 || &#123; color &quot;nginx 编译安装失败，退出！&quot; 1 ;exit; &#125;<br>     <br>    <br>    chown -R $&#123;USER&#125;.$&#123;USER&#125; $&#123;INSTALL_DIR&#125;<br>    <br>    ln -s $&#123;INSTALL_DIR&#125;/sbin/nginx /usr/sbin/<br>    <br><br>    cat &gt; /usr/lib/systemd/system/nginx.service &lt;&lt;EOF<br>[Unit]<br>Description=The nginx HTTP and reverse proxy server<br>After=network.target remote-fs.target nss-lookup.target<br><br>[Service]<br>Type=forking<br>PIDFile=$&#123;INSTALL_DIR&#125;/run/nginx.pid<br>ExecStartPre=/usr/bin/rm -f $&#123;INSTALL_DIR&#125;/run/nginx.pid<br>ExecStartPre=$&#123;INSTALL_DIR&#125;/sbin/nginx -t<br>ExecStart=$&#123;INSTALL_DIR&#125;/sbin/nginx -c $&#123;INSTALL_DIR&#125;/conf/nginx.conf<br>ExecReload=/bin/kill -s HUP $MAINPID<br>Execstop=/bin/kill -s TERM $MAINPID<br>KillSignal=SIGQUIT<br>TimeoutStopSec=5<br>KillMode=process<br>PrivateTmp=true<br>LimitNOFILE=100000<br><br>[Install]<br>WantedBy=multi-user.target<br>EOF<br>    <br>    mkdir /apps/nginx/run<br>    echo &quot;pid        $&#123;INSTALL_DIR&#125;/run/nginx.pid;&quot; &gt;&gt; $&#123;INSTALL_DIR&#125;/conf/nginx.conf<br>    systemctl daemon-reload<br>    systemctl enable --now nginx &amp;&gt; /dev/null<br>    systemctl is-active nginx &amp;&gt; /dev/null || &#123; color &quot;nginx 启动失败，退出&quot; 1 ; exit; &#125; <br>    color &quot; nginx 安装完成 &quot; 0<br>    <br>&#125;    <br><br>install_nginx <br></code></pre></td></tr></table></figure><h1 id="7、总结nginx核心配置，并实现nginx多虚拟主机"><a href="#7、总结nginx核心配置，并实现nginx多虚拟主机" class="headerlink" title="7、总结nginx核心配置，并实现nginx多虚拟主机"></a>7、总结nginx核心配置，并实现nginx多虚拟主机</h1><h2 id="7-1-nginx核心配置"><a href="#7-1-nginx核心配置" class="headerlink" title="7.1 nginx核心配置"></a>7.1 nginx核心配置</h2><h3 id="7-1-1-配置文件说明"><a href="#7-1-1-配置文件说明" class="headerlink" title="7.1.1 配置文件说明"></a>7.1.1 配置文件说明</h3><p>nginx官方帮助文档</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://nginx.org/en/docs/<br></code></pre></td></tr></table></figure><p>tengine 帮助文档</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">https://tengine.taobao.org/nginx_docs/cn/docs/<br></code></pre></td></tr></table></figure><p>Nginx的配置文件的组成部分：</p><ul><li>主配置文件：nginx.conf</li><li>子配置文件：include conf.d/*.conf</li><li>fastcgi,uwsgi,scgi等协议相关的配置文件</li><li>mime.types:支持的mime类型，MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型，MIME消息能包含文本、图像、音频、视频以及其他应用程序专用的数据，是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。MIME参考文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_Types">MIME 类型（IANA 媒体类型） - HTTP | MDN (mozilla.org)</a></li></ul><p>nginx配置文件格式说明</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs http">配置文件由指令与指令块构成<br>每条指令以；分号结尾，指令与值之间以空格符号分隔<br>可以将多条指令放在同一行，用分号分隔即可，但可读性差，不推荐<br>指令块以&#123;&#125;大括号将多条指令组织在一起，且可以嵌套指令块<br>include语句允许组合多个配置文件以提升可维护性<br>使用#符号添加注释，提高可读性<br>使用$符号使用变量<br>部分指令的参数支持正则表达式<br></code></pre></td></tr></table></figure><p>Nginx主配置文件的配置指令方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">directive value [value2 .……];<br><br>注意<br>（1）指令必须以分号结尾<br>(2）支持使用配置变量内建变量：<br>由Nginx模块引入，可直接引用<br>自定义变量：由用户使用set命令定义,格式：set variable_name value;<br>引用变量：$variable_name<br></code></pre></td></tr></table></figure><p>主配置文件结构：四部分</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">main block：主配置段，即全局配置段，对http，mail都有效<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">事件驱动相关的配置</span><br>event &#123;<br>.....<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">http/https 协议相关配置段</span><br>http &#123;<br>.....<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">默认配置文件不包括下面两个块</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">mail协议相关配置段</span><br>mail &#123;<br>.....<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">stream 服务器相关配置段</span><br>stream &#123;<br>.....<br>&#125;<br></code></pre></td></tr></table></figure><p>默认的nginx.conf 配置文件格式说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">全局配置端，对全局生效，主要设置nginx的启动用户/组，启动的工作进程数量，工作模式，Nginx的PID路径，日志路径等。</span><br>nginx nginx;user<br>worker_processes 1;#启动工作进程数数量<br>events&#123;#events设置快，主要影响nginx服务器与用户的网络连接，比如是否允许同时接受多个网络连接，使用哪种事件驱动模型处理请求，每个工作进程可以同时支持的最大连接数，是否开启对多工作进程下的网络连接进行序列化等。<br><span class="hljs-meta prompt_">#</span><span class="language-bash">设置单个nginx工作进程可以接受的最大并发，作为web服务器worker_connections 1024;的时候最大并发数为worker_connections* worker_processes,作为反向代理的时候为(worker_connections * worker_processes)/2</span><br>&#125;<br>http&#123;#http块是Nginx服务器配置中的重要部分，缓存、代理和日志格式定义等绝大多数功能和第三方模块都可以在这设置，http块可以包含多个server块，而一个server块中又可以包含多个1ocation块，server块可以配置文件引入、MIME-Type定义、日志自定义、是否启用sendfile、连接超时时间和单个链接的请求上限等。<br>includemime.types;<br>default_typeapplication/octet-stream;<br>sendfileon；#作为web服务器的时候打开sendfile加快静态文件传输，指定是否使用sendfile系统调用来传输文件，sendfile系统调用在两个文件描述符之间直接传递数据(完全在内核中操作），从而避免了数据在内核缓冲区和用户缓冲区之间的拷贝，操作效率很高，被称之为零拷贝，硬盘&gt;&gt;kernel buffer(快速拷贝到kernelsocket buffer)&gt;&gt;协议栈。<br>keepalive_timeout 65； #长连接超时时间，单位是秒<br>server&#123;#设置一个虚拟机主机，可以包含自己的全局快，同时也可以包含多个location模块。比如本虚拟机监听的端口、本虚拟机的名称和IP配置，多个server 可以使用一个端口，比如都使用80端口提供web服务、<br>listen80;#配置server监听的端口<br>server_name localhost；#本server的名称,当访问此名称的时候nginx会调用当前serevr内部的配置进程匹配。<br>location / &#123;#location其实是server的一个指令，为nginx服务器提供比较多而且灵活的指令，都是在location中体现的，主要是基于nginx接受到的请求字符串，对用户请求的uIL进行匹配，并对特定的指令进行处理，包括地址重定向、数据缓存和应答控制等功能都是在这部分实现，另外很多第三方模块的配置也是在location模块中配置。<br>root html；#相当于默认页面的目录名称，默认是安装目录的相对路径，可以使用绝对路径配置。<br>index index.html index.htm;#默认的页面文件名称<br>&#125;<br>error_page500 502 503504 /50x.htm1；#错误页面的文件名称<br>location= /50x.html&#123; #location处理对应的不同错误码的页面定义到/50x.html,这个跟对应其server中定义的目录下。<br>roothtml;#定义默认页面所在的目录<br>&#125;<br> &#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">和邮件相关的配置</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">mail&#123;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">....</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">&#125;mail 协议相关配置段</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">tcp代理配置，1.9版本以上支持</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">stream &#123;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">....</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">&#125;stream 服务器相关配置段</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">导入其他路径的配置文件</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">include /apps/nginx/conf.d/*.conf</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-1-2-全局配置"><a href="#7-1-2-全局配置" class="headerlink" title="7.1.2 全局配置"></a>7.1.2 全局配置</h3><p>Main全局配置段常见的配置指令分类</p><ul><li>正常运行必备的配置</li><li>优化性能相关的配置</li><li>用于调试及定位问题相关的配置</li><li>事件驱动相关的配置</li></ul><p><strong>全局配置说明：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs shell">user nginx nginx；#启动Nginx工作进程的用户和组<br>worker_processes [number| auto]；#启动Nginx工作进程的数量,一般设为和cpu核心数相同<br>worker_cpu_affinity 00000001 00000010 00000100 00001000| auto;#将Nginx工作进程绑定到指定的CPU核心，默认Nginx是不进行进程绑定的，绑定并不是意味着当前nginx进程独占以一核心CPU，但是可以保证此进程不会运行在其他核心上，这就极大减少了nginx的工作进程在不同的cpu核心上的来回跳转，减少了CPU对进程的资源分配与回收以及内存管理等，因此可以有效的提升nginx服务器的性能。<br>CPU MASK:00000001:0号CPU<br>00000010:1号CPU<br>10000000:7号CPU<br><span class="hljs-meta prompt_">#</span><span class="language-bash">示例：</span><br>worker_processes4;<br>worker_cpu_affinity 00000010 0000100000100000 10000000;<br>[root@centos8 ~]# ps axo pid,cmd,psr | grep nginx<br>31093 nginx: master process /apps1<br>34474 nginx: worker process 1<br>34475 nginx: worker process 3<br>34476 nginx: worker process 5<br>34477 nginx: worker process 7<br>35751 grep nginx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">auto绑定CPU</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">The special value auto (1.9.10) allows binding worker processes automatically toavailable CPUs:</span><br>worker_processes auto;<br>worker_cpu_affinity auto;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">The optional mask parameter can be used to <span class="hljs-built_in">limit</span> the CPUs available forautomatic binding:</span><br>worker_cpu_affinity auto 01010101;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">错误日志记录配置，语法：error_log file  [debug | info | notice | warn | error | crit| alert | emerg]</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">error_loglogs/error.log;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">error_loglogs/error.log notice;</span><br>error_log /apps/nginx/logs/error.log error;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">pid文件保存路径</span><br>pid/apps/nginx/logs/nginx.pid;<br><br>worker_priority 0;#工作进程优先级，-20~20(19)<br>worker_rlimit_nofile 65536;#所有worker进程能打开的文件数量上限,包括:Nginx的所有连接(例如与代理服务器的连接等)，而不仅仅是与客户端的连接，另一个考虑因素是实际的并发连接数不能超过系统级别的最大打开文件数的限制.最好与ulimit-n 或者limits.conf的值保持一致，<br><br>daemon off；#前台运行Nginx服务用于测试、或者以容器运行时，需要设为off<br>master_process offlon;#是否开启Nginx的master-worker工作模式,仅用于开发调试场景,默认为on<br><br>events &#123;<br>worker_connections 65536;#设置单个工作进程的最大并发连接<br>use epo11; #使用epo11事件驱动,Nginx支持众多的事件驱动,比如：select、po11、epo11,只能设置在events模块中设置。<br>accept_mutex on; #on为同一时刻一个请求轮流由worker进程处理，而防止被同时唤醒所有worker，避免多个睡眠进程被唤醒的设置，默认为off，新请求会唤醒所有worker进程，此过程也称为&quot;惊群”，因此nginx刚安装完以后要进行适当的优化。建议设置为on<br>multi_accept on；#on时Nginx服务器的每个工作进程可以同时接受多个新的网络连接，此指令默认为off，即默认为一个工作进程只能一次接受一个新的网络连接，打开后几个同时接受多个。建议设置为on<br>&#125;<br></code></pre></td></tr></table></figure><p>范例：实现nginx的高并发配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">[15:34:14 root@rocky8 ~]#ulimit -n 102400<br>[15:32:31 root@rocky8 ~]#yum install -y httpd-tools<br>[15:34:43 root@rocky8 ~]#while true; do ab -c 5000 -n 10000 http://10.0.0.4/;sleep 0.5;done<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">默认配置不支持高并发，会出现以下错误日志</span><br>[16:44:14 root@rocky8 ~]#tail /apps/nginx/logs/error.log -f<br>2020/09/24 21:19:33 [crit] 41006#0: *1105860 open0O &quot;/apps/nginx/htm1/50x.html&quot;failed (24: Too many open files), client: 10.0.0.3, server: localhost, request:&quot;GET / HTTP/1.0&quot;, host:&quot;10.0.0.4&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果systemd启动，则需要修改nginx.service文件中加LimitNOFILE=100000,才能有效</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果非systemd启动，可以修改下面pam限制</span><br>[16:53:35 root@rocky8 ~]#vim /etc/security/limits.conf<br>*softnofile1000000<br>*hardnofile1000000<br><br><br>[17:06:04 root@rocky8 ~]#vim /apps/nginx/conf/nginx.conf<br>worker_rlimit_nofile 100000;<br>[16:50:00 root@rocky8 ~]#systemctl restart nginx<br>[16:50:00 root@rocky8 ~]#watch -n1 &#x27;ps -axo pid,cmd,nice | grep nginx&#x27; #验证进程优先级<br></code></pre></td></tr></table></figure><h3 id="7-1-3-http-配置块"><a href="#7-1-3-http-配置块" class="headerlink" title="7.1.3 http 配置块"></a>7.1.3 http 配置块</h3><p>http 协议相关的配置结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">http &#123; <br>.......<br>.......#各server的公共配置<br>server&#123; #每个server用于定义一个虚拟主机，第一个server为默认虚拟服务器<br>....<br>&#125;<br>server&#123;<br>...<br>server_name  #虚拟主机名<br>root#主目录<br>alias#路径别名<br>location [OPERATOR]URL &#123; #指定URL的特性<br>...<br>if CONDITION &#123;<br>...<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>http 协议配置说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs shell">http &#123; <br>includemime.types; #导入支持的文件类型，是相对于/apps/nginx/conf的目录<br>default_typeapplication/octet-stream;#除mime.types中文件类型外，设置其它文件默认类型，访问其它类型时会提示下载不匹配的类型文件<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">日志配置部分</span><br>    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;<br>    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;<br>    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;<br><br>    #access_log  logs/access.log  main;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">自定义优化参数</span><br>    sendfile        on;<br>    #tcp_nopush     on;#在开启了sendfile的情况下，合并请求后统一发送给客户端，必须开启<br><span class="hljs-meta prompt_">#</span><span class="language-bash">tcp_nodelayoff;<span class="hljs-comment">#在开启了keepalived模式下的连接是否启用TCP_NODELAY选项,当为off时，延迟O.2s发送，默认on时，不延迟发送，立即发送用户响应报文。</span></span><br>    #keepalive_timeout  0;<br>    keepalive_timeout  65 65;#设置会话保持时间，第二个值为响应首部：keep-Alived:timeout=65,可以和第一个值不同<br><br>    #gzip  on;#开启文件压缩<br><br>    server &#123;<br>        listen       80; #设置监听地址和端口<br>        server_name  localhost;#设置server name，可以以空格隔开写多个并支持正则表达式，如：*.magedu.comwww.magedu.*~Awww\d+\.magedu\.com$ default_server<br><br>        #charset koi8-r;#设置编码格式，默认是俄语格式，建议改为utf-8<br><br>        #access_log  logs/host.access.log  main;<br><br>        location / &#123;<br>            root   html;<br>            index  index.html index.htm;<br>        &#125;<br><br>        #error_page  404              /404.html;<br><br>        # redirect server error pages to the static page /50x.html<br>        #<br>        error_page   500 502 503 504  /50x.html; #定义错误页面<br>        location = /50x.html &#123;<br>            root   html;<br>        &#125;<br><br>        # proxy the PHP scripts to Apache listening on 127.0.0.1:80<br>        #<br>        #location ~ \.php$ &#123; #以http的方式转发php请求到指定web服务器<br>        #    proxy_pass   http://127.0.0.1;<br>        #&#125;<br><br>        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000<br>        #<br>        #location ~ \.php$ &#123; #以fastcgi的方式转发php请求到php处理<br>        #    root           html;<br>        #    fastcgi_pass   127.0.0.1:9000;<br>        #    fastcgi_index  index.php;<br>        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;<br>        #    include        fastcgi_params;<br>        #&#125;<br><br>        # deny access to .htaccess files, if Apache&#x27;s document root<br>        # concurs with nginx&#x27;s one<br>        #<br>        #location ~ /\.ht &#123; #拒绝web形式访问指定文件，如很多的网站都是通过.htaccess文件来改变自己的重定向等功能。<br>        #    deny  all;<br>        #&#125;<br>    &#125;<br><br><br>    # another virtual host using mix of IP-, name-, and port-based configuration<br>    #<br>    #server &#123;<br>    #    listen       8000;<br>    #    listen       somename:8080;<br>    #    server_name  somename  alias  another.alias;<br><br>    #    location / &#123;<br>    #        root   html;<br>    #        index  index.html index.htm;<br>    #    &#125;<br>    #&#125;<br><br><br>    # HTTPS server<br>    #<br>    #server &#123; #自定义虚拟server<br>    #    listen       443 ssl;<br>    #    server_name  localhost;<br><br>    #    ssl_certificate      cert.pem;<br>    #    ssl_certificate_key  cert.key;<br><br>    #    ssl_session_cache    shared:SSL:1m;<br>    #    ssl_session_timeout  5m;<br><br>    #    ssl_ciphers  HIGH:!aNULL:!MD5;<br>    #    ssl_prefer_server_ciphers  on;<br><br>    #    location / &#123;<br>    #        root   html;<br>    #        index  index.html index.htm; #指定默认网页文件，此指令由ngx_http_index_module模块提供<br>    #    &#125;<br>    #&#125;<br></code></pre></td></tr></table></figure><h4 id="7-1-3-1MIME"><a href="#7-1-3-1MIME" class="headerlink" title="7.1 .3.1MIME"></a>7.1 .3.1MIME</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在响应报文中将指定的文件扩展名映射至MIME对应的类型</span><br>includemime.types; #导入支持的文件类型，是相对于/apps/nginx/conf的目录<br>default_typeapplication/octet-stream;#除mime.types中文件类型外，设置其它文件默认类型，访问其它类型时会提示下载不匹配的类型文件<br>types &#123;<br>    text/html  html ;<br>    image/gif  gif;<br>    image/jpeg  jpg;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">MIME参考文档：</span><br>https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_Types<br></code></pre></td></tr></table></figure><h4 id="7-1-3-2指定响应报文server首部"><a href="#7-1-3-2指定响应报文server首部" class="headerlink" title="7.1.3.2指定响应报文server首部"></a>7.1.3.2指定响应报文server首部</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">是否在响应报文中的Content-Type显示指定的字符集，默认off不显示</span><br>charset charset | off;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">示例</span><br>charset utf-8;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">是否在响应报文的server首部显示nginx版本</span><br>server_tokens on | off | build | string;<br></code></pre></td></tr></table></figure><p>范例：修改server字段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">如果想自定义响应报文的nginx版本信息，需要修改源码文件，重新编译<br>如果server_tokens on,修改 src/core/nginx.h 修改第13-14行,如下示例<br><span class="hljs-meta prompt_">#</span><span class="language-bash">define NGINX_VERSION<span class="hljs-string">&quot;1.68.9&quot;</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">define NGINX_VER<span class="hljs-string">&quot;wanginx/&quot;</span> NGINX_VERSION</span><br><br>如果server_tokens off,修改 src/http/ngx_http_header_filter_module.c第49行，如下示例：<br>static char ngx_http_server_string[] = &quot;server: nginx&quot; CRLF;<br>把其中的nginx改为自己想要的文字即可，如：wanginx<br></code></pre></td></tr></table></figure><h2 id="7-2-nginx多虚拟主机"><a href="#7-2-nginx多虚拟主机" class="headerlink" title="7.2 nginx多虚拟主机"></a>7.2 nginx多虚拟主机</h2><p>基于不同的IP、不同的端口以及不用得域名实现不同的虚拟主机，依赖于核心模块ngx_http_core_module实现。</p><h3 id="7-2-1-新建一个PC-web和一个mobile-web站点"><a href="#7-2-1-新建一个PC-web和一个mobile-web站点" class="headerlink" title="7.2.1 新建一个PC web和一个mobile web站点"></a>7.2.1 新建一个PC web和一个mobile web站点</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">定义子配置文件路径</span><br>[21:23:13 root@rocky8 ~]#mkdir  /apps/nginx/conf/conf.d/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建pc web站点和，mobile web站点的配置文件</span><br>[21:25:27 root@rocky8 ~]#vim   /apps/nginx/conf/conf.d/pc.conf<br>server  &#123;<br>        server_name www.xiaohexie.org;<br>        root /data/nginx/html/pc;<br>&#125;<br><br>[21:25:36 root@rocky8 ~]#vim   /apps/nginx/conf/conf.d/mobile.conf<br>server  &#123;<br>        server_name m.xiaohexie.org;<br>        root /data/nginx/html/mobile;<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建站点主页存放路径</span><br>[21:26:15 root@rocky8 ~]#mkdir -p /data/nginx/html/mobile<br>[21:26:49 root@rocky8 ~]#mkdir -p /data/nginx/html/pc<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">主页显示文件</span><br>[21:26:54 root@rocky8 ~]#vim  /data/nginx/html/pc/index.html<br>&lt;h1&gt; pc web &lt;/h1&gt;<br><br>[21:27:51 root@rocky8 ~]#vim  /data/nginx/html/mobile/index.html<br>&lt;h1&gt; mobile web &lt;/h1&gt;<br><br><br>[21:28:30 root@rocky8 ~]#vim /apps/nginx/conf/nginx.conf<br>http&#123;<br>....<br>include /apps/nginx/conf/conf.d/*.conf; #在配置文件的最后面添加此行，注意不要放在最前面，会导致前面的命令无法生效<br>&#125;<br><br>[21:29:17 root@rocky8 ~]#nginx -s reload<br><br>测试：<br>[21:29:22 root@rocky8 ~]#curl www.xiaohexie.org<br>&lt;h1&gt;  pc web &lt;/h1&gt;<br>[21:30:19 root@rocky8 ~]#curl m.xiaohexie.org<br>&lt;h1&gt;  mobile web &lt;/h1&gt;<br><br></code></pre></td></tr></table></figure><p>测试：</p><p><img src="image-20231109214431993.png" alt="image-20231109214431993"></p><p><img src="image-20231109214442168.png" alt="image-20231109214442168"></p><h1 id="8、总结nginx日志格式定制"><a href="#8、总结nginx日志格式定制" class="headerlink" title="8、总结nginx日志格式定制"></a>8、总结nginx日志格式定制</h1><p>器运行时的日志保存路径和记录日志的level，因此两者是不同的，而且Nginx的错误日志一般只有一个，但是访问日志可以在不同server中定义多个，定义一个日志需要使用access_log指定日志的保存路径，使用log_format指定日志的格式，格式中定义要保存的具体日志内容。</p><p>访问日志由 ngx_http_log_module模块实现</p><p>官方帮助文档：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://nginx.org/en/docs/http/ngx_http_log_module.html<br></code></pre></td></tr></table></figure><p>语法格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">Syntax:access_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]];<br>access_log off;<br>Default:<br>access_log logs/access.log combined;<br>Context:http, server, location, if in location, limit_except<br></code></pre></td></tr></table></figure><h2 id="8-1-自定义默认格式日志"><a href="#8-1-自定义默认格式日志" class="headerlink" title="8.1 自定义默认格式日志"></a>8.1 自定义默认格式日志</h2><p>如果是要保留日志的源格式，只是添加相应的日志内容，则配置如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">注意：此指令只支持http块，不支持server块</span><br>[20:36:58 root@rocky8 ~]#vim /apps/nginx/conf/nginx.conf<br><br>log_format  pclog  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; $status $body_bytes_sent &quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &#x27;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">注意：此指令一定要在放在log_format命令后，或者子文件下面</span><br>access_log logs/access.log nginx_formatl;<br>[20:08:26 root@rocky8 ~]#vim /apps/nginx/conf/conf.d/pc.conf <br>server  &#123;<br>        listen 80;<br>        server_name www.xiaohexie.org;<br>        root /data/nginx/html/pc;<br>        access_log /apps/nginx/logs/xiaohexie-org_access_pc.log pclog;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启nginx并访问测试日志格式</span><br>[20:33:32 root@rocky8 ~]#tail -f   /apps/nginx/logs/xiaohexie-org_access_pc.log <br>10.0.0.1 - - [21/Nov/2023:20:33:46 +0800] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&quot; &quot;-&quot; <br>10.0.0.3 - - [21/Nov/2023:20:34:28 +0800] &quot;GET / HTTP/1.1&quot; 200 18 &quot;-&quot; &quot;curl/7.61.1&quot; &quot;-&quot; <br></code></pre></td></tr></table></figure><h2 id="8-2-自定义json格式日志"><a href="#8-2-自定义json格式日志" class="headerlink" title="8.2 自定义json格式日志"></a>8.2 自定义json格式日志</h2><p>Nginx的默认访问日志记录内容相对比较单一，默认的格式也不方便后期做日志统计分析，生产环境中通常将nginx日志转换为json日志，然后配合使用ELK做日志收集，统计和分析。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"> log_format access_json &#x27;&#123;&quot;@timestamp&quot;:&quot;$time_iso8601&quot;,&#x27; &#x27;&quot;host&quot;:&quot;$server_addr&quot;,&#x27; &#x27;&quot;clientip&quot;:&quot;$remote_addr&quot;,&#x27; &#x27;&quot;size&quot;:$body_bytes_sent,&#x27; &#x27;&quot;responsetime&quot;:$request_time,&#x27; &#x27;&quot;upstreamtime&quot;:&quot;$upstream_response_time&quot;,&#x27; &#x27;&quot;upstreamhost&quot;:&quot;$upstream_addr&quot;,&#x27; &#x27;&quot;http_host&quot;:&quot;$host&quot;,&#x27; &#x27;&quot;uri&quot;:&quot;$uri&quot;,&#x27; &#x27;&quot;xff&quot;:&quot;$http_x_forwarded_for&quot;,&#x27; &#x27;&quot;referer&quot;:&quot;$http_referer&quot;,&#x27; &#x27;&quot;tcp_xff&quot;:&quot;$proxy_protocol_addr&quot;,&#x27; &#x27;&quot;http_user_agent&quot;:&quot;$http_user_agent&quot;,&#x27; &#x27;&quot;status&quot;:&quot;$status&quot;&#125;&#x27;;<br>    access_log  /apps/nginx/logs/access_json.log  access_json;<br><br><span class="hljs-meta prompt_">  </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启Nginx并访问测试日志格式，参考链接：http：//json.cn/</span><br>[20:55:31 root@PG-backup ~]#curl www.xiaohexie.org<br>&lt;h1&gt; pc web &lt;/h1&gt;<br><br>[21:04:53 root@rocky8 ~]#tail -f /apps/nginx/logs/access_pc_json.log <br>&#123;&quot;@timestamp&quot;:&quot;2023-11-21T21:05:33+08:00&quot;,&quot;host&quot;:&quot;10.0.0.4&quot;,&quot;clientip&quot;:&quot;10.0.0.3&quot;,&quot;size&quot;:18,&quot;responsetime&quot;:0.000,&quot;upstreamtime&quot;:&quot;-&quot;,&quot;upstreamhost&quot;:&quot;-&quot;,&quot;http_host&quot;:&quot;www.xiaohexie.org&quot;,&quot;uri&quot;:&quot;/index.html&quot;,&quot;xff&quot;:&quot;-&quot;,&quot;referer&quot;:&quot;-&quot;,&quot;tcp_xff&quot;:&quot;-&quot;,&quot;http_user_agent&quot;:&quot;curl/7.61.1&quot;,&quot;status&quot;:&quot;200&quot;&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PostgreSQL 数据库</title>
    <link href="/2023/10/04/PostgreSQL-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2023/10/04/PostgreSQL-%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="PostgeSQL-数据库"><a href="#PostgeSQL-数据库" class="headerlink" title="PostgeSQL 数据库*"></a><em><strong>PostgeSQL 数据库</strong></em>*</h1><p>[TOC]</p><hr><h1 id="1-PostgreSQL-介绍和特性"><a href="#1-PostgreSQL-介绍和特性" class="headerlink" title="1 PostgreSQL 介绍和特性"></a>1 PostgreSQL 介绍和特性</h1><h2 id="1-1-PostgreSQL-介绍"><a href="#1-1-PostgreSQL-介绍" class="headerlink" title="1.1 PostgreSQL 介绍"></a>1.1 PostgreSQL 介绍</h2><p>PostgreSQL是当前功能最强大的开源的关系型数据库系统，支持跨平台的多种操作系统，基于C语言开发。通常简称为PG或PGSQL。</p><p>PostgreSQL宣称是世界上最先进的开源数据库。PostgreSQL的狂热者认为它的性能缺Oracle不分上下，而且没有高成本的负担。</p><p>PostgreSQL拥有看悠久的历史，可以追搠到1985年的加州大学伯克利分校的项目POSTGRES，是1977年的由数据库科学家Michael Stonebraker领导的Ingres项目的衍生品，为了专注于数据库理论的研究，在版本4.2时伯克利正式终止了POSTGRES项目。</p><p>1994年，来自中国香港的两名伯克利的研究生Andrew Yu和JollyChen向 POSTGRES中增加了现在SQL语言的解释器，将Postgres改名为Postgres95，并将其源代码发布到互联网上，成为一个开源的数据库管理系统。</p><p>1996年，Postgres95名称已经不合时宜，被更改为PostgreSQL，表示它支持查询语言标准，同时版本号也重新从6.0开始。自从版本6.0之后，出现了很多后续发行版本。</p><p>PostgreSQL是100%社区驱动的开源项自，由全球范围内千人以上的社区责献者共同维护。PostgreSQL提供了一个完整功能的瓶本，而不像MySQL那样提供多个不同的瓶本，如社区版、商业版及企业版。PostgreSQL的开源协议采用自由的BSD,MTT类型，这种开源协议允许任何人在保留版权声明的情况下使用，戛制，修改或者分享代码。</p><p>可靠性是PostgreSQL最优先关注的特性。普遍认为PostgreSQL坚如磐石并且设计精密，能够支持事务处理和关键任务应用。PostgreSQL提供一流的文档服务，包括全面的免费在线手册，以及旧版本手册的存档。社区的支持非常出色，并且有独立厂商提供商业支持。</p><p>数据一致性和完整性也是PostgeSQL的高度优先事项。PostgreSQL是完全符合ACID原则（原子性、一致性、隔离性，持久性）的数据库：PostgresQL对数据库访问提供强大的安全控制，不仅能够利用企业安全工具，如：Kerberos和OpenSSL等，还可以根据自己的业务规则自定义核对方法，以确保数据的质量。数据库管理员最喜欢的功能是时间点恢复(point-in-time recovery 简称PITR)期能，它具有灵活性，高可用性特征，能够打造快速故障的热备份服务器，以及快照和恢复到特定时间点等。但这还不是全部.该项目提供了很多方法来管理PostgreSQL，使PostgreSQL具有高可用性、负载均衡和同步功能，因此可以利用这些功能来满足特定需求。</p><p>官网:<a href="http://www.postgresql.org/">www.postgresql.org</a></p><p>中文社区:<a href="http://www.postgres.cn/">http://www.postgres.cn</a></p><p>中文手册:<a href="http://www.postgres.cn/docs/12/index.html">http://www.postgres.cn/docs/12/index.html</a></p><p>参考网站：</p><figure class="highlight http"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs http">https://www.runoob.com/postgresql/postgresql-tutorial.htm1<br>https://www.runoob.com/manual/PostgreSQL/index.htm1<br></code></pre></td></tr></table></figure><p>PostgreSQL开源许可（PostgreSQL Licence)</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">https://www.postgresql.org/about/licence/<br></code></pre></td></tr></table></figure><p><img src="image-20230915162934970.png" alt="image-20230915162934970"></p><p>MySQL开源许可（GPLv2 with exceptions and LGPLv2 and BSD)</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">MySQL&#x27;s soure code is available under terms of the GNU General Public License,which also fits the Free Software and Opensource definitions and conforms to theDebian Free Software Guidelines (but not to the Copyfree Standard). lt is alsoavailable under a proprietary license agreement, which is typically intended foruse by those who wish to release software incorporatin:MysQL code without havingto release the source code for the entire application. In practical terms, thismeans that MysQL can be distributed with or without source code, as canPostgresQL, but to distribute without source code in the case of MysQL requirespaying Oracle for a MySQL Commercial License.<br></code></pre></td></tr></table></figure><h2 id="1-2-数据库排名"><a href="#1-2-数据库排名" class="headerlink" title="1.2 数据库排名"></a>1.2 数据库排名</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">https://db-engines.com/en/ranking<br></code></pre></td></tr></table></figure><p><img src="image-20230915163427723.png" alt="image-20230915163427723"></p><p><img src="image-20230915163612123.png" alt="image-20230915163612123"></p><p><img src="image-20230915163912418.png" alt="image-20230915163912418"></p><h2 id="1-3-PostgresQL与-MySQL对比"><a href="#1-3-PostgresQL与-MySQL对比" class="headerlink" title="1.3 PostgresQL与 MySQL对比"></a>1.3 PostgresQL与 MySQL对比</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://bbs.chinaunix.net/thread-1688208-1-1.html<br></code></pre></td></tr></table></figure><table><thead><tr><th>特性</th><th>MySQL</th><th>PostgreSQL</th></tr></thead><tbody><tr><td>实例</td><td>通过执行 MySQL 命令（mysqld）启动实例。一个实例可以管理一个或多个数据库。一台服务器可以运行多个 mysqld 实例。一个实例管理器可以监视 mysqld 的各个实例。</td><td>通过执行 Postmaster 进程（pg_ctl）启动实例。一个实例可以管理一个或多个数据库，这些数据库组成一个集群。集群是磁盘上的一个区域，这个区域在安装时初始化并由一个目录组成，所有数据都存储在这个目录中。使用 initdb 创建第一个数据库。一台机器上可以启动多个实例。</td></tr><tr><td>数据库</td><td>数据库是命名的对象集合，是与实例中的其他数据库分离的实体。一个 MySQL 实例中的所有数据库共享同一个系统编目。</td><td>数据库是命名的对象集合，每个数据库是与其他数据库分离的实体。每个数据库有自己的系统编目，但是所有数据库共享 pg_databases。</td></tr><tr><td>数据缓冲区</td><td>通过 <strong>innodb_buffer_pool_size</strong> 配置参数设置数据缓冲区。这个参数是内存缓冲区的字节数，InnoDB 使用这个缓冲区来缓存表的数据和索引。在专用的数据库服务器上，这个参数最高可以设置为机器物理内存量的 80%。</td><td><strong>Shared_buffers</strong> 缓存。在默认情况下分配 64 个缓冲区。默认的块大小是 8K。可以通过设置 postgresql.conf 文件中的 shared_buffers 参数来更新缓冲区缓存。</td></tr><tr><td>数据库连接</td><td>客户机使用 CONNECT 或 USE 语句连接数据库，这时要指定数据库名，还可以指定用户 id 和密码。使用角色管理数据库中的用户和用户组。</td><td>客户机使用 connect 语句连接数据库，这时要指定数据库名，还可以指定用户 id 和密码。使用角色管理数据库中的用户和用户组。</td></tr><tr><td>身份验证</td><td>MySQL 在数据库级管理身份验证。 基本只支持密码认证。</td><td>PostgreSQL 支持丰富的认证方法：信任认证、口令认证、Kerberos 认证、基于 Ident 的认证、LDAP 认证、PAM 认证</td></tr><tr><td>加密</td><td>可以在表级指定密码来对数据进行加密。还可以使用 AES_ENCRYPT 和 AES_DECRYPT 函数对列数据进行加密和解密。可以通过 SSL 连接实现网络加密。</td><td>可以使用 pgcrypto 库中的函数对列进行加密/解密。可以通过 SSL 连接实现网络加密。</td></tr><tr><td>审计</td><td>可以对 querylog 执行 grep。</td><td>可以在表上使用 PL/pgSQL 触发器来进行审计。</td></tr><tr><td>查询解释</td><td>使用 EXPLAIN 命令查看查询的解释计划。</td><td>使用 EXPLAIN 命令查看查询的解释计划。</td></tr><tr><td>备份、恢复和日志</td><td>InnoDB 使用写前（write-ahead）日志记录。支持在线和离线完全备份以及崩溃和事务恢复。需要第三方软件才能支持热备份。</td><td>在数据目录的一个子目录中维护写前日志。支持在线和离线完全备份以及崩溃、时间点和事务恢复。 可以支持热备份。</td></tr><tr><td>JDBC 驱动程序</td><td>可以从 <a href="http://www.ibm.com/developerworks/cn/data/library/techarticles/dm-0606khatri/index.html#Resources">参考资料</a> 下载 JDBC 驱动程序。</td><td>可以从 <a href="http://www.ibm.com/developerworks/cn/data/library/techarticles/dm-0606khatri/index.html#Resources">参考资料</a> 下载 JDBC 驱动程序。</td></tr><tr><td>表类型</td><td>取决于存储引擎。例如，NDB 存储引擎支持分区表，内存引擎支持内存表。</td><td>支持临时表、常规表以及范围和列表类型的分区表。不支持哈希分区表。 由于PostgreSQL的表分区是通过表继承和规则系统完成了，所以可以实现更复杂的分区方式。</td></tr><tr><td>索引类型</td><td>取决于存储引擎。MyISAM：BTREE，InnoDB：BTREE。</td><td>支持 B-树、哈希、R-树和 Gist 索引。</td></tr><tr><td>约束</td><td>支持主键、外键、惟一和非空约束。对检查约束进行解析，但是不强制实施。</td><td>支持主键、外键、惟一、非空和检查约束。</td></tr><tr><td>存储过程和用户定义函数</td><td>支持 CREATE PROCEDURE 和 CREATE FUNCTION 语句。存储过程可以用 SQL 和 C++ 编写。用户定义函数可以用 SQL、C 和 C++ 编写。</td><td>没有单独的存储过程，都是通过函数实现的。用户定义函数可以用 PL/pgSQL（专用的过程语言）、PL/Tcl、PL/Perl、PL/Python 、SQL 和 C 编写。</td></tr><tr><td>触发器</td><td>支持行前触发器、行后触发器和语句触发器，触发器语句用过程语言复合语句编写。</td><td>支持行前触发器、行后触发器和语句触发器，触发器过程用 C 编写。</td></tr><tr><td>系统配置文件</td><td>my.conf</td><td>Postgresql.conf</td></tr><tr><td>数据库配置</td><td>my.conf</td><td>Postgresql.conf</td></tr><tr><td>客户机连接文件</td><td>my.conf</td><td>pg_hba.conf</td></tr><tr><td>XML 支持</td><td>有限的 XML 支持。</td><td>有限的 XML 支持。</td></tr><tr><td>数据访问和管理服务器</td><td><strong>OPTIMIZE TABLE</strong> —— 回收未使用的空间并消除数据文件的碎片 <strong>myisamchk -analyze</strong> —— 更新查询优化器所使用的统计数据（MyISAM 存储引擎） <strong>mysql</strong> —— 命令行工具 <strong>MySQL Administrator</strong> —— 客户机 GUI 工具</td><td><strong>Vacuum</strong> —— 回收未使用的空间 <strong>Analyze</strong> —— 更新查询优化器所使用的统计数据 <strong>psql</strong> —— 命令行工具 <strong>pgAdmin</strong> —— 客户机 GUI 工具</td></tr><tr><td>并发控制</td><td>支持表级和行级锁。InnoDB 存储引擎支持 READ_COMMITTED、READ_UNCOMMITTED、REPEATABLE_READ 和 SERIALIZABLE。使用 SET TRANSACTION ISOLATION LEVEL 语句在事务级设置隔离级别。</td><td>支持表级和行级锁。支持的 ANSI 隔离级别是 Read Committed（默认 —— 能看到查询启动时数据库的快照）和 Serialization（与 Repeatable Read 相似 —— 只能看到在事务启动之前提交的结果）。使用 SET TRANSACTION 语句在事务级设置隔离级别。使用 SET SESSION 在会话级进行设置。</td></tr></tbody></table><p>**MySQL相对于PostgreSQL的劣势：</p><p>**</p><table><thead><tr><th><strong>MySQL</strong></th><th><strong>PostgreSQL</strong></th></tr></thead><tbody><tr><td>最重要的引擎InnoDB很早就由Oracle公司控制。目前整个MySQL数据库都由Oracle控制。</td><td>BSD协议，没有被大公司垄断。</td></tr><tr><td>对复杂查询的处理较弱，查询优化器不够成熟</td><td>很强大的查询优化器，支持很复杂的查询处理。</td></tr><tr><td>只有一种表连接类型:嵌套循环连接(nested-loop),不支持排序-合并连接(sort-merge join)与散列连接(hash join)。</td><td>都支持</td></tr><tr><td>性能优化工具与度量信息不足</td><td>提供了一些性能视图，可以方便的看到发生在一个表和索引上的select、delete、update、insert统计信息，也可以看到cache命中率。网上有一个开源的pgstatspack工具。</td></tr><tr><td>InnoDB的表和索引都是按相同的方式存储。也就是说表都是索引组织表。这一般要求主键不能太长而且插入时的主键最好是按顺序递增，否则对性能有很大影响。</td><td>不存在这个问题。</td></tr><tr><td>大部分查询只能使用表上的单一索引;在某些情况下，会存在使用多个索引的查询,但是查询优化器通常会低估其成本,它们常常比表扫描还要慢。</td><td>不存在这个问题</td></tr><tr><td>表增加列，基本上是重建表和索引，会花很长时间。</td><td>表增加列，只是在数据字典中增加表定义，不会重建表</td></tr><tr><td>存储过程与触发器的功能有限。可用来编写存储过程、触发器、计划事件以及存储函数的语言功能较弱</td><td>除支持pl/pgsql写存储过程，还支持perl、python、Tcl类型的存储过程：pl/perl，pl/python，pl/tcl。 也支持用C语言写存储过程。</td></tr><tr><td>不支持Sequence。</td><td>支持</td></tr><tr><td>不支持函数索引，只能在创建基于具体列的索引。 不支持物化视图。</td><td>支持函数索引，同时还支持部分数据索引，通过规则系统可以实现物化视图的功能。</td></tr><tr><td>执行计划并不是全局共享的, 仅仅在连接内部是共享的。</td><td>执行计划共享</td></tr><tr><td>MySQL支持的SQL语法(ANSI SQL标准)的很小一部分。不支持递归查询、通用表表达式（Oracle的with 语句）或者窗口函数（分析函数）。</td><td>都 支持</td></tr></tbody></table><table><thead><tr><th>不支持用户自定义类型或域(domain)</th><th>支持。</th></tr></thead><tbody><tr><td>对于时间、日期、间隔等时间类型没有秒以下级别的存储类型</td><td>可以精确到秒以下。</td></tr><tr><td>身份验证功能是完全内置的，不支持操作系统认证、PAM认证，不支持LDAP以及其它类似的外部身份验证功能。</td><td>支持OS认证、Kerberos 认证 、Ident 的认证、LDAP 认证、PAM 认证</td></tr><tr><td>不支持database link。有一种叫做Federated的存储引擎可以作为一个中转将查询语句传递到远程服务器的一个表上,不过,它功能很粗糙并且漏洞很多</td><td>有dblink，同时还有一个dbi-link的东西，可以连接到oracle和mysql上。</td></tr><tr><td>Mysql Cluster可能与你的想象有较大差异。开源的cluster软件较少。 复制(Replication)功能是异步的,并且有很大的局限性.例如,它是单线程的(single-threaded),因此一个处理能力更强的Slave的恢复速度也很难跟上处理能力相对较慢的Master.</td><td>有丰富的开源cluster软件支持。</td></tr><tr><td>explain看执行计划的结果简单。</td><td>explain返回丰富的信息。</td></tr><tr><td>类似于ALTER TABLE或CREATE TABLE一类的操作都是非事务性的.它们会提交未提交的事务，并且不能回滚也不能做灾难恢复</td><td>DDL也是有事务的。</td></tr></tbody></table><p>PostgreSQL主要优势：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http">　　1. PostgreSQL完全免费，而且是BSD协议，如果你把PostgreSQL改一改，然后再拿去卖钱，也没有人管你，这一点很重要，这表明了PostgreSQL数据库不会被其它公司控制。oracle数据库不用说了，是商业数据库，不开放。而MySQL数据库虽然是开源的，但现在随着SUN被oracle公司收购，现在基本上被oracle公司控制，其实在SUN被收购之前，MySQL中最重要的InnoDB引擎也是被oracle公司控制的，而在MySQL中很多重要的数据都是放在InnoDB引擎中的，反正我们公司都是这样的。所以如果MySQL的市场范围与oracle数据库的市场范围冲突时，oracle公司必定会牺牲MySQL，这是毫无疑问的。<br>　　2. 与PostgreSQl配合的开源软件很多，有很多分布式集群软件，如pgpool、pgcluster、slony、plploxy等等，很容易做读写分离、负载均衡、数据水平拆分等方案，而这在MySQL下则比较困难。<br>3. PostgreSQL源代码写的很清晰，易读性比MySQL强太多了，怀疑MySQL的源代码被混淆过。所以很多公司都是基本PostgreSQL做二次开发的。<br>4. PostgreSQL在很多方面都比MySQL强，如复杂SQL的执行、存储过程、触发器、索引。同时PostgreSQL是多进程的，而MySQL是线程的，虽然并发不高时，MySQL处理速度快，但当并发高的时候，对于现在多核的单台机器上，MySQL的总体处理性能不如PostgreSQL，原因是MySQL的线程无法充分利用CPU的能力。<br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">https://blog.csdn.net/dqcfkyqdxym3f8rb0/article/details/121804125<br></code></pre></td></tr></table></figure><p><img src="image-20230915164949794.png" alt="image-20230915164949794"></p><h2 id="1-4各种数据库性能比较"><a href="#1-4各种数据库性能比较" class="headerlink" title="1.4各种数据库性能比较"></a>1.4各种数据库性能比较</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">https://github.com/digoal<br></code></pre></td></tr></table></figure><p><img src="image-20230915165253502.png" alt="image-20230915165253502"></p><h2 id="1-5-PostgreSQL各版本的特性矩阵"><a href="#1-5-PostgreSQL各版本的特性矩阵" class="headerlink" title="1.5 PostgreSQL各版本的特性矩阵"></a>1.5 PostgreSQL各版本的特性矩阵</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">https://www.postgresql.org/about/featurematrix/<br></code></pre></td></tr></table></figure><p><img src="image-20230915170109653.png" alt="image-20230915170109653"></p><p><img src="image-20230915170144794.png" alt="image-20230915170144794"></p><p><strong>PostgreSQL的优势</strong></p><ul><li>PostgreSQL数据库是目前功能最强大的开源数据库，它是最接近工业标准SQL92的查询语言，并且正在实现新的功能以兼容最新的SQL标准SQL2003。</li><li>稳定可靠：PostgreSQL是唯一能做到数据零丢失的开源数据库。有报道称国外的部分银行也在使用PostgreSQL数据库。</li><li>开源免费：PostgreSQL数据库是开源的、免费的，而且是BSD协议，在使用和二次开发上基本没有限制。</li><li>支持广泛：PostgreSQL数据库支持大量的主流开发语言，包括C、C++、Perl、Python、Java、Tcl,PHP等。</li><li>PostgreSQL社区活跃：PostgreSQL基本上每三个月推出一个补丁版本，这意味着已知的BUG很快会被修复，有应用场景的需求也会及时得到响应。</li></ul><h1 id="2-PostgreSQL安装"><a href="#2-PostgreSQL安装" class="headerlink" title="2 PostgreSQL安装"></a>2 PostgreSQL安装</h1><p>安装方法分为两种：</p><ul><li><p>二进制安装包进行安装</p><p>各个Linux的发行版本中，很多都内置了PostgreSQL的二进制安装包，但内置的版本可能较旧。对于二进制包安装的方法是通过不同发行版本的Linux下的包管理器进行的，如在RHEL系统相关版本下用yum 命令，在Debian或Ubuntu下使用apt命令</p></li><li><p>源码编译安装</p><p>使用源码编译安装相对更灵活，用户可以有更多的选择，可以选择较新的版本、配置不同的编译选项,编译出用户需要的功能。</p></li></ul><p>官方安装文档：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">https://www.postgresql.org/download/<br></code></pre></td></tr></table></figure><p><img src="image-20230915172334940.png" alt="image-20230915172334940"></p><h2 id="2-1-二进制包安装"><a href="#2-1-二进制包安装" class="headerlink" title="2.1 二进制包安装"></a>2.1 二进制包安装</h2><p>PostgreSQL支持各种操作系统，并提供相关二进制包包的安装方法</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">https://www.postgresql.org/download/linux/redhat/<br>https://www.postgresql.org/download/linux/ubuntu/<br></code></pre></td></tr></table></figure><h3 id="2-1-1-RHEL-CentOS-Rocky安装PostgreSQL"><a href="#2-1-1-RHEL-CentOS-Rocky安装PostgreSQL" class="headerlink" title="2.1.1 RHEL/CentOS/Rocky安装PostgreSQL"></a>2.1.1 RHEL/CentOS/Rocky安装PostgreSQL</h3><p><img src="image-20230915172716961.png" alt="image-20230915172716961"></p><p>范例：Rocky8利用官方源安装PostgreSQL12</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs shell">[20:12:15 root@rocky8 ~]#sudo dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">禁用内置的postgresq1</span><br>[20:14:26 root@rocky8 ~]#dnf -qy module disable postgresql<br>[20:17:43 root@rocky8 ~]#dnf install -y postgresql12-server<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">初始化数据库</span><br>[20:17:43 root@rocky8 ~]#/usr/pgsql-12/bin/postgresql-12-setup initdb<br>[20:17:43 root@rocky8 ~]#systemctl enable --now   postgresql-12 <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">验证成功</span><br>[20:19:23 root@rocky8 ~]#sudo -u postgres psql -c &quot;select version();&quot;<br>could not change directory to &quot;/root&quot;: Permission denied<br>                                                 version                                                  <br>----------------------------------------------------------------------------------------------------------<br> PostgreSQL 12.16 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18), 64-bit<br>(1 row)<br><br>[20:21:17 root@rocky8 ~]#su - postgres<br>[20:21:50 postgres@rocky8 ~]$psql<br>psql (12.16)<br>Type &quot;help&quot; for help.<br><br>postgres=# help<br>You are using psql, the command-line interface to PostgreSQL.<br>Type:  \copyright for distribution terms<br>       \h for help with SQL commands<br>       \? for help with psql commands<br>       \g or terminate with semicolon to execute query<br>       \q to quit<br>postgres=# <br><br><br></code></pre></td></tr></table></figure><p>范例：Rocky8利用官方源安装PostgreSQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs shell">[20:24:59 root@rocky8 ~]#yum install -y postgresql-server<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">默认无法启动</span><br>[20:26:45 root@rocky8 ~]#systemctl start postgresql<br>Job for postgresql.service failed because the control process exited with error code.<br>See &quot;systemctl status postgresql.service&quot; and &quot;journalctl -xe&quot; for details.<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看日志提示初始化</span><br>[20:27:14 root@rocky8 ~]#tail /var/log/messages<br>Sep 15 20:26:45 Master-DNS systemd[1]: Started man-db-cache-update.service.<br>Sep 15 20:26:45 Master-DNS systemd[1]: run-rabcb67bb52ac458d8ea95e6aa2faae32.service: Succeeded.<br>Sep 15 20:27:14 Master-DNS systemd[1]: Starting PostgreSQL database server...<br>Sep 15 20:27:14 Master-DNS postgresql-check-db-dir[3679]: Directory &quot;/var/lib/pgsql/data&quot; is missing or empty.<br>Sep 15 20:27:14 Master-DNS postgresql-check-db-dir[3679]: Use &quot;/usr/bin/postgresql-setup --initdb&quot;<br>Sep 15 20:27:14 Master-DNS postgresql-check-db-dir[3679]: to initialize the database cluster.<br>Sep 15 20:27:14 Master-DNS postgresql-check-db-dir[3679]: See /usr/share/doc/postgresql/README.rpm-dist for more information.<br>Sep 15 20:27:14 Master-DNS systemd[1]: postgresql.service: Control process exited, code=exited status=1<br>Sep 15 20:27:14 Master-DNS systemd[1]: postgresql.service: Failed with result &#x27;exit-code&#x27;.<br>Sep 15 20:27:14 Master-DNS systemd[1]: Failed to start PostgreSQL database server.<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">初始化数据库</span><br>[20:27:47 root@rocky8 ~]#ls /var/lib/pgsql/data/<br>[20:28:39 root@rocky8 ~]#/usr/bin/postgresql-setup --initdb<br> * Initializing database in &#x27;/var/lib/pgsql/data&#x27;<br> * Initialized, logs are in /var/lib/pgsql/initdb_postgresql.log<br>[20:28:47 root@rocky8 ~]#ls /var/lib/pgsql/data/<br>base    pg_commit_ts  pg_ident.conf  pg_notify    pg_snapshots  pg_subtrans  PG_VERSION  postgresql.auto.conf<br>global  pg_dynshmem   pg_logical     pg_replslot  pg_stat       pg_tblspc    pg_wal      postgresql.conf<br>log     pg_hba.conf   pg_multixact   pg_serial    pg_stat_tmp   pg_twophase  pg_xact<br><br><br>[20:28:53 root@rocky8 ~]#systemctl enable --now postgresql<br>Created symlink /etc/systemd/system/multi-user.target.wants/postgresql.service → /usr/lib/systemd/system/postgresql.service.<br>[20:29:49 root@rocky8 ~]#su - postgres<br>[20:29:59 postgres@rocky8 ~]$psql<br>psql (10.23)<br>Type &quot;help&quot; for help.<br><br>postgres=# <br><br></code></pre></td></tr></table></figure><h3 id="2-1-2-Ubuntu-安装PostgreSQL"><a href="#2-1-2-Ubuntu-安装PostgreSQL" class="headerlink" title="2.1.2  Ubuntu 安装PostgreSQL"></a>2.1.2  Ubuntu 安装PostgreSQL</h3><p>范例：Ubuntu利用官方源安装PostgreSQL-12</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@ubuntu:~# sh -c &#x27;echo &quot;deb https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg mai              n&quot; &gt; /etc/apt/sources.list.d/pgdg.list&#x27;<br>root@ubuntu:~# wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key a              dd -<br>root@ubuntu:~# apt-get update<br>root@ubuntu:~# apt-get -y install postgresql-12<br><br><br></code></pre></td></tr></table></figure><p>范例：Ubuntu20.04利用系统源安装PostgreSQL-12</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@ubuntu:~# apt update<br><br>root@ubuntu:~# apt -y install postgresql<br>root@ubuntu:~# su - postgres<br>postgres@ubuntu:~$ psql<br>psql (12.16 (Ubuntu 12.16-0ubuntu0.20.04.1))<br>Type &quot;help&quot; for help.<br><br>postgres=# exit<br></code></pre></td></tr></table></figure><h2 id="2-2-源码编译安装"><a href="#2-2-源码编译安装" class="headerlink" title="2.2 源码编译安装"></a>2.2 源码编译安装</h2><h3 id="2-2-1-编译安装过程说明"><a href="#2-2-1-编译安装过程说明" class="headerlink" title="2.2.1 编译安装过程说明"></a>2.2.1 编译安装过程说明</h3><p>官方帮助</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">https://www.postgresql.org/docs/current/installation.html<br>http://www.postgres.cn/v2/download<br></code></pre></td></tr></table></figure><p>第一步：下载源代码</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">https://www.postgresql.org/ftp/source/<br>https://mirrors.aliyun.com/postgresql/source/<br></code></pre></td></tr></table></figure><p>第二步：编译安装。过程与Linux下其他软件的编译安装过程相同</p><ul><li>./configure</li><li>make</li><li>make install</li></ul><p>第三步：编译安装完成后执行如下步骤</p><ul><li>使用initdb命令初使用化数据库</li><li>启动数据库实例</li></ul><h3 id="2-2-2-系统初始化和优化配置"><a href="#2-2-2-系统初始化和优化配置" class="headerlink" title="2.2.2 系统初始化和优化配置"></a>2.2.2 系统初始化和优化配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">关闭防火墙和SELinux等</span><br>systemctl disable firewalld<br>sed -i &#x27;/^SELINUX=/c SELINUX=Disabled&#x27;  /etc/selinux/config<br><span class="hljs-meta prompt_">#</span><span class="language-bash">内核参数优化</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">vi /etc/sysctl.conf</span><br>kernel.shmmax=68719476736（CentosS6以前版本默认值，CentoS7默认为18446744073692774399)<br>kernel.shma11 = 4294967296（CentoS6以前版本默认值，CentoS7默认为18446744073692774399)<br>kernel.shmmni = 4096<br>kernel.sem = 50100 64128000 50100 1280<br>fs.file-max = 7672460<br>net.ipv4.ip_local_port_range = 9000 65000<br>net.core.rmem_default = 1048576<br>net.core.rmem_max = 4194304<br>net.core.wmem_default = 262144<br>net.core.wmem_max = 1048576<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">vim /etc/security/limits.conf</span><br>* - nofile 100000<br>* - nproc 100000<br>* - memlock 60000<br></code></pre></td></tr></table></figure><h3 id="2-2-3-安装依赖包"><a href="#2-2-3-安装依赖包" class="headerlink" title="2.2.3 安装依赖包"></a>2.2.3 安装依赖包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">RHEL系统</span><br>yum install -y gcc make readline-devel zlib-devel<br><span class="hljs-meta prompt_">#</span><span class="language-bash">ubuntu</span><br>apt update<br>apt install -y gcc make libreadline-dev zlib1g-dev<br></code></pre></td></tr></table></figure><h3 id="2-2-4-源码编译安装"><a href="#2-2-4-源码编译安装" class="headerlink" title="2.2.4 源码编译安装"></a>2.2.4 源码编译安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">下载解压缩</span><br>[21:41:20 root@rocky8 ~]#wget https://mirrors.aliyun.com/postgresql/source/v12.9/postgresql-12.9.tar.gz<br>[21:45:00 root@rocky8 ~]#tar xf postgresql-12.9.tar.gz <br>[21:45:10 root@rocky8 ~]#cd postgresql-12.9/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看安装说明</span><br>[21:47:48 root@rocky8 postgresql-12.9]#cat /root/postgresql-12.9/INSTALL<br> ./configure<br>    make<br>    su<br>    make install<br>    adduser postgres<br>    mkdir /usr/local/pgsql/data<br>    chown postgres /usr/local/pgsql/data<br>    su - postgres<br>    /usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data<br>    /usr/local/pgsql/bin/pg_ctl -D /usr/local/pgsql/data -l logfile start<br>    /usr/local/pgsql/bin/createdb test<br>    /usr/local/pgsql/bin/psql test<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">开始编译三步曲，默认安装在/usr/local/pgsq1</span><br>[21:52:14 root@rocky8 postgresql-12.9]#./configure --prefix=/apps/pgsql --with-pgport=5432<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看编译选项（可选）</span><br><br><br>[21:57:11 root@rocky8 postgresql-12.9]#make -j 3 world  #默认make不包括文档和其他模块<br>[22:00:16 root@rocky8 postgresql-12.9]#make install-world  #默认make install不包括文档和其他模块<br></code></pre></td></tr></table></figure><h3 id="2-2-5-创建数据库用户和组"><a href="#2-2-5-创建数据库用户和组" class="headerlink" title="2.2.5  创建数据库用户和组"></a>2.2.5  创建数据库用户和组</h3><p>PostgreSQL默认不支持以root身份启动服务，虽然也可修改源码实现root启动，但基于安全考虑不建议，因此必须创建一个用于启动PostgrepSQL的普通用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建数据库用户和组，注意此用户需要可以交互登录</span><br>[22:07:25 root@rocky8 ~]#useradd -s /bin/bash -m -d /home/postgres postgres<br>[22:08:47 root@rocky8 ~]#echo -e &#x27;123456\n123456&#x27; | passwd postgres<br>[22:11:34 root@rocky8 ~]#echo postgres:123456 | chpasswd<br></code></pre></td></tr></table></figure><h3 id="2-2-6创建数据目录并授权"><a href="#2-2-6创建数据目录并授权" class="headerlink" title="2.2.6创建数据目录并授权"></a>2.2.6创建数据目录并授权</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[22:11:46 root@rocky8 ~]#mkdir -pv /pgsql/data/<br>[22:13:28 root@rocky8 ~]#chown postgres. /pgsql/data/<br></code></pre></td></tr></table></figure><h3 id="2-2-7设置环境变量"><a href="#2-2-7设置环境变量" class="headerlink" title="2.2.7设置环境变量"></a>2.2.7设置环境变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">[22:14:38 root@rocky8 ~]#vim /etc/profile.d/pgsql.sh<br>[22:19:11 root@rocky8 ~]#cat /etc/profile.d/pgsql.sh<br>export PGHOME=/apps/pgsql<br>export PATH=$PGHOME/bin/:$PATH<br>export PGDATA=/pgsql/data<br>export PGUSER=postgres<br>export MANPATH=/apps/pgsql/share/man:$MANPATH<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">验证</span><br>[22:19:15 root@rocky8 ~]#su - postgres<br>[22:20:22 postgres@rocky8 ~]$psql --version<br>psql (PostgreSQL) 12.9<br></code></pre></td></tr></table></figure><h3 id="2-2-8初始化数据库"><a href="#2-2-8初始化数据库" class="headerlink" title="2.2.8初始化数据库"></a>2.2.8初始化数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[22:19:15 root@rocky8 ~]#su - postgres<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">初始化</span><br>[22:20:45 postgres@rocky8 ~]$initdb  #前面加了环境变量，所以这里可以不加其他选项<br><br>initdb -D $PGDATA<br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果没有指定选项-D&lt;datadir&gt;，按环境变量<span class="hljs-variable">$PGDATA</span>指定的路径进行初始化</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">生产建议初始化方式</span><br>initdb -A md5 -D $PGDATA -E utf8 --locale=C -U postgres -W<br>-A#指定local connections默认的身份验证方法<br>-D#指定数据目录<br>-E #指定字符集<br>--locale=C#指定语言环境<br>-U #指定数据库superuser用户名<br>-W#指定数据库superuser的用户密码<br></code></pre></td></tr></table></figure><h3 id="2-2-9-启动和关闭服务"><a href="#2-2-9-启动和关闭服务" class="headerlink" title="2.2.9 启动和关闭服务"></a>2.2.9 启动和关闭服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">启动</span><br>[22:22:34 postgres@rocky8 ~]$pg_ctl -l logfile start <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">停止</span><br>[22:28:42 postgres@rocky8 ~]$pg_ctl stop<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动命令：</span><br>pg_ctl -D /pgsq1/data -1 logfile start<br>postgres -D /pgsq1/data &amp;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">停止数据库的命令如下：</span><br>pg_ct1 stop -D $PGDATA [-m SHUTDOWN-MODE]<br>其中-m是指定数据库的停止方法，有以下三种：<br>smart：等所有的连接中止后，关闭数据库。如果客户端连接不终止，则无法关闭数据库。<br>fast：快速关闭数据库，断开客户端的连接，让已有的事务回滚，然后正常关闭数据库。相当于oracle数据库关闭时的immediate模式。此为默认值，建议使用<br>immediate：立即关闭数据库，相当于数据库进程立即停止，直接退出，下次启动数据库需要进行恢复。相当于oracle数据库关闭时的 abort模式<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">smart关闭</span><br>pg_ctl stop -D /pgsq1/data/ -ms<br><span class="hljs-meta prompt_">#</span><span class="language-bash">fast关闭，推荐使用，也是默认模式</span><br>pg_ctl stop -D /pgsq1/data/ -mf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">immediate 相当于ki11-9</span><br>pg_ctl stop -D /pgsq1/data/ -mi<br><span class="hljs-meta prompt_">#</span><span class="language-bash">或者发送信号，直接向数据库主进程发送的signal信号有以下三种。</span><br>SIGTERM:发送此信号为Smart Shutdown关机模式。<br>SIGINT：发送此信号为Fast Shutdown关机模式。<br>SIGQUIT：发送此信号为Immediate Shutdown关机模式。<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启</span><br>pg_ctl restart -mf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">源码目录中内置PostgresQL的启动脚本</span><br>postgresql-12.9/contrib/start-scripts/linux<br></code></pre></td></tr></table></figure><p>范例：实现开机自启动PostgreSQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[22:49:16 root@rocky8 ~]#cp  postgresql-12.9/contrib/start-scripts/linux /etc/init.d/postgressql<br>[22:53:09 root@rocky8 ~]#chmod +x /etc/init.d/postgressql <br>[22:53:50 root@rocky8 ~]#chkconfig --add postgressql<br><br>[22:51:44 root@rocky8 ~]#vim /etc/init.d/postgressql <br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改下面两行</span><br>prefix=/apps/pgsql<br>PGDATA=&quot;/pgsql/data&quot;<br><br><br>[22:54:28 root@rocky8 ~]#service postgressql start <br></code></pre></td></tr></table></figure><p>范例：创建 service 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建新的service文件</span><br>[23:00:02 root@rocky8 ~]#vim /lib/systemd/system/postgresql.service<br>[23:07:25 root@rocky8 ~]#cat /lib/systemd/system/postgresql.service <br>[23:14:29 root@rocky8 ~]#cat /lib/systemd/system/postgresql.service <br>[Unit]<br>Description=PostgreSQL database server<br>After=network.target<br><br><br>[Service]<br>User=postgres<br>Group=postgres<br><br>ExecStart=/apps/pgsql/bin/postmaster -D /pgsql/data<br>ExecReload=/bin/kill -HUP<br><br><br>[Install]<br>WantedBy=multi-user.target<br><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">确认文件内容</span><br>[23:09:34 root@rocky8 ~]#systemctl daemon-reload<br>[23:09:47 root@rocky8 ~]#systemctl cat postgresql.service<br><span class="hljs-meta prompt_"># </span><span class="language-bash">/usr/lib/systemd/system/postgresql.service</span><br>[23:14:29 root@rocky8 ~]#cat /lib/systemd/system/postgresql.service <br>[Unit]<br>Description=PostgreSQL database server<br>After=network.target<br><br><br>[Service]<br>User=postgres<br>Group=postgres<br><br>ExecStart=/apps/pgsql/bin/postmaster -D /pgsql/data<br>ExecReload=/bin/kill -HUP<br><br><br>[Install]<br>WantedBy=multi-user.target<br><br><br>[23:25:49 root@rocky8 ~]#systemctl enable --now postgresql<br><br></code></pre></td></tr></table></figure><h3 id="2-2-10-查看编译和相关信息"><a href="#2-2-10-查看编译和相关信息" class="headerlink" title="2.2.10 查看编译和相关信息"></a>2.2.10 查看编译和相关信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">[14:42:03 root@rocky8 ~]#pg_config<br>BINDIR = /apps/pgsql/bin<br>DOCDIR = /apps/pgsql/share/doc<br>HTMLDIR = /apps/pgsql/share/doc<br>INCLUDEDIR = /apps/pgsql/include<br>PKGINCLUDEDIR = /apps/pgsql/include<br>INCLUDEDIR-SERVER = /apps/pgsql/include/server<br>LIBDIR = /apps/pgsql/lib<br>PKGLIBDIR = /apps/pgsql/lib<br>LOCALEDIR = /apps/pgsql/share/locale<br>MANDIR = /apps/pgsql/share/man<br>SHAREDIR = /apps/pgsql/share<br>SYSCONFDIR = /apps/pgsql/etc<br>PGXS = /apps/pgsql/lib/pgxs/src/makefiles/pgxs.mk<br>CONFIGURE = &#x27;--prefix=/apps/pgsql&#x27; &#x27;--with-pgport=5432&#x27;<br>CC = gcc<br>CPPFLAGS = -D_GNU_SOURCE<br>CFLAGS = -Wall -Wmissing-prototypes -Wpointer-arith -Wdeclaration-after-statement -Werror=vla -Wendif-labels -Wmissing-format-attribute -Wformat-security -fno-strict-aliasing -fwrapv -fexcess-precision=standard -Wno-format-truncation -Wno-stringop-truncation -O2<br>CFLAGS_SL = -fPIC<br>LDFLAGS = -Wl,--as-needed -Wl,-rpath,&#x27;/apps/pgsql/lib&#x27;,--enable-new-dtags<br>LDFLAGS_EX = <br>LDFLAGS_SL = <br>LIBS = -lpgcommon -lpgport -lpthread -lz -lreadline -lrt -lcrypt -ldl -lm <br>VERSION = PostgreSQL 12.9<br></code></pre></td></tr></table></figure><h3 id="2-2-11-源码编译一键安装脚本"><a href="#2-2-11-源码编译一键安装脚本" class="headerlink" title="2.2.11 源码编译一键安装脚本"></a>2.2.11 源码编译一键安装脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment">#***************************************************************************</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Author:tangbeiting</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">QQ:306876058</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Date:2023-09-16</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">FileName:postgresql_src_install.sh</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">URL:https://xiaohexie00.github.io/</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Description:The <span class="hljs-built_in">test</span> script</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Copyright (C):2023 ALL rights reserved</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">**************************************************************************</span><br>POSTGRESQL_VERSION=12.9<br>INSTALL_DIR=/aaps/pgsql<br>DATA_DIR=/pgsql/data/<br>PORT=5432<br>CPUS=4<br>DB_USER=postgres<br><br>. /etc/os-release<br><br>color () &#123;<br>    RES_COL=60<br>    MOVE_TO_COL=&quot;echo -en \\033[$&#123;RES_COL&#125;G&quot;<br>    SETCOLOR_SUCCESS=&quot;echo -en \\033[1;32m&quot;<br>    SETCOLOR_FAILURE=&quot;echo -en \\033[1;31m&quot;<br>    SETCOLOR_WARNING=&quot;echo -en \\033[1;33m&quot;<br>    SETCOLOR_NORMAL=&quot;echo -en \E[0m&quot;<br>    echo -n &quot;$1&quot; &amp;&amp; $MOVE_TO_COL<br>    echo -n &quot;[&quot;<br>    if [ $2 = &quot;success&quot; -o $2 = &quot;0&quot; ] ;then<br>        $&#123;SETCOLOR_SUCCESS&#125;<br>        echo -n $&quot;  OK  &quot;    <br>    elif [ $2 = &quot;failure&quot; -o $2 = &quot;1&quot;  ] ;then <br>        $&#123;SETCOLOR_FAILURE&#125;<br>        echo -n $&quot;FAILED&quot;<br>    else<br>        $&#123;SETCOLOR_WARNING&#125;<br>        echo -n $&quot;WARNING&quot;<br>    fi<br>    $&#123;SETCOLOR_NORMAL&#125;<br>    echo -n &quot;]&quot;<br>    echo <br>&#125;<br><br>install_postgresql () &#123;<br>    if [ $ID = &#x27;rocky&#x27; -o $ID = &#x27;centos&#x27; ] ; then<br>        yum install -y gcc make readline-devel zlib-devel wget<br>    elif [ $ID = &#x27;ubuntu&#x27; ] ;then<br>        apt update<br>        apt install -y gcc make libreadline-dev zlib1g-dev wget<br>    else<br>        color &quot;不支持此操作系统，退出！&quot; 1<br>        exit<br>    fi<br>    <br>    if [ ! -f postgresql-$&#123;POSTGRESQL_VERSION&#125;.tar.gz  ] ; then<br>        wget https://mirrors.aliyun.com/postgresql/source/v$&#123;POSTGRESQL_VERSION&#125;/postgresql-$&#123;POSTGRESQL_VERSION&#125;.tar.gz<br>    fi<br>    <br>    tar xf postgresql-$&#123;POSTGRESQL_VERSION&#125;.tar.gz<br>    cd postgresql-$&#123;POSTGRESQL_VERSION&#125;/<br>    ./configure --prefix=$&#123;INSTALL_DIR&#125;  --with-pgport=$PORT<br>    make -j $CPUS world<br>    make install-world<br>    <br>    useradd -s /bin/bash -m -d /home/$DB_USER $DB_USER<br>    echo -e &#x27;123456\n123456&#x27; | passwd $DB_USER<br>    <br>    mkdir -pv $&#123;DATA_DIR&#125;<br>    chown $DB_USER.$DB_USER $&#123;DATA_DIR&#125;<br>    <br>    cat &gt; /etc/profile.d/pgsql.sh &lt;&lt;EOF<br>export PGHOME=$&#123;INSTALL_DIR&#125;<br>export PATH=$&#123;INSTALL_DIR&#125;/bin/:\$PATH<br>export PGDATA=/pgsql/data<br>export PGUSER=postgres<br>export MANPATH=$&#123;INSTALL_DIR&#125;/share/man:$MANPATH<br>EOF<br>    <br>   su - $DB_USER -c &#x27;initdb&#x27;  <br>&#125;    <br> <br><br><br>start_service () &#123; <br>    cat &gt; /lib/systemd/system/postgresql.service &lt;&lt;EOF    <br>[Unit]<br>Description=PostgreSQL database server<br>After=network.target<br><br>[Service]<br>User=postgres<br>Group=postgres<br><br>ExecStart=$&#123;INSTALL_DIR&#125;/bin/postmaster -D $&#123;DATA_DIR&#125;<br>ExecReload=/bin/kill -HUP $MAINPID<br><br>[Install]<br>WantedBy=multi-user.target<br>EOF<br><br>    systemctl daemon-reload<br>    systemctl enable --now postgresql<br>    systemctl is-active postgresql.service<br>    if [ $? -eq 0 ] ; then<br>        color &quot;PostgreSQL 安装成功!&quot; 0<br>    else<br>        color &quot;PostgreSQL 安装失败!&quot; 1<br>        exit 1<br>    fi<br>&#125;<br><br>install_postgresql<br>start_service<br></code></pre></td></tr></table></figure><h2 id="2-3-pg-ctl-命令管理PostgreSQL"><a href="#2-3-pg-ctl-命令管理PostgreSQL" class="headerlink" title="2.3 pg_ctl 命令管理PostgreSQL"></a>2.3 pg_ctl 命令管理PostgreSQL</h2><p>pg_ctl是一个实用的命令行工具，有以下常见功能：</p><ul><li>初始化 PostgresQL数据库实例</li><li>启动、终止或重启PostgresQL数据库服务。</li><li>查看PostgreSQL数据库服务的状态</li><li>让数据库实例重新读取配置文件。允许给一个指定的PostgresQL进程发送信号</li><li>控制 standby 服务器为可读写</li><li>在Windows平台下允许为数据库实例注册或取消一个系统服务</li></ul><p>pc_ctl 命令格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">[16:58:00 root@rocky8 ~]#pg_ctl --help<br>pg_ctl is a utility to initialize, start, stop, or control a PostgreSQL server.<br><br>Usage:<br>  pg_ctl init[db]   [-D DATADIR] [-s] [-o OPTIONS]<br>  pg_ctl start      [-D DATADIR] [-l FILENAME] [-W] [-t SECS] [-s]<br>                    [-o OPTIONS] [-p PATH] [-c]<br>  pg_ctl stop       [-D DATADIR] [-m SHUTDOWN-MODE] [-W] [-t SECS] [-s]<br>  pg_ctl restart    [-D DATADIR] [-m SHUTDOWN-MODE] [-W] [-t SECS] [-s]<br>                    [-o OPTIONS] [-c]<br>  pg_ctl reload     [-D DATADIR] [-s]<br>  pg_ctl status     [-D DATADIR]<br>  pg_ctl promote    [-D DATADIR] [-W] [-t SECS] [-s]<br>  pg_ctl logrotate  [-D DATADIR] [-s]<br>  pg_ctl kill       SIGNALNAME PID<br><br></code></pre></td></tr></table></figure><h3 id="2-3-1初始化实例"><a href="#2-3-1初始化实例" class="headerlink" title="2.3.1初始化实例"></a>2.3.1初始化实例</h3><p>初始化PostgresQL数据库实例的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">先切换用户</span><br>su - postgres<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">初始化数据库</span><br>initdb [DATADIR]<br>pg_ctl init[db] [-s] [-D DATADIR] [-o options]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">pg_ctl命令调用initdb命令创建了一个新的PostgresQL数据库实例，参数说明如下。</span><br>-s#只打印错误和警告信息，不打印提示性信息。<br>-D DATADIR#指定数据库实例的数据目录。如果没有指定DATADIR，使用环境变量PGDATA指定的路径<br>-o options #为直接传递给initdb命令的参数<br></code></pre></td></tr></table></figure><p>范例：创建新的数据库实例数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs shell">[17:31:01 root@Master-DNS ~]#chown postgres: /pgsql/<br>[17:31:38 root@Master-DNS ~]#ls -dl /pgsql<br>drwxr-xr-x 3 postgres postgres 18 Sep 16 16:51 /pgsql<br>[17:31:48 root@Master-DNS ~]#su - postgres<br>Last login: Sat Sep 16 17:30:43 CST 2023 on pts/2<br>[17:31:57 postgres@Master-DNS ~]$pg_ctl init -D /pgsql/data2<br>The files belonging to this database system will be owned by user &quot;postgres&quot;.<br>This user must also own the server process.<br><br>The database cluster will be initialized with locale &quot;en_US.UTF-8&quot;.<br>The default database encoding has accordingly been set to &quot;UTF8&quot;.<br>The default text search configuration will be set to &quot;english&quot;.<br><br>Data page checksums are disabled.<br><br>creating directory /pgsql/data2 ... ok<br>creating subdirectories ... ok<br>selecting dynamic shared memory implementation ... posix<br>selecting default max_connections ... 100<br>selecting default shared_buffers ... 128MB<br>selecting default time zone ... Asia/Shanghai<br>creating configuration files ... ok<br>running bootstrap script ... ok<br>performing post-bootstrap initialization ... ok<br>syncing data to disk ... ok<br><br>initdb: warning: enabling &quot;trust&quot; authentication for local connections<br>You can change this by editing pg_hba.conf or using the option -A, or<br>--auth-local and --auth-host, the next time you run initdb.<br><br>Success. You can now start the database server using:<br><br>    /aaps/pgsql/bin/pg_ctl -D /pgsql/data2 -l logfile start<br><br><br>[17:34:20 postgres@Master-DNS ~]$ls /pgsql/data2<br>base          pg_dynshmem    pg_logical    pg_replslot   pg_stat      pg_tblspc    pg_wal                postgresql.conf<br>global        pg_hba.conf    pg_multixact  pg_serial     pg_stat_tmp  pg_twophase  pg_xact<br>pg_commit_ts  pg_ident.conf  pg_notify     pg_snapshots  pg_subtrans  PG_VERSION   postgresql.auto.conf<br></code></pre></td></tr></table></figure><h3 id="2-3-2服务管理"><a href="#2-3-2服务管理" class="headerlink" title="2.3.2服务管理"></a>2.3.2服务管理</h3><h4 id="2-3-2-1查看服务状态"><a href="#2-3-2-1查看服务状态" class="headerlink" title="2.3.2.1查看服务状态"></a>2.3.2.1查看服务状态</h4><p>查询数据库实例状态的命令如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">pg_ctl status [-D datadir]<br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http">[17:34:55 postgres@Master-DNS ~]$pg_ctl status -D /pgsql/data2<br>pg_ctl: no server running<br><br></code></pre></td></tr></table></figure><h4 id="2-3-2-2启动服务"><a href="#2-3-2-2启动服务" class="headerlink" title="2.3.2.2启动服务"></a>2.3.2.2启动服务</h4><p>启动PostgreSQL服务的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">pg_ctl start [-w] [-t seconds] [-s] [-D datadir] [-1 filename] [-o options] [-ppath] [-c]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">参数说明如下。</span><br>start#启动数据库实例<br>-w#等待启动完成-t#等待启动完成的等待秒数，默认为60秒<br>-s#只打印错误和警告信息，不打印提示性信息<br>-D datadir#指定数据库实例的数据目录<br>-l#服务器日志输出附加在“filename”文件上，如果该文件不存在则创建它<br>-o options #声明要直接传递给postgres的选项，具体可见postgres命令的帮助<br>-p path #指定postgres可执行文件的位置。默认情况下postgres可执行文件来自和pg_ct1相同的目录,不必使用该选项。除非要进行一些不同寻常的操作，或者产生了postgres执行文件找不到的错误<br>-c#提高服务器的软限制（ulimit-c），尝试允许数据库实例在有异常时产生一个coredump文件，以便于问题定位和故障分析<br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[17:40:57 postgres@Master-DNS ~]$pg_ctl status -D /pgsql/data2<br>[17:41:42 postgres@Master-DNS ~]$pg_ctl start -D /pgsql/data2<br>waiting for server to start....2023-09-16 17:41:47.177 CST [14233] LOG:  starting PostgreSQL 12.9 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18), 64-bit<br>2023-09-16 17:41:47.178 CST [14233] LOG:  listening on IPv6 address &quot;::1&quot;, port 5432<br>2023-09-16 17:41:47.178 CST [14233] LOG:  listening on IPv4 address &quot;127.0.0.1&quot;, port 5432<br>2023-09-16 17:41:47.178 CST [14233] LOG:  listening on Unix socket &quot;/tmp/.s.PGSQL.5432&quot;<br>2023-09-16 17:41:47.185 CST [14234] LOG:  database system was shut down at 2023-09-16 17:32:32 CST<br>2023-09-16 17:41:47.186 CST [14233] LOG:  database system is ready to accept connections<br> done<br>server started<br><br></code></pre></td></tr></table></figure><h4 id="2-3-2-3停止服务"><a href="#2-3-2-3停止服务" class="headerlink" title="2.3.2.3停止服务"></a>2.3.2.3停止服务</h4><p>停止PostgresQL数据库的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">pg_ctl stop [-w] [-t seconds] [-s] [-D datadir] [-m s[mart] 1 f[ast] | i[mmediate] ]<br><span class="hljs-meta prompt_">#</span><span class="language-bash">参数说明如下。</span><br>-W#不等待数据库停下来，命令就返回。<br>-m#指定停止的模式。前面已叙述过停止的几种模式了。#其它未说明的参数，其含义与启动数据库命令中的参数相同。<br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[17:42:00 postgres@Master-DNS ~]$pg_ctl stop -D /pgsql/data2<br>waiting for server to shut down....2023-09-16 17:44:45.968 CST [14233] LOG:  received fast shutdown request<br>2023-09-16 17:44:45.969 CST [14233] LOG:  aborting any active transactions<br>2023-09-16 17:44:45.969 CST [14233] LOG:  background worker &quot;logical replication launcher&quot; (PID 14240) exited with exit code 1<br>2023-09-16 17:44:45.970 CST [14235] LOG:  shutting down<br>2023-09-16 17:44:45.974 CST [14233] LOG:  database system is shut down<br> done<br>server stopped<br>[17:44:46 postgres@Master-DNS ~]$pg_ctl status -D /pgsql/data2<br>pg_ctl: no server running<br><br></code></pre></td></tr></table></figure><h4 id="2-3-2-4重启服务"><a href="#2-3-2-4重启服务" class="headerlink" title="2.3.2.4重启服务"></a>2.3.2.4重启服务</h4><p>重启PostgresQL数据库的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">pg_ctl restart [-w] [-t seconds][-s] [-D datadir] [-c] [-m s[mart] [ f[ast] [i[mmediate] ] [-o &quot;options ]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">此命令中的参数与启动或停止命令中的参数含义相同</span><br></code></pre></td></tr></table></figure><h4 id="2-3-2-5加载配置"><a href="#2-3-2-5加载配置" class="headerlink" title="2.3.2.5加载配置"></a>2.3.2.5加载配置</h4><p>在配置文件中改变参数后，需要使用上面这条命令使参数生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">修改配置文件 postgresql.conf后，让修改生效的方法有两种</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">方法一：在操作系统使用下面命令</span><br>pg_ctl reload [-s] [-D datadir]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">方法二：在psql中使用如下命令</span><br>postgres=# select pg_reload_conf();<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">注意：加载配置操作只针对一些配置的修改生效，有些配置需要重新启动服务才能生效</span><br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">注意：修改端口不支持reload,只能restart</span><br>[17:49:29 postgres@Master-DNS ~]$vim /pgsql/data2/postgresql.conf <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改端口</span><br>[17:50:14 postgres@Master-DNS ~]$echo port=5433 &gt;&gt; /pgsql/data2/postgresql.conf <br>[17:50:33 postgres@Master-DNS ~]$pg_ctl reload -D /pgsql/data2<br>pg_ctl: PID file &quot;/pgsql/data2/postmaster.pid&quot; does not exist<br>Is server running?<br>[17:50:43 postgres@Master-DNS ~]$pg_ctl start -D /pgsql/data2<br>waiting for server to start....2023-09-16 17:50:55.079 CST [14276] LOG:  starting PostgreSQL 12.9 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18), 64-bit<br>2023-09-16 17:50:55.079 CST [14276] LOG:  listening on IPv6 address &quot;::1&quot;, port 5433<br>2023-09-16 17:50:55.079 CST [14276] LOG:  listening on IPv4 address &quot;127.0.0.1&quot;, port 5433<br>2023-09-16 17:50:55.080 CST [14276] LOG:  listening on Unix socket &quot;/tmp/.s.PGSQL.5433&quot;<br>2023-09-16 17:50:55.090 CST [14277] LOG:  database system was shut down at 2023-09-16 17:44:45 CST<br>2023-09-16 17:50:55.091 CST [14276] LOG:  database system is ready to accept connections<br> done<br>server started<br>[17:50:55 postgres@Master-DNS ~]$ss -ntl<br>State          Recv-Q         Send-Q                 Local Address:Port                 Peer Address:Port         Process         <br>LISTEN         0              128                          0.0.0.0:22                        0.0.0.0:*                            <br>LISTEN         0              244                        127.0.0.1:5432                      0.0.0.0:*                            <br>LISTEN         0              244                        127.0.0.1:5433                      0.0.0.0:*                                                      <br>LISTEN         0              244                            [::1]:5432                         [::]:*                            <br>LISTEN         0              244                            [::1]:5433                         [::]:*  <br></code></pre></td></tr></table></figure><h3 id="2-3-3-promote模式"><a href="#2-3-3-promote模式" class="headerlink" title="2.3.3 promote模式"></a>2.3.3 promote模式</h3><p>在流复制架构中，在standby主机执行promote提升操作，恢复正常的读写操作</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">pg_ct1promote[-D DATADIR][-W][-t SECS][-s]<br></code></pre></td></tr></table></figure><p>备用服务器在指定数据目录中运行提升模式命令，结束备用模式并开始读写操作</p><h1 id="3-PostgreSQL管理"><a href="#3-PostgreSQL管理" class="headerlink" title="3 PostgreSQL管理"></a>3 PostgreSQL管理</h1><h2 id="3-1配置文件介绍"><a href="#3-1配置文件介绍" class="headerlink" title="3.1配置文件介绍"></a>3.1配置文件介绍</h2><p>PostgreSQL使用环境变量PGDATA指向的目录做为数据存放的目录。这个目录是在安装时指定的，所以在安装时需要指定一个合适的目录作为数据目录的根目录，而且，每一个PG数据库实例都需要有这样的一个目录。此数据目录的初始化是使用命令initdb来完成的。</p><p>初始化完成后，PGDATA数据目录下就会生成三个配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">postgresql.conf#数据库实例的主配置文件，基本上所有的配置参数都在此文件中。<br>pg_hba.conf#认证配置文件，配置了允许哪些IP的主机访问数据库，认证的方法是什么等信息。<br>pg_ident.conf #认证方式ident的用户映射文件。<br></code></pre></td></tr></table></figure><h2 id="3-2数据库相关概念"><a href="#3-2数据库相关概念" class="headerlink" title="3.2数据库相关概念"></a>3.2数据库相关概念</h2><h3 id="3-2-1数据库的结构组织"><a href="#3-2-1数据库的结构组织" class="headerlink" title="3.2.1数据库的结构组织"></a>3.2.1数据库的结构组织</h3><p><img src="image-20230916175616026.png" alt="image-20230916175616026"></p><p>在一个PostgreSQL数据库系统中，数据的组织结构可以分为以下五层：</p><ul><li><p>实例：一个PostgreSQL对应一个安装的数据目录$PGDATA,即一个instance实例</p></li><li><p>数据库：一个PostgresQL数据库服务下可以管理多个数据库，当应用连接到一个数据库时，一般只能访问这个数据库中的数据，而不能访问其他数据库中的内容</p><p>默认情况下初始实例只有三个数据库：postgres、templateo、template1</p></li><li><p>模式：一个数据库可以创建多个不同的名称空间即Schema,用于分隔不同的业务数据</p></li><li><p>表和索引：一个数据库可以有多个表和索引。在PostgreSQL中表的术语称为Relation，而在其他数据库中通常叫Table</p></li><li><p>行和列：每张表中有很多列和行数据。在PostgreSQL中行的术语一般为“Tuple”，而在其他数据库中则叫”Row”。</p></li></ul><h3 id="3-2-2-PostgreSQL中的术语"><a href="#3-2-2-PostgreSQL中的术语" class="headerlink" title="3.2.2 PostgreSQL中的术语"></a>3.2.2 PostgreSQL中的术语</h3><p>PostgreSQL有一些术语与其他数据库中不一样，了解了这些术语的意思，就能更好地看懂PostgreSQL中的文档。</p><p>与其他数据库不同的术语如下。</p><ul><li>Relation:表示表table或索引index,具体表示的是Table还是Index需要看具体情况</li><li>Tuple：表示表中的行，在其他数据库中使ROW来表示</li><li>Segment:每个表和索引都单独对应一个文件,即为segment,如果文件大小超过1GB,会创建多个相同名称但后缀不同的文件</li><li>Page：表示在磁盘中的数据块。在文件中以块为单位存放数据，默认值为8KB,最大可以为32KB</li><li>Buffer：表示在内存中的数据块。</li></ul><p>范例：编译时可以指定segment大小</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[18:00:19 root@rocky8 postgresql-12.9]#./configure --help | grep segment<br>  --with-segsize=SEGSIZE  set table segment size in GB [1]<br><br></code></pre></td></tr></table></figure><h3 id="3-2-3模版数据库template0和template1"><a href="#3-2-3模版数据库template0和template1" class="headerlink" title="3.2.3模版数据库template0和template1"></a>3.2.3模版数据库template0和template1</h3><p>template1和template0是PostgreSQL的模板数据库。所谓模板数据库就是创建新database时,PostgreSQL会基于模板数据库制作一份副本，其中会包含所有的数据库设置和数据文件。</p><p>PostgreSQL安装好以后会默认附带两个模板数据库：默认模板库为template1和template1。</p><p>默认模板库为template1,也可以指定template0</p><p>比如:create database db1 template template0</p><p>不要对templateo模板数据库进行任何修改，因为这是原始的干净模板</p><p>如果其它模板数据库被搞坏了，基于这个数据库做一个副本就可以了。</p><p>如果希望定制自己的模板数据库，那么请基于template1进行修改，或者自己另外创建一个模板数据库再修改。</p><p>template1和template0的区别主要有两点：</p><ol><li>template1可以连接,template0不可以连接。</li><li>使用template1模板库建库时不可指定新的encoding和locale,而template0可以。</li></ol><p>注意：template0和template1都不能被删除。</p><h3 id="3-2-4模式schema"><a href="#3-2-4模式schema" class="headerlink" title="3.2.4模式schema"></a>3.2.4模式schema</h3><p>模式schema是数据库中的一个概念，可以将其理解为一个命名空间。不同的模式下可以有相同名称的表、函数等对象且互相不冲突。提出模式的概念是为了便于管理，只要有权限，每个模式(schema)的对象可以互相调用。</p><p>在PostgreSQL中，一个数据库包含一个或多个模式，一个模式中又包含了表、函数及操作符等数据库对象。</p><p>在PostgresQL中，不能同时访问不同数据库中的对象，当要访问另一个数据库中的表或其他对象时，需要重新连接到这个新的数据库，而模式没有此限制。一个用户在连接到一个数据库后，就可以同时访问这个数据库中多个模式的对象。</p><p>通常情况下，创建和访问表的时候都不用指定模式，实际上这时访问的都是public模式。每当我们创建一个新的数据库时，PostgreSQL都会自动创建一个名为public的模式。当登录到该数据库时，如果没有特殊的指定，都是以该模式public操作各种数据对象的。</p><p>我们需要使用模式有以下几个主要原因：</p><ul><li>允许多个用户在使用同一个数据库时彼此互不干扰。</li><li>把数据库对象放在不同的模式下，然后组织成逻辑组，让它们更便于管理。</li><li>第三方的应用可以放在不同的模式中，这样就不会和其他对象的名字冲突了。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建模式</span><br>create schema schema_name;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除模式</span><br>drop schema schema_name;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看模式</span><br>\dn<br></code></pre></td></tr></table></figure><p>要访问指定模式中的对象，需要先指定一个包含模式名及表名的名字，模式和表之间用一个“点”分开，</p><p>如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">schema_name.table_name<br></code></pre></td></tr></table></figure><h2 id="3-3psql工具介绍和基本用法"><a href="#3-3psql工具介绍和基本用法" class="headerlink" title="3.3psql工具介绍和基本用法"></a>3.3psql工具介绍和基本用法</h2><p>psql是PostgreSQL中的一个命令行交互式客户端工具，类似MySQL的mysql和Oracle中的命令行工具sqlplus，它允许你交互地输入SQL或命令，然后把它们发出给PostgreSQL服务器，再显示SQL或命令的结果。而且，输入的内容还可以来自于一个文件。此外，它还提供了一些命令和多种类似shell的特性来实现书写脚本，从而实现对大量任务的自动化工作。</p><p>虽然也可以使用PostgreSQL中图形化的客户端工具（如pgadmin）来实现上述功能。但如果掌握了psql的使用方法，将会体会到它的方便之处。因为psql是一个字符界面的工具，没有图形化工具使用上的一些限制。psql 与 pgAdminlll之间的关系类似于vi与某些图形化工具的关系。</p><p><strong>psql 的历史命令与补全的功能</strong></p><ul><li>可以使用上下键把以前使用过的命令或SQL语句调出来</li><li>连续按两个tab键表示把命令补全或给出提示输入</li></ul><p><strong>psql 命令格式</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">psq1 -h &lt;hostname or ip&gt;-p&lt;端口&gt;[数据库名称]-u[用户名称]<br><br>-h #指定要连接的数据库主机名或IP地址，默认local socket登录(由配置项unix_socket_directories指定)<br>-p#指定连接的数据库端口<br><span class="hljs-meta prompt_">#</span><span class="language-bash">最后两个参数是数据库名和用户名</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">这些连接参数也可以用环境变量指定，比如：</span><br>export PGDATABASE=testdb<br>export PGHOST=10.0.0.200<br>export PGPORT=5432<br>export PGUSER=postgres<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">然后运行psq1即可,其效果与运行psq1-h 10.0.0.200-p5432 testdb postgres相同。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">可通过下面命令查看详细帮助：man /apps/pgsq1/share/man/manl/psq1.1</span><br></code></pre></td></tr></table></figure><p>范例：psql本地登录PGSQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">方法1</span><br>[20:50:58 root@rocky8 ~]#psql -d postgres -U postgres<br>psql (12.9)<br>Type &quot;help&quot; for help.<br><br>postgres=# <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">方法2</span><br>[20:51:40 root@rocky8 ~]#su - postgres<br>Last login: Fri Sep 15 23:00:00 CST 2023 on pts/0<br>[20:52:24 postgres@rocky8 ~]$psql<br>psql (12.9)<br>Type &quot;help&quot; for help.<br><br>postgres=# <br><br></code></pre></td></tr></table></figure><p>范例：远程登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">注意：默认PostgresQL不支持远程登录，需要修改配置和授权才可以</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果不指定he11odb数据库，默认连接和用户名同名的数据库</span><br>vim /pgsql/data/postgresql.conf<br>listen_addresses = &#x27;*&#x27;  <br><br><br><br>vim /pgsql/data/pg_hba.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">IPv4 <span class="hljs-built_in">local</span> connections:</span><br>host    all             all             127.0.0.1/32            trust<br>host    all             all             10.0.0.0/24             trust<br><br><br><br><br>[21:30:55 root@rocky8 ~]#psql -h 10.0.0.3 -p 5432 postgres postgres<br>psql (12.9)<br>Type &quot;help&quot; for help.<br><br>postgres=# <br><br></code></pre></td></tr></table></figure><p>范例：psql命令中直接执行SQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[21:50:45 root@rocky8 ~]#psql -U postgres -h 10.0.0.3 -p 5432 -d postgres -c &quot;select current_time&quot;<br>   current_time    <br>-------------------<br> 21:51:59.64304+08<br>(1 row)<br><br></code></pre></td></tr></table></figure><p>范例：psql 命令中执行文件中的SQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[21:54:53 root@rocky8 ~]#psql -U postgres -h 10.0.0.3 -p 5432 -d postgres -f test.sql <br>                                   List of roles<br> Role name |                         Attributes                         | Member of <br>-----------+------------------------------------------------------------+-----------<br> postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | &#123;&#125;<br><br>    current_time    <br>--------------------<br> 21:55:07.835346+08<br>(1 row)<br><br></code></pre></td></tr></table></figure><h2 id="3-4连接管理"><a href="#3-4连接管理" class="headerlink" title="3.4连接管理"></a>3.4连接管理</h2><h3 id="3-4-1访问控制配置文件介绍"><a href="#3-4-1访问控制配置文件介绍" class="headerlink" title="3.4.1访问控制配置文件介绍"></a>3.4.1访问控制配置文件介绍</h3><p>在PostgreSQL中，带有一个网络防火墙的功能的文件pg_hba.conf,可以控制允许设置哪些IP的机器访问数据库服务器。</p><p>HBA的意思是host-based authentication,也就是基于主机的认证,即实现PostgreSQL防火墙功能</p><p>initdb初始化数据目录时，会生成一个默认的pg_hba.conf文件。</p><p>pg_hba.conf 文件的格式由很多记录组成，每条记录占一行。</p><p>以#开头的行为注释及空白行会被忽略。</p><p>一条记录由若干个空格或由制表符分隔的字段组成，如果字段用引号包围，那么它可以包含空白。</p><p>每条记录声明一种连接类型、一个客户端IP地址范围(如果和连接类型相关）、一个数据库名、一个用户名字，以及对匹配这些参数的连接所使用的认证方法。</p><p>第一条匹配连接类型、客户端地址、连接请求的数据库名和用户名的记录将用于执行认证。如果选择了一条记录而且认证失败，那么将不再考虑后面的记录；如果没有匹配的记录，访问将被拒绝。即从上向下匹配，一旦匹配则不会再向下检查</p><p>每条记录可以是下面七种格式之一：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs http">1) local &lt;dbname&gt; &lt;user&gt; &lt;auth-method&gt;[auth-options]<br>2) host &lt;dbname&gt; &lt;user&gt; &lt;ip/masklen&gt; &lt;auth-method&gt;auth-options]<br>3) hostssl &lt;dbname&gt;&lt;user&gt; &lt;ip/masklen&gt; &lt;auth-method&gt;[auth-options]<br>4) hostnoss1 &lt;dbname&gt; &lt;user&gt; &lt;ip/masklen&gt; &lt;auth-method&gt;[auth-options]<br>5) host &lt;dbname&gt; &lt;user&gt; &lt;ip&gt;&lt;mask&gt; &lt;auth-method&gt; [auth-options]<br>6] hostssl &lt;dbname&gt; &lt;user&gt; &lt;ip&gt; &lt;mask&gt; &lt;auth-method&gt;[ auth-options]<br>7) hostnossl &lt;dbname&gt;&lt;user&gt;&lt;ip&gt;&lt;mask&gt; &lt;auth-method&gt;[auth-options]<br></code></pre></td></tr></table></figure><p>pg_hba.conf文件为pg实例的防火墙配置文件。配置文件格式分为5部分：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">TYPEDATABASEUSERADDRESSMETHOD<br></code></pre></td></tr></table></figure><ul><li>·第1个字段只能是下面的取值。<ul><li>local：这条记录匹配通过UNIX域套接字的连接认证。没有这种类型的记录，就不允许有UNIX域套接字的连接。当 psq后面不指定主机名或IP地址时，即用UNIX域套接字的方式连接数据库。</li><li>host:这条记录匹配通过TCP/IP进行的连接。包括了SSL和非SS的连接。</li><li>hostssl:这条记录匹配使用TCP/IP的SSL连接。必须是使用SSL加密的连接，且要使用这个选项，编译服务器时必须打开SSL支持，启动服务器时必须打开SSL配置选项。</li><li>hostnossl：这条记录与hostssl相反，它只匹配那些在TCP/IP上不使用SSL的连接请求。</li></ul></li><li>第2个字段用于设置一个数据库名称，如果设置为all，表示可以匹配任何数据库，注意：如果设置为replication时比较特殊，表示允许流复制连接，而不是允许连接到一个名为”replication”的数据库上。</li><li>第3个字段用于设置一个用户的名称，如果设置为all，表示可以匹配任何用户。</li><li>第4个字段&lt;ip/masklen&gt;表示允许哪些IP地址来访问此服务器，如192.168.1.10/32表示只允许192.168.1.10这台主机访问数据库，192.168.1.0/24表示IP地址前缀为192.168.1.X的主机都允许访问数据库服务器。</li><li>第5个字段表示验证方法，PostgreSQL支持的认证配置方式很多，最常用的认证方法是trust、reject、md5和ident方法。</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs http">#METHOD有如下值可选<br>md5：执行SCRAM-SHA-256或MD5身份验证加密密码来验证，是推荐使用的安全验证的方法<br>peer：从操作系统获取客户端的操作系统用户名，并检查它是否与请求的数据库用户名匹配。这仅适用于本地socket连接。<br>trust：允许无条件连接，允许任何PostgresQL用户身份登录，而无需密码或任何其他身份验证。<br>reject：拒绝任何条件连接，这对于从组中“过滤掉”某些主机非常有用。scram-sha-256：执行<br>SCRAM-SHA-256身份验证以验证用户的密码。<br>password：要提供未加密的密码以进行身份验证。由于密码是通过网络以明文形式发送的，因此不建议使用<br>gSS：使用GSSAPI对用户进行身份验证，这仅适用于TCP/IP连接。<br>sspi：使用SSPI对用户进行身份验证，这仅适用于windows。<br>ident：允许客户端上的特定操作系统用户连接到数据库。这种认证方式的使用场景是，客户端是主机上的某个操作系统用户，已经通过了操作系统的身份认证，是数据库服务器可以信任的用户，不需要在数据库层面再次检测身份。比如，如果配置了这种认证方式（配置中允许的用户名为dba)、这时在操作系统用户dba下，就能以数据库用户dba 的身份连接到数据库。服务器为了确定接收到的连接请求确实是客户端机器上的dba用户发起的，而不是这台机器上其他用户发起的假冒请求，会向客户端机器上的ident服务发起请求，让 ident服务查看此TCP连接是否是dba用户发起的，如果不是，说明是假冒，则认证失败。如果客户端通过本地连接到服务器，因为客户端与服务器在一台机器上，数据库服务器可以直接检查客户端用户的操作系统用户身份，就不需要向ident服务发送请求进行判断了。<br>1dap：使用LDAP服务器进行身份验证。<br>radiuS：使用RADIUS服务器进行身份验证。<br>cert：使用ssL客户端证书进行身份验证。<br>pam：使用操作系统提供的可插入身份验证模块（PAM）服务进行身份验证。bsd:使用操作系统提供的BSD身份验证服务进行身份验证。<br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">如果一台机器只给数据库使用，而没有其他用途，则可以在pg_hba.conf中加上下面一行配置：</span><br>local all all trust<br><span class="hljs-meta prompt_">#</span><span class="language-bash">该配置表示在这台机器上，任何操作系统的用户都可以使用任何数据库用户(包括数据库超级用户)连接到数据库而不需要任何密码。因为这台主机只供数据库使用，可以把不用的操作系统用户都禁止掉，以保证安全性。</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果数据库中有一个用户“dba”，操作系统中也有一个用户“dba”</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在操作系统<span class="hljs-string">&quot;dba”用户下连接数据库不需要密码验证的设置方法：</span></span><br>local all dba ident<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-string">如果想在数据库主机上使用密码验证，可以使用下面的配置项：</span></span><br>local all all md5<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-string">如果想让其他主机的连接都使用md5密码验证，则使用如下配置：</span></span><br>host al1 all 0.0.0.0/0 md5<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-string">允许用户通过10.0.0.0/24的远程主机进行md5验证登录</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-string">TYPEDATABASEUSERADDRESSMETHOD</span></span><br>hostallall10.0.0.0/24 md5<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-string">允许用户wang通过任意远程主机进行md5验证登录test数据库</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-string">TYPEDATABASEUSERADDRESSMETHOD</span></span><br>hosttestwang0.0.0.0/0md5<br></code></pre></td></tr></table></figure><h3 id="3-4-2打开远程连接"><a href="#3-4-2打开远程连接" class="headerlink" title="3.4.2打开远程连接"></a>3.4.2打开远程连接</h3><p>默认安装完的PG只监听1ocal。如果要远程连接，需要监听对外提供服务的IP地址。</p><p>范例：实现远程连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">修改用户postgres密码</span><br>[22:09:36 root@Master-DNS ~]#psql<br>psql (12.9)<br>Type &quot;help&quot; for help.<br><br>postgres=# alter user postgres with password &#x27;123456&#x27;;<br>ALTER ROLE<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看监听地址和端口，默认为127.0.0.1：5432</span><br>[22:12:56 postgres@Master-DNS ~]$ss -tnl<br>State          Recv-Q         Send-Q                 Local Address:Port                 Peer Address:Port         Process         <br>LISTEN         0              128                          0.0.0.0:22                        0.0.0.0:*                            <br>LISTEN         0              244                          0.0.0.0:5432                      0.0.0.0:*                            <br>LISTEN         0              244                        127.0.0.1:5433                      0.0.0.0:*  <br><br><br><br>[22:18:17 root@Master-DNS ~]#vim /pgsql/data/pg_hba.conf <br><span class="hljs-meta prompt_"># </span><span class="language-bash">IPv4 <span class="hljs-built_in">local</span> connections:</span><br>host    all             all             127.0.0.1/32            trust<br>host    all             all             10.0.0.0/24             md5<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启服务生效</span><br>[22:18:45 root@Master-DNS ~]#pg_ctl restart -D /pgsql/data<br>或者<br>pg_ctl restart -mf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">测试远程登录</span><br>[22:15:57 root@rocky8 ~]#psql -h 10.0.0.3 -p 5432 postgres postgres<br></code></pre></td></tr></table></figure><p>范例：利用.pgpass文件实现免密码连接远程posgresql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell">[22:31:43 root@rocky8 ~]#vim .pgpass<br><span class="hljs-meta prompt_">#</span><span class="language-bash">格式：hostname:port:database:username:password</span><br>10.0.0.3:5432:postgres:postgres:123456<br><br>[22:32:48 root@rocky8 ~]#chmod 600 .pgpass <br>[22:33:07 root@rocky8 ~]#ll .pgpass <br>-rw------- 1 root root 39 Sep 16 22:32 .pgpass<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">psq1默认连接本机，需要指定和.pgpass文件内容相匹配信息才可以使用.pgpass文件连接</span><br>[22:39:29 root@rocky8 ~]#psql -h 10.0.0.3 <br>psql (12.9)<br>Type &quot;help&quot; for help.<br><br>postgres=# \l<br>                                  List of databases<br>   Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges   <br>-----------+----------+----------+-------------+-------------+-----------------------<br> db1       | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | <br> postgres  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | <br> template0 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +<br>           |          |          |             |             | postgres=CTc/postgres<br> template1 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +<br>           |          |          |             |             | postgres=CTc/postgres<br>(4 rows)<br><br>postgres=# \c<br>You are now connected to database &quot;postgres&quot; as user &quot;postgres&quot;.<br><br><br></code></pre></td></tr></table></figure><h2 id="3-5常用操作"><a href="#3-5常用操作" class="headerlink" title="3.5常用操作"></a>3.5常用操作</h2><h3 id="3-5-1查看psql帮助"><a href="#3-5-1查看psql帮助" class="headerlink" title="3.5.1查看psql帮助"></a>3.5.1查看psql帮助</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">列出psq1帮助用法</span><br>help<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">列出以\开头的命令，即psq1的命令</span><br>\?<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">列出所有SQL命令的帮助，注意：SQL语句必须以；结束</span><br>\h<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看指定SQL的帮助</span><br>\h create database<br>\help create user<br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs shell">postgres=# help<br>You are using psql, the command-line interface to PostgreSQL.<br>Type:  \copyright for distribution terms<br>       \h for help with SQL commands<br>       \? for help with psql commands<br>       \g or terminate with semicolon to execute query<br>       \q to quit<br>postgres=# \?<br>General<br>  \copyright             show PostgreSQL usage and distribution terms<br>  \crosstabview [COLUMNS] execute query and display results in crosstab<br>  \errverbose            show most recent error message at maximum verbosity<br>  \g [FILE] or ;         execute query (and send results to file or |pipe)<br>  \gdesc                 describe result of query, without executing it<br>  \gexec                 execute query, then execute each value in its result<br>  \gset [PREFIX]         execute query and store results in psql variables<br>  \gx [FILE]             as \g, but forces expanded output mode<br>  \q                     quit psql<br>  \watch [SEC]           execute query every SEC seconds<br><br><br><br>postgres=# \h create database<br>Command:     CREATE DATABASE<br>Description: create a new database<br>Syntax:<br>CREATE DATABASE name<br>    [ [ WITH ] [ OWNER [=] user_name ]<br>           [ TEMPLATE [=] template ]<br>           [ ENCODING [=] encoding ]<br>           [ LC_COLLATE [=] lc_collate ]<br>           [ LC_CTYPE [=] lc_ctype ]<br>           [ TABLESPACE [=] tablespace_name ]<br>           [ ALLOW_CONNECTIONS [=] allowconn ]<br>           [ CONNECTION LIMIT [=] connlimit ]<br>           [ IS_TEMPLATE [=] istemplate ] ]<br><br>URL: https://www.postgresql.org/docs/12/sql-createdatabase.html<br><br>postgres=# \h create user<br>Command:     CREATE USER<br>Description: define a new database role<br>Syntax:<br>CREATE USER name [ [ WITH ] option [ ... ] ]<br><br>where option can be:<br><br>      SUPERUSER | NOSUPERUSER<br>    | CREATEDB | NOCREATEDB<br>    | CREATEROLE | NOCREATEROLE<br>    | INHERIT | NOINHERIT<br>    | LOGIN | NOLOGIN<br>    | REPLICATION | NOREPLICATION<br>    | BYPASSRLS | NOBYPASSRLS<br>    | CONNECTION LIMIT connlimit<br>    | [ ENCRYPTED ] PASSWORD &#x27;password&#x27; | PASSWORD NULL<br>    | VALID UNTIL &#x27;timestamp&#x27;<br>    | IN ROLE role_name [, ...]<br>    | IN GROUP role_name [, ...]<br>    | ROLE role_name [, ...]<br>    | ADMIN role_name [, ...]<br>    | USER role_name [, ...]<br>    | SYSID uid<br><br>URL: https://www.postgresql.org/docs/12/sql-createuser.html<br></code></pre></td></tr></table></figure><h3 id="3-5-2设置显示信息的格式"><a href="#3-5-2设置显示信息的格式" class="headerlink" title="3.5.2设置显示信息的格式"></a>3.5.2设置显示信息的格式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">后续查询将坚着显示，类似于MySQL中的\G</span><br>\x<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">开启命令执行时长提示</span><br>\timing on<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">显示详细的信息，可以打印出报出问题的源代码位置</span><br>\set VERBOSITY verbose<br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">postgres=# select pg_sleep(5);<br>-[ RECORD 1 ]<br>pg_sleep | <br><br>Time: 5007.283 ms (00:05.007)<br><br></code></pre></td></tr></table></figure><p>范例：查看出错对应的源代码位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">postgres=# \set VERBOSITY verbose<br>postgres=# select wang;<br>ERROR:  42703: column &quot;wang&quot; does not exist<br>LINE 1: select wang;<br>               ^<br>LOCATION:  errorMissingColumn, parse_relation.c:3359<br>Time: 1.357 ms<br><span class="hljs-meta prompt_">#</span><span class="language-bash">说明：错误对应的是parse_relation.c文件中的3349行中errorMissingColumn函数</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">找到错误位置</span><br>[22:50:54 postgres@Master-DNS ~]$find -name parse_relation.c<br>[22:50:56 postgres@Master-DNS ~]$vim +3349  `find -name parse_relation.c`<br></code></pre></td></tr></table></figure><h3 id="3-5-3数据库的创建和删除"><a href="#3-5-3数据库的创建和删除" class="headerlink" title="3.5.3数据库的创建和删除"></a>3.5.3数据库的创建和删除</h3><p>创建数据库可以使用SQL语句create database实现，也可以利用createdb命令创建数据库</p><p>createdb是一个SQL命令CREATE DATABASE的封装。</p><p>createdb 命令语法格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">createdb [option...] [dbname [description]]<br>参数说明：<br>options：参数可选项，可以是以下值：<br>-D tablespace指定数据库默认表空间。<br>-e 将createdb 生成的命令发送到服务端。<br>-E encoding指定数据库的编码。<br>-1 1ocale指定数据库的语言环境。<br>-T template指定创建此数据库的模板。<br>--help显示 createdb 命令的帮助信息。<br>-h host指定服务器的主机名。<br>-p port指定服务器监听的端口，或者 socket文件。<br>-U username连接数据库的用户名。<br>-w忽略输入密码。<br>-w连接时强制要求输入密码<br><br>dbname：要创建的数据库名。<br>description：关于新创建的数据库相关的说明。<br></code></pre></td></tr></table></figure><p>删除数据库可以使用SQL语句drop database 实现</p><p>范例：创建数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">方法1</span><br>[20:44:03 root@rocky8 ~]#createdb -h 10.0.0.3 -p 5432 -U postgres db2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">方法2</span><br>[20:44:36 root@Master-DNS ~]#psql<br>postgres=# create database db1;<br>CREATE DATABASE<br>postgres=# \l<br>                                  List of databases<br>   Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges   <br>-----------+----------+----------+-------------+-------------+-----------------------<br> db1       | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | <br> postgres  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | <br> template0 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +<br>           |          |          |             |             | postgres=CTc/postgres<br> template1 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +<br>           |          |          |             |             | postgres=CTc/postgres<br>(4 rows)<br><br><br></code></pre></td></tr></table></figure><p>范例：删除数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[20:44:36 root@Master-DNS ~]#psql<br>postgres=# drop database db1;<br></code></pre></td></tr></table></figure><p>范例：查看数据库存放目录的路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">postgres=# select oid,datname from pg_database;<br>  oid  |  datname  <br>-------+-----------<br> 12726 | postgres<br>     1 | template1<br> 12725 | template0<br> 16385 | testdb<br> 16386 | db2<br>(5 rows)<br><br>[20:49:55 root@Master-DNS ~]#ls /pgsql/data/base/<br>1  12725  12726  16385  16386<br><br></code></pre></td></tr></table></figure><h3 id="3-5-4管理和查看模式"><a href="#3-5-4管理和查看模式" class="headerlink" title="3.5.4管理和查看模式"></a>3.5.4管理和查看模式</h3><p>一个数据库包含一个或多个已命名的模式，模式又包含表。模式还可以包含其它对象，包括数据类型、函数、操作符等。同一个对象名可以在不同的模式里使用而不会导致冲突；比如，schema1和schema2都可以包含一个名为test的表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建模式</span><br>create schema schema_name;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除模式</span><br>drop schema schema_name;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">列出所有schema</span><br>postgres=# create table public.t1(id int);<br>postgres=# \dt<br>        List of relations<br> Schema | Name | Type  |  Owner   <br>--------+------+-------+----------<br> public | t1   | table | postgres<br>(1 row)<br><br>postgres=# create table public.t2(id int);<br>postgres=# \dn<br>  List of schemas<br>  Name  |  Owner   <br>--------+----------<br> public | postgres<br>(1 row)<br><br>postgres=# \dt<br>        List of relations<br> Schema | Name | Type  |  Owner   <br>--------+------+-------+----------<br> public | t1   | table | postgres<br> public | t2   | table | postgres<br>(2 rows)<br><br><br>postgres=# create schema xiaohexie;<br>CREATE SCHEMA<br>postgres=# create table xiaohexie.t2(id int);<br>CREATE TABLE<br>postgres=# \dt<br>        List of relations<br> Schema | Name | Type  |  Owner   <br>--------+------+-------+----------<br> public | t1   | table | postgres<br> public | t2   | table | postgres<br>(2 rows)<br><br>postgres=# \dn<br>   List of schemas<br>   Name    |  Owner   <br>-----------+----------<br> public    | postgres<br> xiaohexie | postgres<br>(2 rows)<br><br><br>postgres=# \dt xiaohexie.*;<br>          List of relations<br>  Schema   | Name | Type  |  Owner   <br>-----------+------+-------+----------<br> xiaohexie | t2   | table | postgres<br>(1 row)<br></code></pre></td></tr></table></figure><h3 id="3-5-5查看和连接数据库"><a href="#3-5-5查看和连接数据库" class="headerlink" title="3.5.5查看和连接数据库"></a>3.5.5查看和连接数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">列出所有数据库名，相当于MySQL中的show databases;</span><br>postgres=# \l<br>                                  List of databases<br>   Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges   <br>-----------+----------+----------+-------------+-------------+-----------------------<br> db2       | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | <br> postgres  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | <br> template0 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +<br>           |          |          |             |             | postgres=CTc/postgres<br> template1 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +<br>           |          |          |             |             | postgres=CTc/postgres<br> testdb    | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | <br>(5 rows)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">显示数据库详细信息，比如大小</span><br>postgres=# \l+<br>                                                                    List of databases<br>   Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges   |  Size   | Tablespace |                Descr<br>iption                 <br>-----------+----------+----------+-------------+-------------+-----------------------+---------+------------+---------------------<br>-----------------------<br> db2       | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                       | 7513 kB | pg_default | <br> postgres  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                       | 7665 kB | pg_default | default administrati<br>ve connection database<br> template0 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +| 7513 kB | pg_default | unmodifiable empty d<br>atabase<br>           |          |          |             |             | postgres=CTc/postgres |         |            | <br> template1 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +| 7513 kB | pg_default | default template for<br> new databases<br>           |          |          |             |             | postgres=CTc/postgres |         |            | <br> testdb    | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                       | 7513 kB | pg_default | <br>(5 rows)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看当前连接信息</span><br>postgres=# \c<br>You are now connected to database &quot;postgres&quot; as user &quot;postgres&quot;.<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看当前来南京详细信息</span><br>postgres=# \conninfo <br>You are connected to database &quot;postgres&quot; as user &quot;postgres&quot; via socket in &quot;/tmp&quot; at port &quot;5432&quot;.<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">连接数据库，相当于use</span><br><br><br>postgres=# \c db2<br>You are now connected to database &quot;db2&quot; as user &quot;postgres&quot;.<br><br></code></pre></td></tr></table></figure><h3 id="3-5-6管理表"><a href="#3-5-6管理表" class="headerlink" title="3.5.6管理表"></a>3.5.6管理表</h3><p>PostgreSQL支持多种数据类型实现表结构的创建</p><p>范例：查看支持数据类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">db2=# select typname from pg_type;<br>                typname                <br>---------------------------------------<br> bool<br> bytea<br> char<br> name<br> int8<br> int2<br> int2vector<br> int4<br> regproc<br> text<br> oid<br> tid<br> xid<br> cid<br> oidvector<br> pg_type<br> pg_attribute<br> pg_proc<br>............<br></code></pre></td></tr></table></figure><p>范例：管理表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs shell">testdb=# \c testdb <br>You are now connected to database &quot;testdb&quot; as user &quot;postgres&quot;.<br>testdb=# \d<br>Did not find any relations.<br>testdb=# create table tb1 (id serial primary key,name text );<br>CREATE TABLE<br>testdb=# \d<br>             List of relations<br> Schema |    Name    |   Type   |  Owner   <br>--------+------------+----------+----------<br> public | tb1        | table    | postgres<br> public | tb1_id_seq | sequence | postgres<br>(2 rows)<br><br><br>testdb=# insert into tb1 (name) select (md5(random()::text)) from generate_series(2,10);<br>INSERT 0 9<br>testdb=# select * from tb1; <br> id |               name               <br>----+----------------------------------<br>  1 | 132e3fcc509eac22115b11f105289c94<br>  2 | a49fef866f321e05a8de6711115b58c5<br>  3 | 92b46b11da21239a005d0a8a566b50fd<br>  4 | c471f760e94e2bf8774fbe63b4125fb2<br>  5 | be6dab02ab4dadf31ee9b6cfdf5018a2<br>  6 | ede4d47ca3326f8ef76d7eacb25bae44<br>  7 | 1a3cad7de238e4668201aa2d1a98bde5<br>  8 | 990a9c4e924be586da2e2b6886aa62ed<br>  9 | 6cfa64ea77ece1c0318eb8873d0914a9<br>(9 rows)<br><br><br><br><br>testdb=# insert  into  tb1 (name) values(&#x27;bb&#x27;) ;<br>INSERT 0 1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#PostgreSQL中插入100万条记录只需要花3s</span></span><br>testdb=# \timing on <br>Timing is on.<br>testdb=# insert into tb1 (name) select (md5(random()::text)) from generate_series (1,1000000);<br>INSERT 0 1000000<br>Time: 3184.463 ms (00:03.184)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">复制表结构，不复制数据</span><br>testdb=# create table tb2 (like tb1);<br>CREATE TABLE<br>Time: 7.417 ms<br>testdb=# \d tb2<br>                Table &quot;public.tb2&quot;<br> Column |  Type   | Collation | Nullable | Default <br>--------+---------+-----------+----------+---------<br> id     | integer |           | not null | <br> name   | text    |           |          | <br><br>testdb=# select * from tb2;<br> id | name <br>----+------<br>(0 rows)<br><br>Time: 0.494 ms<br>testdb=# drop table tb2;<br>DROP TABLE<br>testdb=# \d <br>             List of relations<br> Schema |    Name    |   Type   |  Owner   <br>--------+------------+----------+----------<br> public | tb1        | table    | postgres<br> public | tb1_id_seq | sequence | postgres<br><br></code></pre></td></tr></table></figure><h3 id="3-5-7查看表和表信息"><a href="#3-5-7查看表和表信息" class="headerlink" title="3.5.7查看表和表信息"></a>3.5.7查看表和表信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">列出所有表，视图，序列</span><br>\d<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">列出public的schema中所有的表名,相当于show tables;</span><br>\dt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看t1的表信息</span><br>\dt tl<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">支持通配符*和？，以下显示所有t开头的表</span><br>\dt t*<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">列出myschema模式的表结构</span><br>\dt myschema.*<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看t1的表结构，相当于desc</span><br>\d tl<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">列出所有表信息，包括大小</span><br>testdb=# \dt+<br>                    List of relations<br> Schema | Name | Type  |  Owner   |  Size  | Description <br>--------+------+-------+----------+--------+-------------<br> public | tb1  | table | postgres | 130 MB | <br>(1 row)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">列出表信息</span><br>testdb=# \dt tb1<br>        List of relations<br> Schema | Name | Type  |  Owner   <br>--------+------+-------+----------<br> public | tb1  | table | postgres<br>(1 row)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">列出表大小信息</span><br>testdb=# \dt+ tb1<br>                    List of relations<br> Schema | Name | Type  |  Owner   |  Size  | Description <br>--------+------+-------+----------+--------+-------------<br> public | tb1  | table | postgres | 130 MB | <br>(1 row)<br><br><br>testdb=# select * from pg_tables;<br>     schemaname     |        tablename        | tableowner | tablespace | hasindexes | hasrules | hastriggers | rowsecurity <br>--------------------+-------------------------+------------+------------+------------+----------+-------------+-------------<br> public             | tb1                     | postgres   |            | t          | f        | f           | f<br> pg_catalog         | pg_statistic            | postgres   |            | t          | f        | f           | f<br> pg_catalog         | pg_type                 | postgres   |            | t          | f        | f           | f<br> pg_catalog         | pg_foreign_server       | postgres   |            | t          | f        | f           | f<br> pg_catalog         | pg_authid               | postgres   | pg_global  | t          | f        | f           | f<br> pg_catalog         | pg_statistic_ext_data   | postgres   |            | t          | f        | f           | f<br> pg_catalog         | pg_user_mapping         | postgres   |            | t          | f        | f           | f<br> pg_catalog         | pg_subscription         | postgres   | pg_global  | t          | f        | f           | f<br> pg_catalog         | pg_attribute            | postgres   |            | t          | f        | f           | f<br> pg_catalog         | pg_proc                 | postgres   |            | t          | f        | f           | f<br> pg_catalog         | pg_class                | postgres   |            | t          | f        | f           | f<br> pg_catalog         | pg_attrdef              | postgres   |            | t          | f        | f           | f<br> pg_catalog         | pg_constraint           | postgres   |            | t          | f        | f           | f<br> pg_catalog         | pg_inherits             | postgres   |            | t          | f        | f           | f<br> pg_catalog         | pg_index                | postgres   |            | t          | f        | f           | f<br> pg_catalog         | pg_operator             | postgres   |            | t          | f        | f           | f<br> pg_catalog         | pg_opfamily             | postgres   |            | t          | f        | f           | f<br> pg_catalog         | pg_opclass              | postgre<br> <br> <br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_"> #</span><span class="language-bash">查看表大小</span><br> testdb=# select pg_total_relation_size(&#x27;tb1&#x27;);<br> pg_total_relation_size <br>------------------------<br>              181542912<br>(1 row)<br><br>Time: 0.463 ms<br>testdb=# select pg_total_relation_size(&#x27;tb1&#x27;)/1024/1024||&#x27;MB&#x27;;<br> ?column? <br>----------<br> 173MB<br>(1 row)<br><br>Time: 0.676 ms<br><br></code></pre></td></tr></table></figure><p>范例：查看表对应的文件径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看testdb数据库文件夹路径OID</span><br>testdb=#  select oid,datname  from pg_database where datname=&#x27;testdb&#x27;;<br>  oid  | datname <br>-------+---------<br> 16385 | testdb<br>(1 row)<br><br>Time: 0.292 ms<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看tb1表文件relid</span><br>testdb=# select relid from pg_stat_all_tables where relname=&#x27;tb1&#x27;;<br> relid <br>-------<br> 16399<br>(1 row)<br><br>Time: 0.503 ms<br><br><br>[21:49:19 root@Master-DNS ~]#ll /pgsql/data/base/16385/16399<br>-rw------- 1 postgres postgres 136536064 Sep 18 21:40 /pgsql/data/base/16385/16399<br></code></pre></td></tr></table></figure><p>范例：查看当前库中的所有表的统计信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs shell">testdb=# select * from pg_stat_all_tables;<br>testdb=# select * from pg_stat_all_tables;<br>-[ RECORD 1 ]-------+------------------------------<br>relid               | 2830<br>schemaname          | pg_toast<br>relname             | pg_toast_2604<br>seq_scan            | 0<br>seq_tup_read        | 0<br>idx_scan            | 0<br>idx_tup_fetch       | 0<br>n_tup_ins           | 0<br>n_tup_upd           | 0<br>n_tup_del           | 0<br>n_tup_hot_upd       | 0<br>n_live_tup          | 0<br>n_dead_tup          | 0<br>n_mod_since_analyze | 0<br>last_vacuum         | <br>last_autovacuum     | <br>last_analyze        | <br>last_autoanalyze    | <br>vacuum_count        | 0<br>autovacuum_count    | 0<br>analyze_count       | 0<br>autoanalyze_count   | 0<br>-[ RECORD 2 ]-------+------------------------------<br>relid               | 826<br>schemaname          | pg_catalog<br>relname             | pg_default_acl<br>seq_scan            | 0<br>seq_tup_read        | 0<br><br><br><br>testdb=# select * from pg_stat_all_tables where relname=&#x27;tb1&#x27;;<br>-[ RECORD 1 ]-------+------------------------------<br>relid               | 16399<br>schemaname          | public<br>relname             | tb1<br>seq_scan            | 3<br>seq_tup_read        | 19<br>idx_scan            | 0<br>idx_tup_fetch       | 0<br>n_tup_ins           | 2000010<br>n_tup_upd           | 0<br>n_tup_del           | 0<br>n_tup_hot_upd       | 0<br>n_live_tup          | 2000010<br>n_dead_tup          | 0<br>n_mod_since_analyze | 0<br>last_vacuum         | <br>last_autovacuum     | <br>last_analyze        | <br>last_autoanalyze    | 2023-09-18 21:33:24.583405+08<br>vacuum_count        | 0<br>autovacuum_count    | 0<br>analyze_count       | 0<br>autoanalyze_count   | 1<br><br>Time: 12.034 ms<br></code></pre></td></tr></table></figure><h3 id="3-5-8系统表-system-catalogs"><a href="#3-5-8系统表-system-catalogs" class="headerlink" title="3.5.8系统表(system catalogs)"></a>3.5.8系统表(system catalogs)</h3><p>官方文档</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">https://www.postgresql.org/docs/14/catalogs.html<br>http://www.postgres.cn/docs/12/catalogs.html<br></code></pre></td></tr></table></figure><p><strong>系统表的定义：</strong></p><p>系统表也称为系统目录(system catalogs)，是关系型数据库存放模式元数据的地方，比如表和列的信息，以及内部统计信息等。PostgreSQL的系统表也就是普通表。虽然可以删除并重建这些表、增加列、插入和更新数值，但会导致系统损坏。通常情况下，不应该手工修改系统目录，通过相关SQL命令去实现。例如：当执行CREATE DATABASE时会向系统表pg_database中插入一行记录，并且实际上在磁盘上创建该数据库。</p><p>系统表包括存放系统信息的普通表或者视图，系统视图建立在系统表之上</p><p><strong>系统表的创建</strong></p><p>pg的每一个数据库中都有一套自己的系统表，其中大多数系统表都是在数据库创建时从模板数据库中拷贝过来的</p><p><strong>系统表的维护</strong></p><p>系统表中的信息由相的SQL命令关联至系统表自动维护</p><p><strong>系统表的存储方式</strong>和数</p><p>据库相关的系统表保存在$PGDATA/base目录下相应数据库的文件夹下,文件夹命名为pg_database里记录的数据库oid(Object identifiers),系统表都有一个列名为对象标识符oid,用于标识postgres里各个对象，如表、序列、索引等，以前版本是隐藏的</p><p>所有数据库共享的系统表,如pg_database,保存在$PGDATA/global下</p><p>范例：查看系统表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs shell">testdb=# \dS<br>                         List of relations<br>   Schema   |              Name               |   Type   |  Owner   <br>------------+---------------------------------+----------+----------<br> pg_catalog | pg_aggregate                    | table    | postgres<br> pg_catalog | pg_am                           | table    | postgres<br> pg_catalog | pg_amop                         | table    | postgres<br> pg_catalog | pg_amproc                       | table    | postgres<br> pg_catalog | pg_attrdef                      | table    | postgres<br> pg_catalog | pg_attribute                    | table    | postgres<br> pg_catalog | pg_auth_members                 | table    | postgres<br> pg_catalog | pg_authid                       | table    | postgres<br> pg_catalog | pg_available_extension_versions | view     | postgres<br> pg_catalog | pg_available_extensions         | view     | postgres<br><br><br><br>testdb=# \dS+<br>                                       List of relations<br>   Schema   |              Name               |   Type   |  Owner   |    Size    | Description <br>------------+---------------------------------+----------+----------+------------+-------------<br> pg_catalog | pg_aggregate                    | table    | postgres | 56 kB      | <br> pg_catalog | pg_am                           | table    | postgres | 40 kB      | <br> pg_catalog | pg_amop                         | table    | postgres | 80 kB      | <br> pg_catalog | pg_amproc                       | table    | postgres | 56 kB      | <br> pg_catalog | pg_attrdef                      | table    | postgres | 16 kB      | <br> pg_catalog | pg_attribute                    | table    | postgres | 464 kB     | <br> pg_catalog | pg_auth_members                 | table    | postgres | 40 kB      | <br> pg_catalog | pg_authid                       | table    | postgres | 48 kB      | <br> pg_catalog | pg_available_extension_versions | view     | postgres | 0 bytes    | <br> pg_catalog | pg_available_extensions         | view     | postgres | 0 bytes    | <br> pg_catalog | pg_cast                         | table    | postgres | 48 kB      | <br><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">列出所有PG开头的系统表</span><br>testdb=# \dt pg_*<br>                    List of relations<br>   Schema   |          Name           | Type  |  Owner   <br>------------+-------------------------+-------+----------<br> pg_catalog | pg_aggregate            | table | postgres<br> pg_catalog | pg_am                   | table | postgres<br> pg_catalog | pg_amop                 | table | postgres<br> pg_catalog | pg_amproc               | table | postgres<br> pg_catalog | pg_attrdef              | table | postgres<br> <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">列出所有pg开头的系统视图</span><br>testdb=# \dv pg_*<br>                       List of relations<br>   Schema   |              Name               | Type |  Owner   <br>------------+---------------------------------+------+----------<br> pg_catalog | pg_available_extension_versions | view | postgres<br> pg_catalog | pg_available_extensions         | view | postgres<br> pg_catalog | pg_config                       | view | postgres<br> pg_catalog | pg_cursors                      | view | postgres<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看系统表pg_database</span><br>testdb=# \d pg_database<br>               Table &quot;pg_catalog.pg_database&quot;<br>    Column     |   Type    | Collation | Nullable | Default <br>---------------+-----------+-----------+----------+---------<br> oid           | oid       |           | not null | <br> datname       | name      |           | not null | <br> datdba        | oid       |           | not null | <br> encoding      | integer   |           | not null | <br> datcollate    | name      |           | not null | <br> datctype      | name      |           | not null | <br> datistemplate | boolean   |           | not null | <br> datallowconn  | boolean   |           | not null | <br> datconnlimit  | integer   |           | not null | <br> datlastsysoid | oid       |           | not null | <br> datfrozenxid  | xid       |           | not null | <br> datminmxid    | xid       |           | not null | <br> dattablespace | oid       |           | not null | <br> datacl        | aclitem[] |           |          | <br>Indexes:<br>    &quot;pg_database_datname_index&quot; UNIQUE, btree (datname), tablespace &quot;pg_global&quot;<br>    &quot;pg_database_oid_index&quot; UNIQUE, btree (oid), tablespace &quot;pg_global&quot;<br>Tablespace: &quot;pg_global&quot;<br><br>testdb=# \d pg_tables<br>              View &quot;pg_catalog.pg_tables&quot;<br>   Column    |  Type   | Collation | Nullable | Default <br>-------------+---------+-----------+----------+---------<br> schemaname  | name    |           |          | <br> tablename   | name    |           |          | <br> tableowner  | name    |           |          | <br> tablespace  | name    |           |          | <br> hasindexes  | boolean |           |          | <br> hasrules    | boolean |           |          | <br> hastriggers | boolean |           |          | <br> rowsecurity | boolean |           |          | <br><br></code></pre></td></tr></table></figure><p>范例：查看指定表对应的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">testdb=# select * from pg_relation_filepath(&#x27;tb1&#x27;);<br> pg_relation_filepath <br>----------------------<br> base/16385/16399<br>(1 row)<br><br>Time: 0.850 ms<br><br>[21:49:19 root@Master-DNS ~]#ll /pgsql/data/base/16385/16399<br>-rw------- 1 postgres postgres 136536064 Sep 18 21:40 /pgsql/data/base/16385/16399<br></code></pre></td></tr></table></figure><h3 id="3-5-9表的CRUD"><a href="#3-5-9表的CRUD" class="headerlink" title="3.5.9表的CRUD"></a>3.5.9表的CRUD</h3><p>SQL的CRUD,即Insert,update,delete,select 四条语句范例:：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs shell">testdb=# create table tb2 (id serial ,name varchar(10));<br>CREATE TABLE<br>Time: 1.782 ms<br>testdb=# \d tb2;<br>                                   Table &quot;public.tb2&quot;<br> Column |         Type          | Collation | Nullable |             Default             <br>--------+-----------------------+-----------+----------+---------------------------------<br> id     | integer               |           | not null | nextval(&#x27;tb2_id_seq&#x27;::regclass)<br> name   | character varying(10) |           |          | <br><br>testdb=# insert into tb2 (name) values(&#x27;a&#x27;);<br>INSERT 0 1<br>Time: 0.863 ms<br>testdb=# insert into tb2 (name) values(&#x27;b&#x27;);<br>INSERT 0 1<br>Time: 0.939 ms<br><br><br>testdb=#select *from tb2;<br> id | name <br>----+------<br>  1 | a<br>  2 | b<br>(2 rows)<br><br>Time: 0.753 ms<br><br>testdb=# update tb2 set name=&#x27;c&#x27; where id=&#x27;2&#x27;;<br>UPDATE 1<br>Time: 1.908 ms<br>testdb=# select *from tb2;<br> id | name <br>----+------<br>  1 | a<br>  2 | c<br>(2 rows)<br><br>Time: 0.696 ms<br><br>testdb=# delete from tb2 where id=1;<br>DELETE 1<br>Time: 1.343 ms<br>testdb=# select *from tb2;<br> id | name <br>----+------<br>  2 | c<br>(1 row)<br><br>Time: 0.369 ms<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">清空表</span><br>testdb=# truncate tb1;<br>TRUNCATE TABLE<br>Time: 17.382 ms<br>testdb=# select *from tb1;<br> id | name <br>----+------<br>(0 rows)<br><br>Time: 0.492 ms<br></code></pre></td></tr></table></figure><p>范例：查看表的列信息及大小</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">testdb=# \d tb2;<br>                                   Table &quot;public.tb2&quot;<br> Column |         Type          | Collation | Nullable |             Default             <br>--------+-----------------------+-----------+----------+---------------------------------<br> id     | integer               |           | not null | nextval(&#x27;tb2_id_seq&#x27;::regclass)<br> name   | character varying(10) |           |          | <br><br>testdb=# select pg_column_size(name),name from tb2;<br> pg_column_size | name <br>----------------+------<br>              2 | c<br>(1 row)<br><br>Time: 0.657 ms<br><br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">testdb=# select generate_series(3,6);<br> generate_series <br>-----------------<br>               3<br>               4<br>               5<br>               6<br>(4 rows)<br><br>Time: 0.396 ms<br><br></code></pre></td></tr></table></figure><h3 id="3-5-10索引管理"><a href="#3-5-10索引管理" class="headerlink" title="3.5.10索引管理"></a>3.5.10索引管理</h3><p>范例：创建和删除索引</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs shell">testdb=# create table tb3(id int ,info text,crt_time timestamp);<br>CREATE TABLE<br>Time: 1.983 ms<br>Time: 0.156 ms<br>testdb=# insert into tb3 select generate_series(1,100000),md5(random()::text),clock_timestamp();<br>INSERT 0 100000<br>Time: 89.557 ms<br>testdb=# select * from tb3 limit<br><br>testdb=# select * from tb3 limit<br><br>testdb=# select * from tb3 limit 3;<br> id |               info               |          crt_time          <br>----+----------------------------------+----------------------------<br>  1 | 807fa46a88b8ab5e45bd61be7b18e9e9 | 2023-09-18 22:35:03.679105<br>  2 | 63915e1784a5097c2f283252c488092e | 2023-09-18 22:35:03.679251<br>  3 | ccfb37b70d8be4c5de76debf6fabd1bd | 2023-09-18 22:35:03.679254<br>(3 rows)<br><br>Time: 0.354 ms<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建索引</span><br>testdb=# create index idx_tb3_id on tb3(id);<br>CREATE INDEX<br>Time: 20.280 ms<br>testdb=# \d tb3<br>                           Table &quot;public.tb3&quot;<br>  Column  |            Type             | Collation | Nullable | Default <br>----------+-----------------------------+-----------+----------+---------<br> id       | integer                     |           |          | <br> info     | text                        |           |          | <br> crt_time | timestamp without time zone |           |          | <br>Indexes:<br>    &quot;idx_tb3_id&quot; btree (id)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除索引</span><br>testdb=# drop index idx_tb3_id ;<br>DROP INDEX<br>Time: 1.694 ms<br>testdb=# \d tb3<br>                           Table &quot;public.tb3&quot;<br>  Column  |            Type             | Collation | Nullable | Default <br>----------+-----------------------------+-----------+----------+---------<br> id       | integer                     |           |          | <br> info     | text                        |           |          | <br> crt_time | timestamp without time zone |           |          | <br><br></code></pre></td></tr></table></figure><p>范例：使用索引</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">打开时间</span><br>testdb=# \timing on<br>Timing is on.<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查询条件是索引列</span><br>testdb=# explain analyze select * from tb3 where id = 99999;<br>                                                   QUERY PLAN                                                    <br>-----------------------------------------------------------------------------------------------------------------<br> Index Scan using idx_tb3_id on tb3  (cost=0.29..8.31 rows=1 width=45) (actual time=0.008..0.008 rows=1 loops=1)<br>   Index Cond: (id = 99999)<br> Planning Time: 0.129 ms<br> Execution Time: 0.026 ms<br>(4 rows)<br><br>Time: 0.406 ms<br><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查询条件不是索引列</span><br>testdb=# explain analyze select * from tb3 where id = 99999;<br>                                           QUERY PLAN                                            <br>-------------------------------------------------------------------------------------------------<br> Seq Scan on tb3  (cost=0.00..2185.00 rows=1 width=45) (actual time=3.982..3.983 rows=1 loops=1)<br>   Filter: (id = 99999)<br>   Rows Removed by Filter: 99999<br> Planning Time: 0.085 ms<br> Execution Time: 3.997 ms<br>(5 rows)<br><br>Time: 4.599 ms<br><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">关闭索引</span><br>testdb=# set enable_indexscan =off;<br>SET<br>Time: 0.144 ms<br>testdb=# set enable_bitmapscan =off;<br>SET<br>Time: 0.122 ms<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">再次查询全表扫描</span><br>testdb=# explain analyze select * from tb3 where id = 99999;<br>                                           QUERY PLAN                                            <br>-------------------------------------------------------------------------------------------------<br> Seq Scan on tb3  (cost=0.00..2185.00 rows=1 width=45) (actual time=3.849..3.850 rows=1 loops=1)<br>   Filter: (id = 99999)<br>   Rows Removed by Filter: 99999<br> Planning Time: 0.042 ms<br> Execution Time: 3.861 ms<br>(5 rows)<br><br>Time: 4.155 ms<br><br>testdb=# explain (analyze,verbose,costs,buffers,timing) select * from tb3 where id = 99999;<br>                                               QUERY PLAN                                               <br>--------------------------------------------------------------------------------------------------------<br> Seq Scan on public.tb3  (cost=0.00..2185.00 rows=1 width=45) (actual time=4.357..4.358 rows=1 loops=1)<br>   Output: id, info, crt_time<br>   Filter: (tb3.id = 99999)<br>   Rows Removed by Filter: 99999<br>   Buffers: shared hit=935<br> Planning Time: 0.039 ms<br> Execution Time: 4.370 ms<br>(7 rows)<br><br>Time: 4.730 ms<br><br></code></pre></td></tr></table></figure><h3 id="3-5-11表空间"><a href="#3-5-11表空间" class="headerlink" title="3.5.11表空间"></a>3.5.11表空间</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">列出所有表空间，实际上PostgresQL中的表空间就是对应一个目录，放在这个表空间的表，就是把表的数据文件放到这个表空间下。</span><br>hellodb=# select * from teachers;<br> tid |     name      | age | gender <br>-----+---------------+-----+--------<br>   1 | Song Jiang    |  45 | M<br>   2 | Zhang Sanfeng |  94 | M<br>   3 | Miejue Shitai |  77 | F<br>   4 | Lin Chaoying  |  93 | F<br>(4 rows)<br><br>hellodb=# copy teachers to &#x27;/tmp/teachers1.txt&#x27;;<br>COPY 4<br><br>[22:19:46 root@Master-DNS ~]#cat /tmp/teachers1.txt<br>1Song Jiang45M<br>2Zhang Sanfeng94M<br>3Miejue Shitai77F<br>4Lin Chaoying93F<br><br></code></pre></td></tr></table></figure><p>范例：表空间pg_tblspc目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">[22:52:08 postgres@Master-DNS ~]$mkdir ts1<br>[22:52:16 postgres@Master-DNS ~]$psql testdb<br>psql (12.9)<br>Type &quot;help&quot; for help.<br><br>testdb=# create tablespace ts1 location &#x27;/home/postgres/ts1/&#x27;;<br>CREATE TABLESPACE<br>testdb=# \db<br>            List of tablespaces<br>    Name    |  Owner   |      Location      <br>------------+----------+--------------------<br> pg_default | postgres | <br> pg_global  | postgres | <br> ts1        | postgres | /home/postgres/ts1<br>(3 rows)<br>[22:54:24 postgres@Master-DNS ~]$readlink /pgsql/data/pg_tblspc/16472/ /home/postgres/ts1/<br><br></code></pre></td></tr></table></figure><p>范例：查看表空间对应的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">[22:58:03 postgres@Master-DNS ~]$mkdir /tmp/tbs1<br>[22:58:08 postgres@Master-DNS ~]$psql<br>testdb=# create tablespace tbs1 location &#x27;/tmp/tbs1&#x27;;<br>CREATE TABLESPACE<br>testdb=# create table tbs1 (id int ) tablespace tbs1;<br>CREATE TABLE<br>testdb=# select * from pg_relation_filepath (&#x27;tbs1&#x27;);<br>            pg_relation_filepath             <br>---------------------------------------------<br> pg_tblspc/16480/PG_12_201909212/16385/16481<br>(1 row)<br><br><br>[23:03:25 root@Master-DNS ~]#tree /pgsql/data/pg_tblspc/<br>/pgsql/data/pg_tblspc/<br>├── 16472 -&gt; /home/postgres/ts1<br>└── 16480 -&gt; /tmp/tbs1<br><br>2 directories, 0 files<br>[23:03:27 root@Master-DNS ~]#tree /tmp/tbs1/<br>/tmp/tbs1/<br>└── PG_12_201909212<br>    └── 16385<br>        └── 16481<br><br>2 directories, 1 file<br><br></code></pre></td></tr></table></figure><h3 id="3-5-12查看系统信息"><a href="#3-5-12查看系统信息" class="headerlink" title="3.5.12查看系统信息"></a>3.5.12查看系统信息</h3><p>可以通过系统函数查看系统信息，也可以通过show/set查看和修改配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看版本信息</span><br>testdb=# select version ();<br>                                                 version                                                 <br>---------------------------------------------------------------------------------------------------------<br> PostgreSQL 12.9 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18), 64-bit<br>(1 row)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看数据库启动时间</span><br>testdb=# select pg_postmaster_start_time();<br>  pg_postmaster_start_time   <br>-----------------------------<br> 2023-09-18 15:02:06.5084+08<br>(1 row)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看加载配置文件时间</span><br>testdb=# select pg_conf_load_time();<br>       pg_conf_load_time       <br>-------------------------------<br> 2023-09-18 23:09:33.130267+08<br>(1 row)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看时区和时间</span><br>testdb=# show timezone;<br>   TimeZone    <br>---------------<br> Asia/Shanghai<br>(1 row)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">临时修改</span><br>testdb=# set timezone=&#x27;Africa/Abidjan&#x27;;<br>SET<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">永久修改</span><br>[23:14:23 root@Master-DNS ~]#vim /pgsql/data/postgresql.conf<br>timezone = &#x27;Asia/Shanghai&#x27;<br>[23:19:17 postgres@Master-DNS ~]$pg_ctl reload<br>server signaled<br><br>postgres=# select now();<br>             now              <br>------------------------------<br> 2023-09-18 23:20:10.35019+08<br>(1 row)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看当前用户</span><br>postgres=# select user;<br>   user   <br>----------<br> postgres<br>(1 row)<br><br>postgres=# select current_user;<br> current_user <br>--------------<br> postgres<br>(1 row)<br><br>postgres=# select session_user;<br> session_user <br>--------------<br> postgres<br>(1 row)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看当前数据库</span><br>postgres=# \c <br>You are now connected to database &quot;postgres&quot; as user &quot;postgres&quot;.<br>postgres=# select current_database();<br> current_database <br>------------------<br> postgres<br>(1 row)<br><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看当前session所在的客户端IP和端口</span><br>postgres=# select inet_client_addr(),inet_client_port();<br> inet_client_addr | inet_client_port <br>------------------+------------------<br>                  |                 <br>(1 row)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看当前session所连接的数据库服务器的IP和端口</span><br>postgres=# select inet_server_addr(),inet_server_port();<br> inet_server_addr | inet_server_port <br>------------------+------------------<br>                  |                 <br>(1 row)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查询当前session对应的后台服务时进程PID</span><br>postgres=# select pg_backend_pid();<br> pg_backend_pid <br>----------------<br>           1671<br>(1 row)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看当前内置变量</span><br>postgres=# \set<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看当前指定配置</span><br>postgres=# show max_connections ;<br> max_connections <br>-----------------<br> 100<br>(1 row)<br><br>postgres=# select current_setting(&#x27;max&#x27;)<br><br>postgres=# select current_setting(&#x27;max_connections&#x27;);<br> current_setting <br>-----------------<br> 100<br>(1 row)<br><br>postgres=# select current_setting(&#x27;listen_addresses&#x27;);<br> current_setting <br>-----------------<br> *<br>(1 row)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看系统函数</span><br>postgres=# \dfS+<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看连接数</span><br>postgres=# select count(*) from pg_stat_activity;<br>count<br>7<br>(1 row)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看最大连接数</span><br>postgres=# select setting from pg_settings where name = &#x27;max_connections&#x27;;<br>setting<br>100<br>(1 row)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看所有设置名称</span><br>postgres=# select name from pg_settings;<br>name<br>allow_system_table_mods<br>application_name<br>archive_cleanup_command<br>archive_command<br>archive_mode<br>archive_timeout<br>array_nulls<br>authentication_timeout<br>autovacuum<br>autovacuum_analyze_scale_factor<br>autovacuum_analyze_threshold<br>autovacuum_freeze_max_age<br>autovacuum_max_workers<br>..........<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看当前设置名和值</span><br>postgres=# select name,setting from pg_settings;<br>                  name                  |            setting             <br>----------------------------------------+--------------------------------<br> allow_system_table_mods                | off<br> application_name                       | psql<br> archive_cleanup_command                | <br> archive_command                        | (disabled)<br> archive_mode                           | off<br> archive_timeout                        | 0<br> array_nulls                            | on<br> authentication_timeout                 | 60<br> autovacuum                             | on<br> autovacuum_analyze_scale_factor        | 0.1<br> autovacuum_analyze_threshold           | 50<br> autovacuum_freeze_max_age              | 200000000<br> autovacuum_max_workers                 | 3<br> autovacuum_multixact_freeze_max_age    | 400000000<br> autovacuum_naptime                     | 60<br> autovacuum_vacuum_cost_delay           | 2<br> autovacuum_vacuum_cost_limit           | -1<br> autovacuum_vacuum_scale_factor         | 0.2<br><br>.......<br><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看指定的当前额参数和设置</span><br>postgres=# show port;<br> port <br>------<br> 5432<br>(1 row)<br><br>postgres=# show archive_mode;<br> archive_mode <br>--------------<br> off<br>(1 row)<br><br></code></pre></td></tr></table></figure><p>范例：show和set查看和修改配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看参数</span><br>postgres=# show all;<br>                  name                  |            setting             |                                                        <br>  description                                                          <br>----------------------------------------+--------------------------------+--------------------------------------------------------<br>-----------------------------------------------------------------------<br> allow_system_table_mods                | off                            | Allows modifications of the structure of system tables.<br> application_name                       | psql                           | Sets the application name to be reported in statistics <br>and logs.<br> archive_cleanup_command                |                                | Sets the shell command that will be executed at every r<br>estart point.<br> archive_command                        | (disabled)                     | Sets the shell command that will be called to archive a<br> WAL file.<br> archive_mode                           | off                            | Allows archiving of WAL files using archive_command.<br> archive_timeout                        | 0                              | Forces a switch to the next WAL file if a new file has <br>not been started within N seconds.<br> array_nulls                            | on                             | Enable input of NULL elements in arrays.<br> authentication_timeout                 | 1min                           | Sets the maximum allowed time to complete client authen<br>tication.<br><br><br>postgres=# show maintenance_work_mem ;<br> maintenance_work_mem <br>----------------------<br> 64MB<br>(1 row)<br><br>postgres=# set maintenance_work_mem to &#x27;128MB&#x27;;<br>SET<br>postgres=# show maintenance_work_mem ;<br> maintenance_work_mem <br>----------------------<br> 128MB<br>(1 row)<br><span class="hljs-meta prompt_">#</span><span class="language-bash">注意：不是所有的配置都可以直接修改的</span><br>postgres=# set max_connections to &#x27;200&#x27;;<br>ERROR:  parameter &quot;max_connections&quot; cannot be changed without restarting the server<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看数据库的大学，pg_size_pretty函数会把数字以MB，GB等易读格式显示</span><br>postgres=# select pg_database_size(&#x27;hellodb&#x27;),pg_size_pretty(pg_database_size(&#x27;hellodb&#x27;));<br> pg_database_size | pg_size_pretty <br>------------------+----------------<br>          7897603 | 7713 kB<br>(1 row)<br></code></pre></td></tr></table></figure><p>范例：explain可以查看SQL的执行计划</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">explain可以查看SQL的执行计划</span><br>hellodb=#explain select * from students;<br>                         QUERY PLAN                          <br>-------------------------------------------------------------<br> Seq Scan on students  (cost=0.00..14.90 rows=490 width=138)<br>(1 row)<br><br><br>hellodb=# explain analyze select * from students;<br>                                               QUERY PLAN                                               <br>--------------------------------------------------------------------------------------------------------<br> Seq Scan on students  (cost=0.00..14.90 rows=490 width=138) (actual time=4.891..4.894 rows=25 loops=1)<br> Planning Time: 0.027 ms<br> Execution Time: 4.903 ms<br>(3 rows)<br><br>hellodb=# explain analyze verbose select * from students;<br>                                                  QUERY PLAN                                                   <br>---------------------------------------------------------------------------------------------------------------<br> Seq Scan on public.students  (cost=0.00..14.90 rows=490 width=138) (actual time=0.005..0.007 rows=25 loops=1)<br>   Output: stuid, name, age, gender, classid, teacherid<br> Planning Time: 0.026 ms<br> Execution Time: 0.015 ms<br>(4 rows)<br><br></code></pre></td></tr></table></figure><h3 id="3-5-13查看用户和权限"><a href="#3-5-13查看用户和权限" class="headerlink" title="3.5.13查看用户和权限"></a>3.5.13查看用户和权限</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看所有用户\<span class="hljs-built_in">du</span>或者\dg</span><br><span class="hljs-meta prompt_">hellodb-# </span><span class="language-bash">\<span class="hljs-built_in">du</span></span><br>                                   List of roles<br> Role name |                         Attributes                         | Member of <br>-----------+------------------------------------------------------------+-----------<br> postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | &#123;&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">hellodb-# </span><span class="language-bash">\dg</span><br>                                   List of roles<br> Role name |                         Attributes                         | Member of <br>-----------+------------------------------------------------------------+-----------<br> postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | &#123;&#125;<br><br><br><br>hellodb=# select user;<br>   user   <br>----------<br> postgres<br>(1 row)<br><br>hellodb=# select current<br><br>hellodb=# select current_user;<br> current_user <br>--------------<br> postgres<br>(1 row)<br><br>hellodb=# \z<br>                              Access privileges<br> Schema |   Name   | Type  | Access privileges | Column privileges | Policies <br>--------+----------+-------+-------------------+-------------------+----------<br> public | classes  | table |                   |                   | <br> public | coc      | table |                   |                   | <br> public | courses  | table |                   |                   | <br> public | scores   | table |                   |                   | <br> public | students | table |                   |                   | <br> public | teachers | table |                   |                   | <br> public | toc      | table |                   |                   | <br>(7 rows)<br><br>hellodb=# \z t1<br>                            Access privileges<br> Schema | Name | Type | Access privileges | Column privileges | Policies <br>--------+------+------+-------------------+-------------------+----------<br>(0 rows)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">和\z功能相同</span><br>hellodb=# \dp<br>                              Access privileges<br> Schema |   Name   | Type  | Access privileges | Column privileges | Policies <br>--------+----------+-------+-------------------+-------------------+----------<br> public | classes  | table |                   |                   | <br> public | coc      | table |                   |                   | <br> public | courses  | table |                   |                   | <br><br></code></pre></td></tr></table></figure><h3 id="3-5-14事务管理和锁"><a href="#3-5-14事务管理和锁" class="headerlink" title="3.5.14事务管理和锁"></a>3.5.14事务管理和锁</h3><p>PGSQL的事务中支持DML,DDL(除了create database,create tablespace),DCL</p><p>在psql中事务是自动提交的。和MySQL相同，执行完一条delete或update语句后，事务就自动提交了如果不想自动提交，方法有两种。</p><p>方法一：运行begin;命令,然后执行DML,DDL,DCL等语句，最后再执行commit或rollback语句。</p><p>方法二：直接使用psql中的命令关闭自动提交的功能。\set AUTOCOMMIT off,注意，命令中的AUTOCOMMIT是大写的，不能使用小写，如果使用小写、虽然不会报错，但会导致关闭自动提交的操作不起作用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">开始事务</span><br>BEGIN [ISOLATION LEVEL &#123; SERIALIZABLE | REPEATABLE READ | READ COMMITTED | READUNCOMMITTED &#125;]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">提交和取消事务</span><br>COMMIT|ENDROLLBACK<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">关闭自动提交，可以用ro11back取消DML语句</span><br>\set AUTOCOMMIT off<br>\set AUTOCOMMIT on<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看AUTOCOMMIT状态</span><br>\echo :AUTOCOMMIT<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看事务ID</span><br>select txid_current();<br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs shell">testdb=# begin;<br>BEGIN<br>testdb=# create table tb5 (id int);<br>CREATE TABLE<br>testdb=# insert into tb5 values (1);<br>INSERT 0 1<br>testdb=# select * from tb5;<br> id <br>----<br>  1<br>(1 row)<br><br>testdb=# commit ;<br>COMMIT<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看事务<span class="hljs-built_in">id</span></span><br>testdb=# select txid_current();<br> txid_current <br>--------------<br>          544<br>(1 row)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">事务块中不支持create database</span><br>testdb=# begin;<br>BEGIN<br>testdb=# create database db55;<br>ERROR:  CREATE DATABASE cannot run inside a transaction block<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看ctid（数据所在的数据块的编号及位移），Xmin（插入事务XID），Xmax（删除记录的事务XID）</span><br>testdb=# select ctid,xmin,xmax,* from tb3;<br>   ctid    | xmin | xmax |   id   |               info               |          crt_time          <br>-----------+------+------+--------+----------------------------------+----------------------------<br> (0,1)     |  527 |    0 |      1 | 807fa46a88b8ab5e45bd61be7b18e9e9 | 2023-09-18 22:35:03.679105<br> (0,2)     |  527 |    0 |      2 | 63915e1784a5097c2f283252c488092e | 2023-09-18 22:35:03.679251<br> (0,3)     |  527 |    0 |      3 | ccfb37b70d8be4c5de76debf6fabd1bd | 2023-09-18 22:35:03.679254<br> (0,4)     |  527 |    0 |      4 | 714f28197e1563a941936812dfcd8326 | 2023-09-18 22:35:03.679255<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看锁信息</span><br>testdb=# select relation::regclass,* from  pg_locks;<br> relation |  locktype  | database | relation | page | tuple | virtualxid | transactionid | classid | objid<br> | objsubid | virtualtransaction | pid  |      mode       | granted | fastpath <br>----------+------------+----------+----------+------+-------+------------+---------------+---------+------<br>-+----------+--------------------+------+-----------------+---------+----------<br> pg_locks | relation   |    16385 |    12143 |      |       |            |               |         |      <br> |          | 4/7                | 2832 | AccessShareLock | t       | t<br>          | virtualxid |          |          |      |       | 4/7        |               |         |      <br> |          | 4/7                | 2832 | ExclusiveLock   | t       | t<br>(2 rows)<br><br></code></pre></td></tr></table></figure><h3 id="3-5-15常用的系统函数"><a href="#3-5-15常用的系统函数" class="headerlink" title="3.5.15常用的系统函数"></a>3.5.15常用的系统函数</h3><p>官方内置系统函数帮助</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http">#通过内置函数实现<br>http://postgres.cn/docs/12/functions-info.htm1<br>http://postgres.cn/docs/12/functions-admin.html<br></code></pre></td></tr></table></figure><p>常用系统函数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看当前日志文件1sn位置；</span><br>select pg_current_wal_lsn();<br>select pg_current_xlog_location();<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">当前xlog buffer中的insert位置,注意和上面pg_current_xlog_location(O的区别：</span><br>SELECT pg_current_wal_insert_lsn();<br>select pg_current_xlog_insert_location();<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看某个1sn对应的日志名：</span><br>select pg_walfile_name(lsn) ;<br>select pg_xlogfile_name(1sn);<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看某个1sn在日志中的偏移量：</span><br>select pg_walfile_name_offset(&#x27;lsn号&#x27;);<br>select pg_xlogfile_name_offset(&#x27;1sn号&#x27;);<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看两个1sn位置的差距；</span><br>select pg_wal_1sn_diff(&#x27;1sn号&#x27;,&#x27;1sn号&#x27;);<br>select pg_xlog_location_diff(&#x27;1sn号&#x27;,&#x27;1sn号&#x27;);<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看备库接收到的1sn位置：</span><br>select pg_last_wal_receive_lsn0;<br>select pg_last_xlog_receive_location();<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看备库回放的1sn位置：</span><br>select pg_last_xact_replay_timestamp();<br>select pg_last_xlog_relay_locationO;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建还原点：</span><br>select pg_create_restore_point(nowO::text);<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看表的数据文件路径，filenode：</span><br>select pg_relation_filenode(&#x27;表名&#x27;);<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看表students的oid:</span><br>select &#x27;students&#x27;::regclass::oid;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看当前会话pid：</span><br>select pg_backend_pid();<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">生成序列：</span><br>select generate_series (1,8,2);<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">生成uuid（pg13新特性）：</span><br>select gen_random_uuid();<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重载配置文件信息：</span><br>select pg_reload_conf();<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看数据库启动时间：</span><br>select pg_postmaster_start_time();<br></code></pre></td></tr></table></figure><h2 id="3-6用户和角色"><a href="#3-6用户和角色" class="headerlink" title="3.6用户和角色"></a>3.6用户和角色</h2><p>PostgresQL使用角色role的概念来管理数据库访问权限。角色是一系列相关权限的集合。为了管理方便，通常会把一系列相关的数据库权限赋给一个角色，如果哪个用户需要这些权限，就把角色赋给相应的用户。由于用户也拥有一系列的相关权限，为了简化管理，在PostgreSQL中，角色与用户是没有区别的，一个用户也是一个角色，因此可以把一个用户的权限赋给另一个用户。</p><p>用户和角色在整个数据库实例中都是全局的，即在同一个实例中的不同数据库中，看到的用户也都是相同的。</p><p>在初始化数据库实例时，会创建一个预定义的超级用户，这个用户的名称与初始化该数据库实例的操作系统用户名相同。比如：如果数据库实例是建立在操作系统用户dba（通常使用postgres 用户)下的，这个数据库超级用户的名称也会叫dba。可以用这个超级用户连接数据库，注意：dba默认会连接同名的数据库dba，而默认dba不存在，所以需要登录时指定连接数据库postgres进行登录，然后再创建其它的用户</p><h3 id="3-6-1创建用户和角色"><a href="#3-6-1创建用户和角色" class="headerlink" title="3.6.1创建用户和角色"></a>3.6.1创建用户和角色</h3><p>在PostgreSQL中，用户与角色是没有区别的。</p><p>用户和角色可以用来实现以下功能：</p><ul><li>用来登录数据库实例、</li><li>管理数据库对象</li></ul><p>创建用户与角色的语法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">CREATE USER name [[WITH] option [ ...]]<br>CREATE ROLE name [[WITH] option [ ...]]<br><span class="hljs-meta prompt_">#</span><span class="language-bash">上面两个命令都可以创建用户，不同的是CREATE USER创建的用户默认可以登录，而CREATE ROLE不可以登录</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">除了CREATE USER默认创建出来的用户有LOGIN的权限，而CREATE ROLE 创建出来的用户没有“LOGIN”的权限之外，CREATE RULE 与 CREATE USER没有其他任何的区别。</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">上面语法中的“option”可以是如下内容。</span><br>SUPERUSER|NOSUPERUSER：表示创建出来的用户是否为超级用户。只有超级用户才能创建超级用户。<br>CREATEDB /NOCREATEDB：指定创建出来的用户是否有执行“CREATE DATABASE&#x27;的权限。<br>CREATEROLE NOCREATEROLE：指定创建出来的用户是否有创建其他角色的权限。<br>CREATEUSER NOCREATEUSER：指定创建出来的用户是否有创建其他用户的权限。<br>INHERIT |NOINHERIT：如果创建的一个用户拥有某一个或某几个角色，这时若指定INHERIT，则表示用户自动拥有相应角色的权限，否则这个用户没有该角色的权限。<br>LOGIN|NOLOGIN：指定创建出来的用户是否有“LOGIN”的权限，可以临时地禁止一个用户的“LOGIN”权限，这时此用户就不能连接到数据库<br>CONNECTION LIMIT connlimit：指定该用户可以使用的并发连接数量。默认值是-1，表示没有限制。<br>[ENCRYPTED | UNENCRYPTED ] PASSWORD&#x27;paSSWord&#x27;：用于控制存储在系统表里面的口令是否加密。<br>VALID UNTIL&#x27;timestamp&#x27;：密码失效时间，如果不指定这个子句，那么口令将永远有效。<br>INROLE role name [，...]：指定用户成为哪些角色的成员，请注意没有任何选项可以把新角色添加为管理员，必须使用独立的GRANT命令来做这件事情。<br>IN GROUP role_name [,...]:与IN ROLE相同,是已过时的语法。<br>ROLE role_name [,...]:role_name将成为这个新建的角色的成员。<br>ADMIN role_name[,...]:role_name将有这个新建角色的WITH ADMIN OPTION权限。<br>USER role_name[,…]:与ROLE子句相同,但已过时。<br>SYSID uid：此子句主要是为了SQL向下兼容，实际没有什么用处。<br></code></pre></td></tr></table></figure><h3 id="3-6-2用户管理案例"><a href="#3-6-2用户管理案例" class="headerlink" title="3.6.2用户管理案例"></a>3.6.2用户管理案例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看帮助</span><br>\h create user<br>\h alter user<br>\h drop user<br>\h create role<br>\h alter role<br>\h drop role<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">以下两个命令用法相似</span><br>create user#创建的用户默认可以连接<br>create role#创建的用户默认无法连接<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改用户</span><br>alter user<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除用户</span><br>drop user<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">显出所有用户和角色</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">\<span class="hljs-built_in">du</span>和\dg命令等价。原因是在PostgreSQL数据库中用户和角色不分的。</span><br>\du<br>\dg<br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建可以登录的用户和密码</span><br>create user wang with password &#x27;123456&#x27;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建不可登录用户</span><br>create role zhao with password &#x27;123456&#x27;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建可以连接的用户</span><br>create role li with login password &#x27;123456&#x27; valid until &#x27;2025-12-31&#x27;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建管理员</span><br>create role admin with superuser login password &#x27;123456&#x27;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建复制用户</span><br>create role repl replication login  encrypted password &#x27;123456&#x27;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改密码</span><br>alter user admin with password &#x27;12345678&#x27;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改权限和密码</span><br>alter user wang with nologin password &#x27;123&#x27;;<br>alter user zhao with login ;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除用户</span><br>drop user zhao ;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看用户信息</span><br>\du<br><br>                                   List of roles<br> Role name |                         Attributes                         | Member of <br>-----------+------------------------------------------------------------+-----------<br> admin     | Superuser                                                  | &#123;&#125;<br> li        | Password valid until 2025-12-31 00:00:00+08                | &#123;&#125;<br> postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | &#123;&#125;<br> repl      | Replication                                                | &#123;&#125;<br> wang      | Cannot login                                               | &#123;&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看指定用户信息</span><br>\du wang<br><br>            List of roles<br> Role name |  Attributes  | Member of <br>-----------+--------------+-----------<br> wang      | Cannot login | &#123;&#125;<br><br></code></pre></td></tr></table></figure><p>范例：修改 postgres用户密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">使用postgres用户登录（PostgresSQL安装后会自动创建postgres用户）</span><br>[root@rocky8 ~]#su -postgres<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">登录postgresq1数据库</span><br>[root@rocky8 ~]# psql -U postgres<br><span class="hljs-meta prompt_">#</span><span class="language-bash">安全起见，修改数据库管理员postgres用户的密码</span><br>postgres=# ALTER USER postgres WITH ENCRYPTED PASSWORD &#x27;123456&#x27;;<br>ALTER ROLE<br></code></pre></td></tr></table></figure><h3 id="3-6-3权限管理"><a href="#3-6-3权限管理" class="headerlink" title="3.6.3权限管理"></a>3.6.3权限管理</h3><p>在PostgreSQL数据库中，每个数据库的对象（包括数据库）都有一个所有者，也就是说任何数据库对象都是属于某个用户的，所有者默认就拥有所有权限。所以不需要把对象的权限再赋给所有者。自己创建的数据库对象，自己当然有全部的权限。当然，所有者出于安全考虑也可以选择废弃一些自己的权限。在PostsgreSQL数据库中，删除一个对象及任意修改它的权利是所有者固有的，不能被赋予或撤销。所有者也隐含地拥有把操作该对象的权限赋给别人的权利。</p><p>一个用户的权限分为两类，一类是在创建用户时就指定的权限，这些权限如下：</p><ul><li>超级用户的权限</li><li>创建数据库的权限</li><li>是否允许LOGIN的权限</li></ul><p>以上这些权限是创建用户时指定的，后续可使用ALTER ROLE命令来修改。</p><p>还有一类权限，是由命令GRANT和REVOKE来管理的，这些权限如下：</p><ul><li>在数据库中创建模式（SCHEMA)</li><li>允许在指定的数据库中创建临时表连接某个数据库</li><li>在模式中创建数据库对象，如创建表、视图函数等</li><li>在一些表中做SELECT、UPDATE、INSERRDELETE等操作等</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">GRANT命令有两个作用</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">1.让某个用户成为某个角色的成员，从而使其拥有角色的权限：</span><br>GRANT role_name [, ...] T0 role_name [, ...] [ WITH ADMIN OPTION ];<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2.把某些数据库逻辑结构对象的操作权限赋予某个用户(或角色)，命令的格式如下：</span><br>GRANT some_privileqes ON database_object_type object_name TO role_name;<br>其中,“some_privileges”表示在这个数据库对象中的权限,“database_object_type”是数据库对象的类型，如“TABLE”、“SEQUENCE”、“SCHEMA”，等。<br></code></pre></td></tr></table></figure><p><strong>PostgresQL中的权限是按以下几个层次进行管理的：</strong></p><ul><li>cluster权限：实例权限通过pg_hba.conf配置</li><li>管理赋在用户特殊属性上的权限，如超级用户的权限、创建数据库的权限、创建用户的权限、Login权限等</li><li>在数据库中创建模式的权限</li><li>表空间权限：通过grant/revoke控制权限操作表，物化视图，索引等</li><li>在模式中创建数据库对象的权限，如创建表、创建索引，等等</li><li>查询表、往表中插入数据、更新表、删除表中数据的权限</li><li>操作表中某些字段的权限</li></ul><h3 id="3-6-4权限案例"><a href="#3-6-4权限案例" class="headerlink" title="3.6.4权限案例"></a>3.6.4权限案例</h3><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">授权创建新数据库</span><br>postgres=# alter user wang with createdb;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">database权限设置</span><br>grant create on DATABASE testdb to wang ;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">schema权限</span><br>alter schema wang owner to wang ;<br>grant SELECT,insert,update,delete on all tables in schema wang to wang ;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建<span class="hljs-built_in">test</span>的schema指定所有者为joe</span><br>create schema if not exists test authorization joe;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">object权限</span><br>GRANT select,insert,update,delete ON testdb.t1 TO wang;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建数据库并指定所有者的用户</span><br>create user wang with password &#x27;123456&#x27;;<br>create database zabbix owner wang ;<br></code></pre></td></tr></table></figure><p>范例：创建业务用户和授权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">postgres=# create database pinxixi;<br>postgres=#\c pinxixi<br>pinxixi=#create user wanrentuan with password &#x27;123456&#x27;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">方法1</span><br>pinxixi=#create schema wanrentuan;<br>pinxixi=#ALTER SCHEMA wanrentuan OWNER to wanrentuan;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">方法2</span><br>pinxixi=#CREATE SCHEMA AUTHORIZATION wanrentuan;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">方法3</span><br>pinxixi=#GRANT select, insert,update,delete oN ALL TABLES IN SCHEMA wanrentuanto wanrentuan;<br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">将创建一个名为“<span class="hljs-built_in">readonly</span>”的用户</span><br>CREATE USER readonly with password &#x27;123456&#x27;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">把在public的schema下现有的所有表的SELECT 权限赋给用户<span class="hljs-built_in">readonly</span></span><br>GRANT SELECT ON ALL TABLES IN SCHEMA public TO readonly;<br></code></pre></td></tr></table></figure><h2 id="3-7安装使用图形化工具pgadmin"><a href="#3-7安装使用图形化工具pgadmin" class="headerlink" title="3.7安装使用图形化工具pgadmin"></a>3.7安装使用图形化工具pgadmin</h2><h3 id="3-7-1-pgadmin介绍"><a href="#3-7-1-pgadmin介绍" class="headerlink" title="3.7.1 pgadmin介绍"></a>3.7.1 pgadmin介绍</h3><p>pgAdmin是一个免费的开源图形数据库管理工具，用于管理PostgreSQL和衍生的关系数据库，如EnterpriseDB的EDB Advanced Server。pgAdmin可以以两种模式安装：服务器模式和桌面模式。服务器模式下的pgAdmin可以部署在不同的Web服务器中,如:Apache,Nginx等</p><p>pgAdmin是一个在PostgreSQL许可下发布的免费软件项目。该软件可从PostgreSQL镜像网络以源代码和二进制格式获得。因为从源代码编译比较繁琐，建议尽可能使用安装二进制包。</p><p>pgAdmin 4是对pgAdmin的完全重写，使用Python和Javascript/jQuery构建</p><p>官网：<a href="https://www.pgadmin.org/">https://www.pgadmin.org/</a></p><p>下载：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs http">https://www.pgadmin.org/download/<br>#容器版本<br>https://www.pgadmin.org/download/pgadmin-4-container/<br>#windows版本<br>https://www.postgresql.org/ftp/pgadmin/pgadmin4/v7.5/windows/<br>#阿里云<br>https://mirrors.aliyun.com/postgresql/pgadmin/pgadmin4<br></code></pre></td></tr></table></figure><h3 id="3-7-2安装pgadmin"><a href="#3-7-2安装pgadmin" class="headerlink" title="3.7.2安装pgadmin"></a>3.7.2安装pgadmin</h3><p>范例：安装Windows版本的pgadmin</p><p><img src="image-20230928215842789.png" alt="image-20230928215842789"></p><p><img src="image-20230928220535120.png" alt="image-20230928220535120"></p><p>范例：Ubuntu20.04安装pgadmin</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@ubuntu2004:~# apt install pgadmin3 -y<br>root@ubuntu2004:~# pgadmin3<br></code></pre></td></tr></table></figure><p><img src="image-20230928222624337.png" alt="image-20230928222624337"></p><p>范例：基于docker安装pgadmin</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@rocky8 ~]#docker run -e PGADMIN_DEFAULT_EMAIL=xiaohexie@qq.com -e PGADMIN_DEFAULT_PASSWORD=123456 -d --name pgadmin -p 80:80   dpage/pgadmin4<br></code></pre></td></tr></table></figure><p><img src="image-20230928222451914.png" alt="image-20230928222451914"></p><h1 id="4-PostgreSQL体系架构"><a href="#4-PostgreSQL体系架构" class="headerlink" title="4 PostgreSQL体系架构"></a>4 PostgreSQL体系架构</h1><h2 id="4-1体系架构概览"><a href="#4-1体系架构概览" class="headerlink" title="4.1体系架构概览"></a>4.1体系架构概览</h2><p>PostgreSQL和MySQL相似,也采用典型的C/S模型。</p><p>PostgreSQL体系结构分两部分</p><ul><li>实例 instance</li><li>磁盘存储</li></ul><p>实例 instance 包括</p><ul><li>进程</li><li>内存存储结构</li></ul><p><img src="image-20230928222852782.png" alt="image-20230928222852782"></p><h2 id="4-2进程和内存结构"><a href="#4-2进程和内存结构" class="headerlink" title="4.2进程和内存结构"></a>4.2进程和内存结构</h2><p>PostgreSQL是进程架构模型，MySQL是线程架构模型。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">下图来自《POSTGRESQL修炼之道从小工到专家》<br></code></pre></td></tr></table></figure><p><img src="image-20230928223010570.png" alt="image-20230928223010570"></p><h3 id="4-2-1进程"><a href="#4-2-1进程" class="headerlink" title="4.2.1进程"></a>4.2.1进程</h3><ul><li><p>Postmaster主进程</p><ul><li><p>它是整个数据库实例的主控制进程，负责启动和关闭该数据库实例。</p></li><li><p>实际上，使用pg ctl来启动数据库时，pg_ctl也是通过运行postgres来启动数据库的，只是它做了一些包装，更容易启动数据库。</p></li><li><p>它是第一个PostgresQL进程，此主进程还会fork出其他子进程，并管理它们。</p></li><li><p>当用户和PostgreSQL建立连接时，首先是和Postmaster进程建立连接。首先，客户端会发出身份验证的信息给Postmaster进程，Postmaster进程根据消息中的信息进行身份验证判断，如果验证通过，它会fork出一个会话子进程为这个连接服务。</p></li><li><p>当某个服务进程出现错误的时候，Postmaster主进程会自动完成系统的恢复。恢复过程中会停掉所有的服务进程，然后进行数据库数据的一致性恢复，等恢复完成后，数据库又可以接受新的连接。</p></li><li><p>验证功能是通过配置文件pg_hba.conf和用户验证模块来提供。</p></li><li><p>postmaster程序是指向postgres的软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[22:39:20 root@Master-DNS ~]#ll /aaps/pgsql/bin/postmaster <br>lrwxrwxrwx 1 root root 8 Sep 16 16:51 /aaps/pgsql/bin/postmaster -&gt; postgres<br></code></pre></td></tr></table></figure></li></ul></li><li><p>BgWriter 后台写进程</p><ul><li>为了提高插入、删除和更新数据的性能，当往数据库中插入或者更新数据时，并不会马上把数据持久化到数据文件中，而是先写入Buffer中</li><li>该辅助进程可以周期性的把内存中的脏数据刷新到磁盘中</li></ul></li><li><p>WalWriter 预写式日志进程</p><ul><li>WAL是write ahead log的缩写,WAL log旧版中称为xlog,相当于MySQL中Redo log</li><li>预写式日志是在修改数据之前，必须把这些修改操作记录到磁盘中，这样后面更新实际数据时，就不需要实时的把数据持久化到文件中了。即使机器突然宕机或者数据库异常退出，导致一部分内存中的脏数据没有及时的刷新到文件中，在数据库重启后，通过读取WAL日志，并把最后一部分WAL日志重新执行一遍，就能恢复到宕机时的状态了</li><li>WAL日志保存在pg_wal目录（早期版本为pg_xlog)下。每个xlog文件默认是16MB,为了满足恢复要求，在pg_wal目录下会产生多个WAL日志，这样就可保证在宕机后，未持久化的数据都可以通过WAL日志来恢复，那些不需要的WAL日志将会被自动覆盖</li></ul></li><li><p>Checkpointer 检查点进程</p><ul><li>检查点（Checkpoints)是事务序列中的点，保证在该点之前的所有日志信息都更新到数据文件中。</li><li>在检查点时，所有脏数据页都冲刷到磁盘并且向日志文件中写入一条特殊的检查点记录。在发生崩溃的时候，恢复器就知道应该从日志中的哪个点（称做redo记录）开始做REDO操作，因为在该记录前的对数据文件的任何修改都已经在磁盘上了。在完成检查点处理之后，任何在redo记录之前写的日志段都不再需要，因此可以循环使用或者删除。在进行WAL归档的时候，这些日志在循环利用或者删除之前应该必须先归档保存</li><li>检查点进程（CKPT)在特定时间自动执行一个检查点,通过向数据库写入进程(BgWriter)传递消息来启动检查点请求</li></ul></li><li><p>AutoVacuum 自动清理进程</p><ul><li>执行delete操作时，旧的数据并不会立即被删除，在更新数据时，也不会在旧的数据上做更新，而是新生成一行数据。旧的数据只是被标识为删除状态，在没有并发的其他事务读到这些旧数据时，它们才会被清除掉</li><li>autovacuum lanucher负责回收垃圾数据的master进程，如果开启了autovacuum的话，那么postmaster会fork这个进程</li><li>autovacuum worker负责回收垃圾数据的worker进程,是lanucher进程fork出来的</li></ul></li><li><p>PgStat统计数据收集进程</p><ul><li>此进程主要做数据的统计收集工作</li><li>收集的信息主要用于查询优化时的代价估算。统计的数据包括对一个表或索引进行的插入、删除、更新操作，磁盘块读写的次数以及行的读次数等。</li><li>系统表pg_statistic中存储了PgStat收集的各类统计信息</li></ul></li><li><p>PgArch归档进程</p><ul><li>默认没有此进程，开启归档功能后才会启动archiver进程</li><li>WAL日志文件会被循环使用，也就是说WAL日志会被覆盖，利用PgArch进程会在覆盖前把WAL日志备份出来，类似于binlog,可用于备份功能</li><li>PostgreSQL从8.X版本开始提供了PITR(Point-In-Time-Recovery)技术,即就是在对数据厍进行过一次全量备份后，该技术将备份时间点后面的WAL日志通过归档进行备份，将来可以使用数据库的全量备份再加上后面产生的WAL日志，即可把数据库向前恢复到全量备份后的任意一个时间点的状态</li></ul></li><li><p>SysLogger 系统日志进程</p><ul><li>默认没有此进程，配置文件postgresql.conf 设置参数logging_collect设置为“on”时，主进程才会启动SysLogger辅助进程</li><li>它从Postmaster主进程、所有的服务进程以及其他辅助进程收集所有的stderr输出，并将这些输出写入到日志文件中</li></ul></li><li><p>startup启动进程</p><ul><li>用于数据库恢复的进程</li></ul></li><li><p>Session 会话进程</p><ul><li>每一个用户发起连接后，一旦验证成功，postmaster进程就会fork一个新的子进程负责连接此用户。</li><li>通常表现为进程形式：postgres postgres [local] idle</li></ul></li></ul><p>案例：查看进程</p><p><img src="image-20230928224114461.png" alt="image-20230928224114461"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[21:44:27 root@Master-DNS ~]#ps auxf|grep ^postgres<br>postgres     843  0.0  0.6 172536 17092 ?        Ss   21:43   0:00 /aaps/pgsql/bin/postmaster -D /pgsql/data/<br>postgres     910  0.0  0.1 172652  5628 ?        Ss   21:43   0:00  \_ postgres: checkpointer   <br>postgres     911  0.0  0.1 172536  4992 ?        Ss   21:43   0:00  \_ postgres: background writer   <br>postgres     912  0.0  0.2 172536  7628 ?        Ss   21:43   0:00  \_ postgres: walwriter   <br>postgres     913  0.0  0.2 173208  6192 ?        Ss   21:43   0:00  \_ postgres: autovacuum launcher   <br>postgres     914  0.0  0.1  27220  3240 ?        Ss   21:43   0:00  \_ postgres: stats collector   <br>postgres     915  0.0  0.1 172960  4968 ?        Ss   21:43   0:00  \_ postgres: logical replication launcher   <br></code></pre></td></tr></table></figure><p>范例：开启归档后再查看进程</p><p><img src="image-20230928225410387.png" alt="image-20230928225410387"></p><h3 id="4-2-2内存结构"><a href="#4-2-2内存结构" class="headerlink" title="4.2.2内存结构"></a>4.2.2内存结构</h3><p>PostgreSQL的内存空间包括共享内存和本地内存两部分</p><ul><li>共享内存<ul><li>PostgresQL启动后，会生成一块共享内存，共享内存主要用做数据块的缓冲区，以便提高读写性能。WAL日志缓冲区和CLOG（Commit log）缓冲区也存在于共享内存中。除此以外，一些全局信息也保存在共享内存中，如进程信息、锁的信息、全局统计信息等。</li><li>PostgreSQL9.3之前的版本与Oracle数据库一样，都是使用“System V”类型的共享内存，但到PostgreSQL9.3之后，PostgreSQL使用mmap()方式共享内存，好处能使用较大的共享内存。</li><li>可以通过配置postgresql.conf文件中shared_buffers指定，默认128M,建议是内存的50%</li></ul></li></ul><p><img src="image-20230928225531109.png" alt="image-20230928225531109"></p><ul><li><p>本地内存</p><p>后台服务进程除访问共享内存外，还会申请分配一些本地内存，以便暂存一些不需要全局存储的数据。</p><p>都可以通过在配置postgresql.conf文件中指定这些内存缓冲区主要有以下几类：</p><ul><li>temp_buffers：用于访问临时表的本地缓冲区，默认为8M</li><li>work_mem:内部排序操作和Hash表在使用临时磁盘文件之前使用的内存缓冲区,默认为4M</li><li>maintenance_work_mem:在维护性操作(比如VACUUM、CREATE INDEX和ALTERTABLEADD FOREIGN KEY等）中使用的内存缓冲区，默认为64M</li></ul></li></ul><p>范例：查看内存空间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">postgres=# show shared_buffers ;<br> shared_buffers <br>----------------<br> 128MB<br>(1 row)<br><br>postgres=# show maintenance_work_mem ;<br> maintenance_work_mem <br>----------------------<br> 64MB<br>(1 row)<br><br>postgres=# show work_mem ;<br> work_mem <br>----------<br> 4MB<br>(1 row)<br><br></code></pre></td></tr></table></figure><h3 id="4-3数据更新过程"><a href="#4-3数据更新过程" class="headerlink" title="4.3数据更新过程"></a>4.3数据更新过程</h3><p><img src="image-20230928225841837.png" alt="image-20230928225841837"></p><ul><li>先将数据库文件中的更改的数据加载至内存</li><li>在内存更新数据</li><li>将日志写入内存WAL的缓存区</li><li>将日志提交，将日志写入操作系统cache</li><li>同步日志到磁盘</li><li>后台写数据库的更新后的数据到操作系统cache</li><li>写完数据后，更新检查点checkpoint</li><li>同步数据到磁盘</li></ul><h2 id="4-4数据库目录结构"><a href="#4-4数据库目录结构" class="headerlink" title="4.4数据库目录结构"></a>4.4数据库目录结构</h2><h3 id="4-4-1数据库目录介绍"><a href="#4-4-1数据库目录介绍" class="headerlink" title="4.4.1数据库目录介绍"></a>4.4.1数据库目录介绍</h3><p><img src="image-20230928230020677.png" alt="image-20230928230020677"></p><p>数据库数据存放在环境变量PGDATA指向数据目录。这个目录是在安装时指定的，所以在安装时需要指定一个合适的目录作为数据目录的根目录，而且，每一个数据库实例都要有一个对应的目录。目录的初始化是使用initdb来完成的。</p><p>初始化完成后，PGDATA数据目录下就会生成三个配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">postgresql.conf#数据库实例的主配置文件，基本上所有的配置参数都在此文件中。<br>pg_hba.conf#认证配置文件，配置了允许哪些IP的主机访问数据库，认证的方法是什么等信息。<br>pg_ident.conf #认证方式ident的用户映射文件。<br></code></pre></td></tr></table></figure><p>此外在PGDATA目录下还会生成如下一些子目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">base #默认表空间的目录，每个数据库都对应一个base目录下的子目录，每个表和索引对应一个独立文件<br>global #这个目录对应pg_globa1表空间，存放实例中的共享对象<br><span class="hljs-meta prompt_">pg_clog#</span><span class="language-bash">存储事务提交状态数据</span><br>pg_bba.conf #数据库访问控制文件<br><span class="hljs-meta prompt_">pg_1og#</span><span class="language-bash">数据库系统日志目录，在查询一些系统错误时就可查看此目录下日志文件。(根据配置定义，可能没有这个目录）</span><br>pg_xact #提交日志commit log的目录,pg 9之前叫<br><span class="hljs-meta prompt_">pg_clogpg_multixact#</span><span class="language-bash">共享行锁的事务状态数据</span><br>pg_notify #异步消息相关的状态数据pg_serial #串行隔离级别的事务状态数据<br>pg_snapshots #存储执行了事务snapshot导出的状态数据<br>pg_stat_tmp #统计信息的临时文件<br>pg_subtrans #子事务状态数据<br><span class="hljs-meta prompt_">pg_stat#</span><span class="language-bash">统计信息的存储目录。关闭服务时,将pg_stat_tmp目录中的内容移动至此目录实现保存</span><br>pg_stat_tmp #统计信息的临时存储目录。开启数据库时存放统计信息<br><span class="hljs-meta prompt_">pg_tblsp#</span><span class="language-bash">存储了指向各个用户自建表空间实际目录的链接文件</span><br><span class="hljs-meta prompt_">pg_twophase#</span><span class="language-bash">使用两阶段提交功能时分布式事务的存储目录</span><br>pg_wal #WAL日志的目录，早期版一本目录为<br>pg_xlogPG_VERSION #数据库版本<br>postmaster.opts #记录数据库启动时的命令行选项<br>postmaster.pid#数据库启动的主进程信息文件，包括PID，SPGDATA目录，数据库启动时间，监听端口，socket文件路径，临听地址，共享内存的地址信息(ipsc可查看），主进程状态<br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">[22:43:39 root@Master-DNS ~]#ll $PGDATA<br>total 64<br>drwx------ 11 postgres postgres   123 Sep 27 17:48 base<br>drwx------  2 postgres postgres  4096 Sep 28 22:05 global<br>drwx------  2 postgres postgres     6 Sep 16 16:51 pg_commit_ts<br>drwx------  2 postgres postgres     6 Sep 16 16:51 pg_dynshmem<br>-rw-------  1 postgres postgres  4795 Sep 16 22:12 pg_hba.conf<br>-rw-------  1 postgres postgres  1636 Sep 16 16:51 pg_ident.conf<br>drwx------  4 postgres postgres    68 Sep 28 21:48 pg_logical<br>drwx------  4 postgres postgres    36 Sep 16 16:51 pg_multixact<br>drwx------  2 postgres postgres    18 Sep 28 21:43 pg_notify<br>drwx------  2 postgres postgres     6 Sep 16 16:51 pg_replslot<br>drwx------  2 postgres postgres     6 Sep 16 16:51 pg_serial<br>drwx------  2 postgres postgres     6 Sep 16 16:51 pg_snapshots<br>drwx------  2 postgres postgres     6 Sep 28 21:43 pg_stat<br>drwx------  2 postgres postgres   168 Sep 28 23:03 pg_stat_tmp<br>drwx------  2 postgres postgres    18 Sep 16 16:51 pg_subtrans<br>drwx------  2 postgres postgres    32 Sep 18 23:00 pg_tblspc<br>drwx------  2 postgres postgres     6 Sep 16 16:51 pg_twophase<br>-rw-------  1 postgres postgres     3 Sep 16 16:51 PG_VERSION<br>drwx------  3 postgres postgres  4096 Sep 18 22:46 pg_wal<br>drwx------  2 postgres postgres    18 Sep 16 16:51 pg_xact<br>-rw-------  1 postgres postgres    88 Sep 16 16:51 postgresql.auto.conf<br>-rw-------  1 postgres postgres 26808 Sep 16 21:25 postgresql.conf<br>-rw-------  1 postgres postgres    45 Sep 28 21:43 postmaster.opts<br>-rw-------  1 postgres postgres    68 Sep 28 21:43 postmaster.pid<br><br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell">[23:03:24 root@Master-DNS ~]#ls /pgsql/data<br>base          pg_hba.conf    pg_notify     pg_stat      pg_twophase  postgresql.auto.conf<br>global        pg_ident.conf  pg_replslot   pg_stat_tmp  PG_VERSION   postgresql.conf<br>pg_commit_ts  pg_logical     pg_serial     pg_subtrans  pg_wal       postmaster.opts<br>pg_dynshmem   pg_multixact   pg_snapshots  pg_tblspc    pg_xact      postmaster.pid<br>[23:04:00 root@Master-DNS ~]#cat /pgsql/data/PG_VERSION <br>12<br>[23:04:17 root@Master-DNS ~]#cat /pgsql/data/postgresql.auto.conf <br><span class="hljs-meta prompt_"># </span><span class="language-bash">Do not edit this file manually!</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">It will be overwritten by the ALTER SYSTEM <span class="hljs-built_in">command</span>.</span><br><br><br>[23:04:33 root@Master-DNS ~]#cat /pgsql/data/postmaster.opts <br>/aaps/pgsql/bin/postgres &quot;-D&quot; &quot;/pgsql/data/&quot;<br>[23:05:05 root@Master-DNS ~]#cat /pgsql/data/postmaster.pid <br>843<br>/pgsql/data<br>1695908629<br>5432<br>/tmp<br>*<br>  5432001         0<br>ready   <br>[23:05:12 root@Master-DNS ~]#find /tmp/ -type s -ls<br>   741700      0 srwxrwxrwx   1  postgres postgres        0 Sep 28 22:41 /tmp/.s.PGSQL.5432<br><br></code></pre></td></tr></table></figure><h3 id="4-4-2-postgresql-conf配置项"><a href="#4-4-2-postgresql-conf配置项" class="headerlink" title="4.4.2 postgresql.conf配置项"></a>4.4.2 postgresql.conf配置项</h3><p>PostgresQL的配置参数是在postgresql.conf文件中集中管理的，这个文件位于数据库实例的目录下$PGDATA</p><ul><li><p>此文件中的每个参数配置项的格式都是“参数名=参数值”</p></li><li><p>配置文件中可以使用“#”注释。</p></li><li><p>所有配置项的参数名都是大小写不敏感的</p></li><li><p>参数值有以下五种类型。</p><p>布尔：布尔值都是大小写无关的，可以是on、off、true,false、yes、no、1、0。</p><p>整数：数值可以指定单位。如一些内存配置的参数可以指定KB、MB、GB等单位。另外还支持浮点数，字符串,枚举</p></li><li><p>postgresql.conf文件中可以使用include指令包含其他文件中的配置内容，如：include filename，如果指定被包含的文件名不是绝对路径，那么就相对于当前配置文件所在目录的相对路径。此外，包含还可以被嵌套。</p></li><li><p>所有的配置参数都在系统视图pg_settings中</p></li><li><p>$PGDATA目录下如果含有postgresql.conf和postgresql.auto.conf,而postgresql.auto.conf的优先级高于postgresql.conf,即如果一个参数同时存在postgresql.auto.conf和postgresql.conf里面，系统会先读postgresql.auto.conf的参数配置</p></li></ul><p>常用配置说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">listen_addresses=&#x27;*&#x27;#监听客户端的地址，默认是本地的，需要修改为*或者0.0.0.0<br>port=5432#pg端口，默认是5432<br>max_connections=2000#最大连接数,默认100<br>unix_socket_directories #socket文件的位置,默认在/tmp下面<br>shared_buffers #数据缓存区,建议值1/4--1/2主机内存,和oracle的buffer cache类似<br>aintenance_work_mem #维护工作内存,用于vacuum,create index,reindex等。建议值(1/4主机内存)/autovacuum_max_workers<br>max_worker_processes #总worker数<br>max_para1lel_workers_per_gather #单条QuERY中, 每个node最多允许开启的并行计算wORKER数<br><span class="hljs-meta prompt_">wal_level#</span><span class="language-bash">wal级别，版本11+默认是</span><br>replicawal_buffers #类似oracle的log buffer<br>checkpoint_timeout #checkpoint时间间隔<br>max_wal_size #控制wal的最大数量<br>min_wal_size #控制wal的最小数量<br>archive_command #开启归档命令,示例：&#x27;test!-f /arch/%f &amp;&amp; cp %p /arch/%f&#x27;<br>autovacuum #开启自动vacuum<br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs shell">postgres=# \d pg_settings;<br>               View &quot;pg_catalog.pg_settings&quot;<br>     Column      |  Type   | Collation | Nullable | Default <br>-----------------+---------+-----------+----------+---------<br> name            | text    |           |          | <br> setting         | text    |           |          | <br> unit            | text    |           |          | <br> category        | text    |           |          | <br> short_desc      | text    |           |          | <br> extra_desc      | text    |           |          | <br> context         | text    |           |          | <br> vartype         | text    |           |          | <br> source          | text    |           |          | <br> min_val         | text    |           |          | <br> max_val         | text    |           |          | <br> enumvals        | text[]  |           |          | <br> boot_val        | text    |           |          | <br> reset_val       | text    |           |          | <br> sourcefile      | text    |           |          | <br> sourceline      | integer |           |          | <br> pending_restart | boolean |           |          | <br><br>postgres=# select name,short_desc,setting from pg_settings where name like &#x27;listen_addresses&#x27;;<br>       name       |                     short_desc                     | setting <br>------------------+----------------------------------------------------+---------<br> listen_addresses | Sets the host name or IP address(es) to listen to. | *<br>(1 row)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看运行时参数</span><br>postgres=# show listen_addresses ;<br> listen_addresses <br>------------------<br> *<br>(1 row)<br><br></code></pre></td></tr></table></figure><p>范例：查看和修改配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">postgres=# show timezone;<br> TimeZone <br>----------<br> Etc/UTC<br>(1 row)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">动态修改配置</span><br>postgres=# set timezone=&quot;Asia/Shanghai&quot;;<br>SET<br>postgres=# show timezone;<br>   TimeZone    <br>---------------<br> Asia/Shanghai<br>(1 row)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">有些参数不支持动态修改</span><br>postgres=# set port =1234;<br>ERROR:  parameter &quot;port&quot; cannot be changed without restarting the server<br></code></pre></td></tr></table></figure><p>范例：postgresql.auto.conf文件优先于postgresql.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">[23:05:31 root@Master-DNS ~]#vim /pgsql/data/postgresql.auto.conf <br>port =1234<br>[23:18:15 root@Master-DNS ~]#vim /pgsql/data/postgresql.conf <br>post=5432<br>[23:18:53 root@Master-DNS ~]#systemctl restart postgresql<br>[23:19:06 root@Master-DNS ~]#ss -ntlp | grep post<br>LISTEN 0      244          0.0.0.0:1234      0.0.0.0:*    users:((&quot;postmaster&quot;,pid=2296,fd=3))<br>LISTEN 0      244             [::]:1234         [::]:*    users:((&quot;postmaster&quot;,pid=2296,fd=4))<br><br>[23:20:23 root@Master-DNS ~]#psql -p1234<br>psql (12.9)<br>Type &quot;help&quot; for help.<br><br>postgres=# show port;<br> port <br>------<br> 1234<br>(1 row)<br><br></code></pre></td></tr></table></figure><h3 id="4-4-3-pg-ident-conf"><a href="#4-4-3-pg-ident-conf" class="headerlink" title="4.4.3 pg_ident.conf"></a>4.4.3 pg_ident.conf</h3><p>pg_ident.conf是用户映射配置文件。结合pg_hba.conf文件，method为ident可以用特定的操作系统用户以指定的数据库用户身份登录数据库。</p><p>这个文件记录着与操作系统用户匹配的数据库用户，如果某操作系统用户在本文件中没有映射用户，则默认的映射数据库用户与操作系统用户同名。比如，服务器上有名为user1的操作系统用户，同时数据库上也有同名的数据库用户user1，user1登录操作系统后可以直接输入psql，以user1数据库用户身份登录数据库且不需密码</p><p>如果操作系统用户和数据库用户不同名，可以用下面格式进行映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">pg_ident.conf如下实现操作系统<span class="hljs-built_in">test</span>用户映射为数据库用户dba</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">MAPNAMESYSTEM-USERNAME PG-USERNAME</span><br>map1testdba<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">pg_hba.conf如下:</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">TYPE DATABASE USER CIDR-ADDRESS METHOD</span><br>localallallidentmap=map1<br></code></pre></td></tr></table></figure><p>范例：操作系统用户和数据库用户同名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">[23:24:52 root@Master-DNS ~]#useradd -s /bin/bash  -m dba<br>[23:25:28 root@Master-DNS ~]#su - postgres<br>Last login: Mon Sep 18 23:27:06 CST 2023 on pts/1<br>[23:26:05 postgres@Master-DNS ~]$psql<br>psql (12.9)<br>Type &quot;help&quot; for help.<br><br>postgres=# create user dba with password &#x27;123456&#x27;;<br>CREATE ROLE<br><br>[root@ubuntu2004 ~]#vim /pgsql/data/pg_hba.conf<br>local all  allident<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启服务，然后测试连接</span><br>[23:29:38 root@Master-DNS ~]#su - dba<br>[23:30:47 dba@Master-DNS ~]$psql<br><br></code></pre></td></tr></table></figure><p>范例：操作系统用户和数据库用户不同名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">postgres=# create user dba with password &#x27;123456&#x27;;<br><br>[23:35:59 root@Master-DNS ~]#useradd -s /bin/bash -m test<br>[23:36:12 root@Master-DNS ~]#vim /pgsql/data/pg_ident.conf <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">MAPNAME       SYSTEM-USERNAME         PG-USERNAME</span><br>map1            test                    dba<br><br>[23:37:17 root@Master-DNS ~]#vim /pgsql/data/pg_hba.conf <br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&quot;local&quot;</span> is <span class="hljs-keyword">for</span> Unix domain socket connections only</span><br>local   all             all             ident                   map=map1<br>local   all             all            trust<br><br>[23:41:37 root@Master-DNS ~]#su - test<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">直接登录失败</span><br>[23:41:47 test@Master-DNS ~]$psql<br>psql: error: FATAL:  Peer authentication failed for user &quot;postgres&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">需要指定映射的数据库的用户和数据库</span><br>[23:41:53 test@Master-DNS ~]$psql -Udba postgres<br>psql (12.9)<br>Type &quot;help&quot; for help.<br><br><br></code></pre></td></tr></table></figure><h3 id="4-4-4数据文件"><a href="#4-4-4数据文件" class="headerlink" title="4.4.4数据文件"></a>4.4.4数据文件</h3><p>PostgresQL中的每个索引和表都是一个单独的文件，称为Segment。默认是每个大于1G的Segment会被分割pg_class.efilenode.1这样的文件。Segment的大小可以在initdb时通过选项—with-segsize=SEGSIZE指定</p><p>注意：truncate表之后relfilenode会变。对应的物理文件名字也会变。</p><p>Segment 物理位置</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">$PGDATA/BASE/DATABASE_OID/PG_CLASS.RELFILENODE<br></code></pre></td></tr></table></figure><p>范例：数据文件路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs shell">[23:46:28 root@Master-DNS postgresql-12.9]#./configure --help | grep size<br>  --with-blocksize=BLOCKSIZE<br>                          set table block size in kB [8]<br>  --with-segsize=SEGSIZE  set table segment size in GB [1]<br>  --with-wal-blocksize=BLOCKSIZE<br>                          set WAL block size in kB [8]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看数据目录路径</span><br>postgres=# show data_directory;<br> data_directory <br>----------------<br> /pgsql/data<br>(1 row)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看数据库的OID</span><br>testdb=# select oid,datname from pg_database ;<br>  oid  |  datname  <br>-------+-----------<br> 12726 | postgres<br>     1 | template1<br> 12725 | template0<br> 16386 | db2<br> 16425 | hellodb<br> 16385 | testdb<br> 16499 | zabbix<br> 16500 | pinxixi<br>(8 rows)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看表的node</span><br>testdb=# select relfilenode from pg_class where relname=&#x27;tb1&#x27;;<br> relfilenode <br>-------------<br>       16421<br>(1 row)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看指定表的目录路径</span><br>testdb=# select pg_relation_filepath(&#x27;tb1&#x27;);<br> pg_relation_filepath <br>----------------------<br> base/16385/16421<br>(1 row)<br><br><br>[23:53:35 root@Master-DNS ~]#ls -l $PGDATA/base/16385/16421<br>-rw------- 1 postgres postgres 0 Sep 18 22:14 /pgsql/data/base/16385/16421<br></code></pre></td></tr></table></figure><h3 id="4-4-5控制文件"><a href="#4-4-5控制文件" class="headerlink" title="4.4.5控制文件"></a>4.4.5控制文件</h3><p>控制文件存放了数据库当前的状态，存放在PGDATA/global/pg_control</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">PG12版的控制文件</span><br>[23:53:50 root@Master-DNS ~]#file /pgsql/data/global/pg_control <br>/pgsql/data/global/pg_control: data<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看控制文件内容</span><br>[23:55:05 root@Master-DNS ~]#pg_controldata $PGDATA<br>pg_control version number:            1201<br>Catalog version number:               201909212<br>Database system identifier:           7279343838565676768<br>Database cluster state:               in production<br>pg_control last modified:             Thu 28 Sep 2023 11:54:48 PM CST<br>Latest checkpoint location:           0/160BBA60<br>Latest checkpoint&#x27;s REDO location:    0/160BBA28<br>Latest checkpoint&#x27;s REDO WAL file:    000000010000000000000016<br>Latest checkpoint&#x27;s TimeLineID:       1<br>Latest checkpoint&#x27;s PrevTimeLineID:   1<br>Latest checkpoint&#x27;s full_page_writes: on<br>Latest checkpoint&#x27;s NextXID:          0:572<br>Latest checkpoint&#x27;s NextOID:          16505<br>Latest checkpoint&#x27;s NextMultiXactId:  1<br>Latest checkpoint&#x27;s NextMultiOffset:  0<br>Latest checkpoint&#x27;s oldestXID:        479<br>Latest checkpoint&#x27;s oldestXID&#x27;s DB:   1<br>Latest checkpoint&#x27;s oldestActiveXID:  572<br>Latest checkpoint&#x27;s oldestMultiXid:   1<br>Latest checkpoint&#x27;s oldestMulti&#x27;s DB: 1<br>Latest checkpoint&#x27;s oldestCommitTsXid:0<br>Latest checkpoint&#x27;s newestCommitTsXid:0<br>Time of latest checkpoint:            Thu 28 Sep 2023 11:54:48 PM CST<br>Fake LSN counter for unlogged rels:   0/3E8<br>Minimum recovery ending location:     0/0<br>Min recovery ending loc&#x27;s timeline:   0<br>Backup start location:                0/0<br>Backup end location:                  0/0<br>End-of-backup record required:        no<br>wal_level setting:                    replica<br>wal_log_hints setting:                off<br>max_connections setting:              100<br>max_worker_processes setting:         8<br>max_wal_senders setting:              10<br>max_prepared_xacts setting:           0<br>max_locks_per_xact setting:           64<br>track_commit_timestamp setting:       off<br>Maximum data alignment:               8<br>Database block size:                  8192<br>Blocks per segment of large relation: 131072<br>WAL block size:                       8192<br>Bytes per WAL segment:                16777216<br>Maximum length of identifiers:        64<br>Maximum columns in an index:          32<br>Maximum size of a TOAST chunk:        1996<br>Size of a large-object chunk:         2048<br>Date/time type storage:               64-bit integers<br>Float4 argument passing:              by value<br>Float8 argument passing:              by value<br>Data page checksum version:           0<br>Mock authentication nonce:            0252a000a90d5b92c4693733806542ce09fc290e6763a9c90b14ab4989e19352<br><br></code></pre></td></tr></table></figure><h3 id="4-4-6日志文件"><a href="#4-4-6日志文件" class="headerlink" title="4.4.6日志文件"></a>4.4.6日志文件</h3><h4 id="4-4-6-1日志种类"><a href="#4-4-6-1日志种类" class="headerlink" title="4.4.6.1日志种类"></a>4.4.6.1日志种类</h4><ul><li>运行日志：$PGDATA/log(pg10之前为$PGDATA/pg_log),默认不存在，需要开启配置项logging_collector</li><li>在线重做日志：$PGDATA/pg_wal(pg10之前为$PGDATA/pg_xlog)</li><li>事务提交日志：$PGDATA/pg_xact(pg10之前为$PGDATA/pg_clog)</li><li>服务器日志：可以在启动的时候指定：pg_ctl start-I./logfile</li></ul><h4 id="4-4-6-2运行日志"><a href="#4-4-6-2运行日志" class="headerlink" title="4.4.6.2运行日志"></a>4.4.6.2运行日志</h4><h5 id="4-4-6-2-1运行日志配置项"><a href="#4-4-6-2-1运行日志配置项" class="headerlink" title="4.4.6.2.1运行日志配置项"></a>4.4.6.2.1运行日志配置项</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs shell">logging_collector:这个参数启用日志收集器，它是一个捕捉被发送到stderr的日志消息的后台进程，并且它会将这些消息重定向到日志文件中；默认是OFF，修改参数需要重启。<br><br>log_destination:有三种输出方法,stderr,csvlog,syslog:在windows上还支持eventlog。默认是stderr,如果使用csvlog的话，logging_collector必须开启。也可以同时使用csvlog和stderr,会记录两种格式的日志。<br><br>1og_directory:指定日志的存放位置,默认是$PGDATA/<br><br>loglog_filename:日志的命名格式,默认是postgresql-%Y-%m-%d_%H%M%s.log。支持strftime格式<br><br>log_file_mode:当logging_collector被启用时,这个参数设置日志文件的权限(在 windows 上这个参数将被忽略）。这个参数值应当是一个数字形式的模式，它可以被chmod和umask系统调用接受（要使用通常的十进制格式，该数字必须以一个0（零）开始）。默认的权限是0600，表示只有服务器拥有者才能读取或写入日志文件。其他常用的设置是0640，它允许拥有者的组成员读取文件。不过要注意你需要修改log_directory为将文件存储在集簇数据目录之外的某个位置，才能利用这个设置。<br><br>1og_rotation_age:当1ogging_col1ector被启用时,这个参数决定一个个体日志文件的最长生命期。当这些分钟过去后，一个新的日志文件将被创建。将这个参数设置为零将禁用基于时间的新日志文件创建。<br><br>1og_rotation_size:当1ogging_co11ector被启用时,这个参数决定一个个体日志文件的最大尺寸。当这么多千字节被发送到一个日志文件后，将创建一个新的日志文件。将这个参数设置为零将禁用基于尺寸的新日志文件创建。log_truncate_on_rotation:默认为off,设置为on的话,如果新建了一个同名的日志文件，则会清空原来的文件，再写入日志，而不是在后面追加。<br><br>1og_min_messages:控制哪些消息级别被写入到服务器日志。有效值是DEBUG5、DEBUG4、DEBUG3、DEBUG2、DEBUG1、INFO、NOTICE、WARNING、ERROR、LOG、FATAL和 PANIC。每个级别都包括以后的所有级别。级别越靠后，被发送的消息越少。默认值是WARNING。<br><br>1og_min_error_statement:控制哪些导致错误情况的 sQL 语句被记录在服务器日志中。。默认值是ERROR，要有效地关闭记录错误语句，将这个参数设置为PANIC。<br><br>log_min_duration_statement:相当于mysql的long_query_time,记录慢sQL,超过这个时间的sQL将会被记录到日志里。以ms为单位<br><br>log_checkpoints：导致检查点和重启点被记录在服务器日志中。一些统计信息也被包括在日志消息中，包括写入缓冲区的数据和写它们所花的时间。<br><br>log_connections：导致每一次尝试对服务器的连接被记录，客户端认证的成功完成也会被记录。只有超级用户能在会话开始时更改这个参数，在会话中它不能被更改。默认为off。<br><br>log_disconnections:导致会话终止也会被记录。日志输出提供的信息类似于 log_connections,不过还外加会话的持续时间。只有超级用户能在会话开始时更改这个参数，在会话中它不能被更改。默认为off。<br><br>1og_duration:导致每一个完成的语句的持续时间被记录。默认值是off。如果log_duration为on并且<br><br>log_min_duration_statement为正值，所有持续时间都将被记录，但是只有超过阈值的语句才会被记录查询文本。这种行为有助于在高负载安装中收集统计信息。<br><br>log_error_verbosity:有效值是TERSE、DEFAULT和VERBOSE,默认值是default,控制每条日志信息的详细程度，VERBOSE输出包括SQLSTATE错误码，以及产生错误的源代码文件名、函数名和行号<br><br>log_hostname:默认情况下，连接日志消息只显示连接主机的IP 地址。打开这个参数将导致也记录主机名。注意根据你的主机名解析设置，这可能会导致很微小的性能损失。<br><br>1og_line_prefix：设置日志输出格式(能够记录时间，用户名称，数据库名称，客户端IP和端口，方便定位问题）默认值是’%m [%p]’，它记录时间戳和进程ID。<br><br>log_lock_waits:控制当一个会话为获得一个锁等到超过deadlock_timeout时,是否要产生一个日志消息。这有助于决定是否锁等待造成了性能低下。默认值是off<br><br>1og_statement:控制哪些 sQL语句被记录。有效值是 none(off)、dd1、mod和 al1(所有语句）。默认值是none<br><br>log_replication_commands:每一个复制命令都被记录在服务器日志中。<br><br>log_temp_files:控制记录临时文件名和尺寸。临时文件可以被创建用来排序、哈希和存储临时查询结果。一个零值记录所有临时文件信息，而正值只记录尺寸大于或等于指定千字节数的文件。默认设置为-1，它禁用这种记录。<br><br>log_timezone：设置在服务器日志中写入的时间戳的时区。默认值是GMT。<br></code></pre></td></tr></table></figure><h5 id="4-4-6-2-2将csv格式运行日志存储至数据库"><a href="#4-4-6-2-2将csv格式运行日志存储至数据库" class="headerlink" title="4.4.6.2.2将csv格式运行日志存储至数据库"></a>4.4.6.2.2将csv格式运行日志存储至数据库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs shell">[23:56:39 root@Master-DNS ~]#vim /pgsql/data/postgresql.conf<br>log_destination = &#x27;csvlog&#x27; <br>logging_collector = on<br><br>[00:05:38 root@Master-DNS ~]#systemctl restart postgresql<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">先创建对应的表结构，只适用于PG12</span><br>testdb=#CREATE TABLE pg_log(<br>log_time timestamp(3) with time zone,<br>user_name text,<br>database_name text,<br>process_id integer,<br>connection_from text,<br>session_id text,<br>session_line_num bigint,<br>command_tag text,<br>session_start_time timestamp with time zone,<br>virtual_transaction_id text,<br>transaction_id bigint,<br>error_severity text,<br>sql_state_code text,<br>message text,<br>detail text,<br>hint text,<br>interna7_query text,<br>interna7_query_pos integer,<br>context text,<br>query text,<br>query_pos integer,<br>location text,<br>application_name text,<br>PRIMARY KEY (session_id,session_line_num)<br>);<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">将csv文件中的日志导入到表中</span><br>testdb=# copy pg_log from &#x27;/pgsql/data/log/postgresql-2023-09-29_000620.csv&#x27; with csv;<br>COPY 4<br></code></pre></td></tr></table></figure><h4 id="4-4-6-3在线WAL日志"><a href="#4-4-6-3在线WAL日志" class="headerlink" title="4.4.6.3在线WAL日志"></a>4.4.6.3在线WAL日志</h4><p>Online WAL（WRITE-AHEAD LOG）日志功能是为了保证崩溃后的安全，如果系统崩溃，可以“重放“从最后一次检查点以来的日志项来恢复数据库的一致性。但是也存在日志膨胀的问题，相当于MySQL的事务日志redo log</p><p>参考文档：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">https://www.postgresql.org/docs/12/runtime-config-wal.html<br></code></pre></td></tr></table></figure><h5 id="4-4-6-3-1-Online-WAL日志文件位置"><a href="#4-4-6-3-1-Online-WAL日志文件位置" class="headerlink" title="4.4.6.3.1 Online WAL日志文件位置"></a>4.4.6.3.1 Online WAL日志文件位置</h5><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">wal文件存放在$PGDATA/pg_wal下。PG10之前为pg_xlog<br></code></pre></td></tr></table></figure><h5 id="4-4-6-3-2设置Online-WAL日志的大小"><a href="#4-4-6-3-2设置Online-WAL日志的大小" class="headerlink" title="4.4.6.3.2设置Online WAL日志的大小"></a>4.4.6.3.2设置Online WAL日志的大小</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">初始化实例时，可以指定单个WAL文件的大小，默认16</span><br>Minitdb --wal-segsize=SIZE<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">WAL日志总的大小默认值</span><br>max_wal_size = 1GB<br>min_wal_size = 80MB<br><br>max_wal_size (integer)<br><span class="hljs-meta prompt_">#</span><span class="language-bash">在自动WAL检查点之间允许WAL增长到的最大尺寸。这是一个软限制，在特殊的情况下WAL尺寸可能会超过max_wal_size,例如在重度负荷下、archive_command失败或者高的wal keep_segments设置。如果指定值时没有单位，则以兆字节为单位。默认为1GB。增加这个参数可能导致崩溃恢复所需的时间。这个参数只能在postgresql.conf 或者服务器命令行中设置。</span><br><br><br>min_wal_size (integer)<br><span class="hljs-meta prompt_">#</span><span class="language-bash">只要WAL磁盘用量保持在这个设置之下，在检查点时旧的WAL文件总是被回收以便未来使用，而不是直接被删除。这可以被用来确保有足够的WAL空间被保留来应付WAL使用的高峰，例如运行大型的批处理任务。如果指定值时没有单位，则以兆字节为单位。默认是80MB。这个参数只能在postgresql.conf或者服务器命令行中设置。</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">注意：PG9.4之前版本中的checkout_segments可以指定在自动的wAL检查点之间的日志文件段的最大数量(通常每个段16兆字节)。缺省是3。从pG9.5开始淘汰此配置项,用max_wal_size和min_wal_size代替</span><br></code></pre></td></tr></table></figure><h5 id="4-4-6-3-3-LSN和Online-WAL文件命名格式"><a href="#4-4-6-3-3-LSN和Online-WAL文件命名格式" class="headerlink" title="4.4.6.3.3 LSN和Online WAL文件命名格式"></a>4.4.6.3.3 LSN和Online WAL文件命名格式</h5><p>LSN:Log Sequence Number用于记录WAL文件当前的位置，这是WAL日志唯一的、全局的标识。WAL日志中写入是有顺序的，所以必须得记录WAL日志的写入顺序。而LSN就是负责给每条产生的WAL日志记录唯一的编号</p><p>WAL日志LSN编号规则：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">高32位/低32位<br></code></pre></td></tr></table></figure><p>WAL文件名称为16进制的24个字符组成，每8个字符一组</p><p>每组的意义如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http">00000001 00000000 00000001<br>时间线    逻辑id    物理id<br>其中前8位：00000001表示time1ine<br>中间8位：00000000表示1ogid,即LSN高32位<br>最后8位：00000001表示1ogSeg，即LSN低32位/（2**24）的值，即低32位中最高8位，16进制的高2位<br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看当前LSN</span><br>testdb=# select pg_current_wal_lsn();<br> pg_current_wal_lsn <br>--------------------<br> 0/160D8FB0<br>(1 row)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#查看当前LSN对应的WAL日志文件</span></span><br>testdb=# select pg_walfile_name(pg_current_wal_lsn());<br>     pg_walfile_name      <br>--------------------------<br> 000000010000000000000016<br>(1 row)<br><br></code></pre></td></tr></table></figure><h5 id="4-4-6-3-4查看LSN和WAL文件对应关系"><a href="#4-4-6-3-4查看LSN和WAL文件对应关系" class="headerlink" title="4.4.6.3.4查看LSN和WAL文件对应关系"></a>4.4.6.3.4查看LSN和WAL文件对应关系</h5><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看当前事务的ID</span><br>postgres=# select txid_current();<br> txid_current <br>--------------<br>          574<br>(1 row)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看当前LSN号</span><br>postgres=# select pg_current_wal_lsn();<br> pg_current_wal_lsn <br>--------------------<br> 0/160D90C0<br>(1 row)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看当前LSN对应的WAL日志文件</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">wAL日志文件中的最后8位的1ogSeg前6位始终是0,最后两位是LSN的低32位的前两位。如上例中1ogseg最后两位是61，LSN低32位的前两位也是61。</span><br>postgres=# select pg_walfile_name(pg_current_wal_lsn());<br>     pg_walfile_name      <br>--------------------------<br> 000000010000000000000016<br>(1 row)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看当前WAL日志偏移量</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">LSN在WAL日志文件中的偏移量即LSN低32位中后24位对应的十进制值。如上面0001CO对应十进制即下面的448</span><br>postgres=# select pg_walfile_NAME_OFFSET(pg_current_wal_lsn());<br>      pg_walfile_name_offset       <br>-----------------------------------<br> (000000010000000000000016,889256)<br>(1 row)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">按时间排序显示WAL文件名</span><br>postgres=# select * from pg_ls_waldir() order by modification asc;<br>           name           |   size   |      modification      <br>--------------------------+----------+------------------------<br> 000000010000000000000019 | 16777216 | 2023-09-18 21:32:47+08<br> 000000010000000000000017 | 16777216 | 2023-09-18 21:32:47+08<br> 000000010000000000000018 | 16777216 | 2023-09-18 21:32:47+08<br> 00000001000000000000001A | 16777216 | 2023-09-18 21:32:47+08<br> 00000001000000000000001C | 16777216 | 2023-09-18 21:32:48+08<br> 00000001000000000000001B | 16777216 | 2023-09-18 21:32:48+08<br> 00000001000000000000001D | 16777216 | 2023-09-18 21:33:15+08<br> 00000001000000000000001F | 16777216 | 2023-09-18 21:33:16+08<br> 00000001000000000000001E | 16777216 | 2023-09-18 21:33:16+08<br> 000000010000000000000020 | 16777216 | 2023-09-18 21:33:16+08<br> 000000010000000000000022 | 16777216 | 2023-09-18 21:33:17+08<br> 000000010000000000000021 | 16777216 | 2023-09-18 21:33:17+08<br> 000000010000000000000023 | 16777216 | 2023-09-18 21:33:17+08<br> 000000010000000000000026 | 16777216 | 2023-09-18 21:33:18+08<br> 000000010000000000000024 | 16777216 | 2023-09-18 21:33:18+08<br> 000000010000000000000025 | 16777216 | 2023-09-18 21:33:18+08<br> 000000010000000000000016 | 16777216 | 2023-10-01 13:22:17+08<br>(17 rows)<br><br><br><br></code></pre></td></tr></table></figure><h5 id="4-4-6-3-5切换WAL日志"><a href="#4-4-6-3-5切换WAL日志" class="headerlink" title="4.4.6.3.5切换WAL日志"></a>4.4.6.3.5切换WAL日志</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">默认WAL文件达到16M，自动切换另一个WAL</span><br>postgres=# select pg_switch_wal();<br> pg_switch_wal <br>---------------<br> 0/160D91C0<br>(1 row)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">PG10版本前用下面命令</span><br>postgres=# select pg_switch_xlog();<br><br></code></pre></td></tr></table></figure><h5 id="4-4-6-3-6查看WAL文件内容命令"><a href="#4-4-6-3-6查看WAL文件内容命令" class="headerlink" title="4.4.6.3.6查看WAL文件内容命令"></a>4.4.6.3.6查看WAL文件内容命令</h5><p>pg_waldump可以查看WAL日志的具体内容</p><p>注意：pg_waldump执行结果中tx:：后面的数字是txid,即事务ID，WAL中同一个事务的记录此值是相同的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[13:29:28 root@Master-DNS ~]#pg_waldump /pgsql/data/pg_wal/000000010000000000000017<br>rmgr: Standby     len (rec/tot):     50/    50, tx:          0, lsn: 0/17000028, prev 0/160D91A8, desc: RUNNING_XACTS nextXid 575 latestCompletedXid 574 oldestRunningXid 575<br>rmgr: Standby     len (rec/tot):     50/    50, tx:          0, lsn: 0/17000060, prev 0/17000028, desc: RUNNING_XACTS nextXid 575 latestCompletedXid 574 oldestRunningXid 575<br>rmgr: XLOG        len (rec/tot):    114/   114, tx:          0, lsn: 0/17000098, prev 0/17000060, desc: CHECKPOINT_ONLINE redo 0/17000060; tli 1; prev tli 1; fpw true; xid 0:575; oid 16513; multi 1; offset 0; oldest xid 479 in DB 1; oldest multi 1 in DB 1; oldest/newest commit timestamp xid: 0/0; oldest running xid 575; online<br>rmgr: Standby     len (rec/tot):     50/    50, tx:          0, lsn: 0/17000110, prev 0/17000098, desc: RUNNING_XACTS nextXid 575 latestCompletedXid 574 oldestRunningXid 575<br>pg_waldump: fatal: error in WAL record at 0/17000110: invalid record length at 0/17000148: wanted 24, got 0<br><br></code></pre></td></tr></table></figure><h5 id="4-4-6-3-7创建恢复点"><a href="#4-4-6-3-7创建恢复点" class="headerlink" title="4.4.6.3.7创建恢复点"></a>4.4.6.3.7创建恢复点</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">事先创建恢复点，将来可用它进行还原，相当于快照</span><br>postgres=# select pg_create_restore_point(&#x27;test-restore-point&#x27;);<br></code></pre></td></tr></table></figure><h4 id="4-4-6-4归档WAL日志"><a href="#4-4-6-4归档WAL日志" class="headerlink" title="4.4.6.4归档WAL日志"></a>4.4.6.4归档WAL日志</h4><p>归档日志记录的是checkpoint前的WAL日志，即数据的历史日志,即把pg_wal里面的在线日志备份出来，功能上归档日志相当于MySQL的二进制日志</p><p>生产环境中为了保证数据高可用性，通常需要开启归档，当系统故障后可以通过归档的日志文件对数据进行恢复</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">配置归档需要开启如下参数：</span><br>wal_level = replica<br><span class="hljs-meta prompt_">#</span><span class="language-bash">该参数的可选的值有minimal，replica和logical，wal的级别依次增高，在wal的信息也越多。由于minimal这一级别的wal不包含从基础的备份和wal日志重建数据的足够信息，在该模式下，无法开启wal日志归档</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">从PostgresQL10开始，默认使用的replica此级别，也建议使用此级别，之前版本默认是最小级别minimal</span><br><br>archive_mode = on<br><span class="hljs-meta prompt_">#</span><span class="language-bash">上述参数为on,表示打开归档备份，可选的参数为on,off,always 默认值为off,所以要手动打开，需要重启服务生效</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在 PostgresQL中配置归档的方法是配置参数 archive_command,参数的配置值可以是一个unix命令,此命令把WAL日志文档拷贝到其他地方</span><br>archive_command = &#x27;[ ! -f /archive/%f ] &amp;&amp; cp %p /archive/%f&#x27;<br>archive_command = &#x27;DIR=/archive/ date +%F&#x27;;[ -d $DIR ] || mkdir -p $DIR;cp %p $DIR/%f&#x27;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">该参数的默认值是一个空字符串，值可以是一条shel1命令或者一个复杂的she11脚本<span class="hljs-comment">#用&quot;%p&quot;表示将要归档的wal文件包含完整路径的信息的文件名</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">用<span class="hljs-string">&quot;%f&quot;</span>代表不包含路径信息的wa1文件的文件名</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">注意：wal_level和archive_mode参数修改都需要重新启动数据库才可以生效。而修改archive_command则不需要。</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">无论当时是否需要归档，这要建议将上面两个参数开启</span><br></code></pre></td></tr></table></figure><hr><p>示例：本地归档备份</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">archive_mode = on<br>archive_command = &#x27;cp %p /pgsq1/backup/%f&#x27;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">上面的命令中“archive_mode =on”表示打开归档备份</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">参数archive_command的配置值是一个unix的<span class="hljs-built_in">cp</span>命令</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">命令中的%p表示在线WAL日志文件的全路径名称</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">%f表示不包括路径的WAL日志文件名。</span><br></code></pre></td></tr></table></figure><p>在实际执行时备份时，PostgreSQL会把%p替换成实际在线WAL日志文件的全路径名，并把%f替换成不包括路径的 WAL日志名。</p><p>使用操作系统命令scp还可以把WAL日志拷贝到其他机器上，从而实现对归档日志进行远程备份</p><p>示例：远程归档备份</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">archive_mode =on<br>archive_command = &#x27;scp %p postgres@10.0.0.200:/pgsq1/backup/%f&#x27;<br></code></pre></td></tr></table></figure><p>使用上面拷贝WAL文件的方式来同步主、备数据库之间数据时，备库会落后主库一个WAL日志文件，具体落后多长时间取决于主库上生成一个完整的WAL文件所需要的时间。</p><p>范例：启用归档</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">配置参数</span><br>vim /pgsql/data/postgresql.conf<br>wal_level=replica #此为默认值可以不做修改<br><span class="hljs-meta prompt_">#</span><span class="language-bash">- Archiving -</span><br>archive_mode = on<br>archive_command = &#x27;DIR=/archive/`date +%F`;[-d $DIR] || mkdir -p $DIR;cp %p $DIR/%f&#x27;<br><br>mkdir /archive<br>chown -R postgres. /archive<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启数据库</span><br>pg_ctl restart -mf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">插入数据，查看归档</span><br>\c testdb<br>create table t1(id int);<br>insert into t1 values (generate_series(1,1000000));<br>select ctid,* from t1;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">说明:ctid表示数据所在的数据块的编号及位移</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">比如（0，1）表示第0个块中的第一条记录，块从0开始编号，记录从1开始编号</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">触发检查点</span><br>checkpoint<br><span class="hljs-meta prompt_">#</span><span class="language-bash">切换日志，即使当前日志文件不再使用，而切换使用下一个日志文件，如果开启归档，会自动触发对当前日志文件的归档</span><br>select pg_switch_wal（）;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">检查归档</span><br>[14:04:58 root@Master-DNS ~]#tree /archive/<br>/archive/<br>└── 2023-10-01<br><br></code></pre></td></tr></table></figure><p>范例：远程归档</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在10.0.0.4的备份服务器上创建目录</span><br>[15:39:43 root@rocky8 ~]#mkdir -p /pgsql/backup<br>[15:39:52 root@rocky8 ~]#chown -R postgres. /pgsql/backup/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在postgreSQL服务器上实现到10.0.0.3备份服务器上的key验证</span><br>[14:07:31 root@Master-DNS ~]#ssh-keygen <br>[15:17:49 root@Master-DNS ~]#ssh-copy-id postgres@10.0.0.4<br><br><br>[15:18:12 root@Master-DNS ~]#vim /pgsql/data/postgresql.conf <br>archive_mode = on<br>archive_command = &#x27;scp %p 10.0.0.4:/pgsql/backup/%f&#x27;<br><br>[15:21:50 root@Master-DNS ~]#systemctl restart postgresql<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在postgresQL服务器上执行大量数据更新</span><br>[15:57:08 root@Master-DNS ~]#cat for_loop.sql <br>\c hellodb<br>create table emp(id int,name char(10),age int);<br><br>create or replace function for_loop()<br>returns void as $$<br>begin<br>    for i in 1..1000000 loop<br>        INSERT INTO emp(&quot;id&quot;,&quot;name&quot;, &quot;age&quot;) VALUES (i,&#x27;wang&#x27;,20);<br>    end loop;<br>end; <br><span class="hljs-meta prompt_">$</span><span class="language-bash">$ language plpgsql;</span><br><br>select for_loop();<br><br>select count(*) from emp;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在10.0.0.3的备份服务器上可看到日志的备份出现</span><br>[15:57:19 root@rocky8 ~]#ls /pgsql/backup/<br>000000010000000000000020  000000010000000000000022  000000010000000000000024  000000010000000000000026<br>000000010000000000000021  000000010000000000000023  000000010000000000000025  000000010000000000000027<br><br><br></code></pre></td></tr></table></figure><h1 id="5-PostgreSQL备份恢复"><a href="#5-PostgreSQL备份恢复" class="headerlink" title="5 PostgreSQL备份恢复"></a>5 PostgreSQL备份恢复</h1><h2 id="5-1备份说明"><a href="#5-1备份说明" class="headerlink" title="5.1备份说明"></a>5.1备份说明</h2><p>防止数据丢失的最重要方法就是备份。这些数据丢失有的是因硬件损坏导致的，有的是因人为原因(如误操作）而导致的，也有因为应用程序的bug而误删数据等情况。</p><p>备份的内容包括：</p><ul><li>数据（配置文件）</li><li>归档WAL日志</li><li>表空间目录</li></ul><p>数据库备份方式</p><ul><li>逻辑备份：适用于跨版本和跨平台的备份恢复</li><li>物理备份：适用于小版本的恢复，但不支持跨平台和大版本</li></ul><h2 id="5-2逻辑备份"><a href="#5-2逻辑备份" class="headerlink" title="5.2逻辑备份"></a>5.2逻辑备份</h2><p>PostgreSQL提供了pg_dump、pg_dumpall 命令进行数据库的逻辑备份。</p><p>两者的功能差不多，只是pg_dumpall是将一个PostgresQL数据库集群全部转储到一个脚本文件中，而pg_dump命令可以选择一个数据库或部分表进行备份。</p><p>另外利用COPY命令也能对表和SQL子集进行备份，实现表的还原</p><h3 id="5-2-1-pg-dump和pg-dumpall"><a href="#5-2-1-pg-dump和pg-dumpall" class="headerlink" title="5.2.1 pg_dump和pg_dumpall"></a>5.2.1 pg_dump和pg_dumpall</h3><p>pg_dump是PostgreSQL提供的一个非常有用的数据库备份工具。它甚至可以在数据库正在使用的时候进行完整一致的备份。pg_dump工具执行时，可以将数据库备份成一个文本文件或归档文件，该文件中实际上包含了多个CREATE和INSERT语句，使用这些语句可以重新创建表和插入数据。</p><p>pg_dumpall工具可以存储一个数据库集群里的所有数据库到一个脚本文件。本质上pg_dumpall是通过对数据库集群里的每个数据库调用pg_dump实现这个功能。</p><p>pg_dumpall还可以备份出所有数据库公用的全局元数据对象。这些信息包括：数据库用户和组，密码以及适用于整个数据库的访问权限。而pg_dump并不保存这些对象。</p><p>pg_dump可生成归档格式的备份文件，然后与pg_restore配合使用，从而提供一种灵活的备份和恢复机制。</p><p>pg_dump可以将整个数据库备份到一个归档格式的备份文件中，而pg_restore则可从这个归档格式的备份文件中选择性地恢复部分表或数据库对象。归档格式的备份文件又分为两种，最灵活的输出文件格式是”custom”自定义格式（使用命令项参数-Fc来指定)，它允许对归档元素进行选取和重新排列，并且默认时是压缩的；另一种格式是tar格式(使用命令项参数-Ft来指定)，这种格式的文件不是压缩的，并且加载时不能重排列，但是它也很灵活，可以用标准UNIX下的tar工具进行处理。</p><p>pg_dumpall只支持文本格式</p><p>pg_dump 的具体使用语法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">pg_dump [connection-option...] [option...] [dbname]<br><span class="hljs-meta prompt_">#</span><span class="language-bash">连接选项和psq1基本相同，pg_dump连接选项的参数如下</span><br>-h host或--host=host #指定运行服务器的主机名。如果以斜杠开头，则被用作到UNIX域套接字的路径。默认情况下，如果设置了SPGHOST环境变量，则从此环境变量中获取，否则尝试一个UNIX域套接字连接。<br>-P port或--Port=port#指定服务器正在侦听的TCP端口或本地UNIx域套接字文件的扩展。默认情况下，如果设置了$PGPORT环境变量，则从此环境变量中获取，否则取值为默认端口5432（编译时可以改变这个默认端口）。<br>-U username或--username=username指定要连接的用户名。<br>-w 或--no-password#从不提示密码。密码可以通过其他方式如~/.pgpass文件获取dbname #指定连接的数据库名，实际上也是要备份的数据库名。如果没有使用这个参数，则使用环境变量SPGDATABASE。如果SPGDATABASE 也没声明，那么可使用发起连接的用户名。<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">pg_dump专用选项</span><br>-a或--data-only #这个选项只是对纯文本格式有意义。只输出数据，不输出数据定义的SQL语句。<br>-b或--blobs #在转储中是否包含大对象。除非指定了选择性转储的选项--schema、--table、--schema-only开关，否则默认会转储大对象。此选项仅用于选择性转储时控制是否转储大对象。<br>-c或一clean #这个选项只对纯文本格式有意义。指定输出的脚本中是否生成清理该数据库对象语句（如droptable命令）。<br>-c或--create #这个选项只对纯文本格式有意义。指定脚本中是否输出一条create database语句和连接到该数据库的语句。一般在备份的源数据库与恢复的目标数据库的名称一致时，才指定这个参数。<br>-E encoding或--encoding=encoding #以指定的字符集编码创建转储。默认转储是依据数据库编码创建的。如果不指定此参数，可以通过设置环境变量SPGCLIENTENCODING达到相同的目的<br>-f file--file=file#输出到指定的文件中。如果没有指定此参数，则输出到标准输出中。<br>-F format或--format=format #选择输出的格式。format可以是p、c或t。<br>p是plain 的意思，为纯文本sQL 脚本文件的格式，这是默认值。大库不荐c是custom的意思，以一个适合pg_restore使用的自定义二进制格式输出并归档。这是最灵活的输出格式，在该格式中允许手动查询并且可以在pg restore恢复时重排归档项的顺序。该格式默认是压缩的。t是tar的意思，以一个适合输人pg_restore的 tar格式输出并归档。该输出格式允许手动选择并且在恢复时重排归档项的顺序，但是这个重排序是有限制的，比如，表数据项的相关顺序在恢复时不能更改。同时，tar格式不支持压缩，并且对独立表的大小限制为8GB。<br>-n schema或--schema=schema#只转储匹配 schema的模式内容，包括模式本身以及其中包含的对象。如果没有声明这个选项，所有目标数据库中的非系统模式都会被转储出来。可以使用多个-n选项指定多个模式。<br>-t table或--table=table #只转储出匹配table的表、视图、序列。可以使用多个-t选项匹配多个表。同样table参数将按照psql的\d命令的规则被解释为匹配模式，因此可以使用通配符匹配多个模式。在使用通配符时，最好用引号进行界定，以防止shel1将通配符进行扩展。<br>-T table或--exclude-table=table#不转储任何匹配table模式的表。模式匹配规则与t完全相同。可以指定多个-T以排除多种匹配的表。如果同时指定了-t和-T，那么将只转储匹配-t但不匹配-T的表。如果出现了-T而未出现-t，那么匹配-T的表不会被转储。<br></code></pre></td></tr></table></figure><p>使用pg_dump 的自定义备份或tar类型的备份需要使用pg_restore工具来恢复。</p><p>pg_restore命令的格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">pg_restore [connection-option.….] [option.….] [filename]<br><br>pg_restore 的连接参数与pg_dump基本相同,如下<br>-h host或--host=host<br>-p port或--port=port<br>-U username或--username=username-w或--no-password<br>-w或--password<br>-d dbname或--dbname=dbname #不同之处在于，pg_restore使用-d的参数来连接指定的数据库并恢复数据至此数据库<br>filename #要恢复的备份文件的位置。如果没有声明，则使用标准输入。<br>-a或--data-only#只恢复数据，而不恢复表模式(数据定义)。<br>-c或--clean#创建数据库对象前先清理（删除）它们。<br>-c或--create#在恢复数据库之前先创建它。如果出现了这个选项，和-d在一起的数据库名只是用于发出最初的CREATE DATABASE命令，所有数据都恢复到名字出现在归档中的数据库中。<br>-F format或--format=format#指定备份文件的格式。pg_restore可自动判断格式,如果一定要指定，它可以是t或c之一。<br>t表示 tar，指备份文件是一个tar文件。<br>c表示custom,备份的格式是来自pg_dump的自定义格式，这是最灵活的格式，因为它允许对数据重新排序，也允许重载表模式元素，默认这个格式是压缩的。<br>-n namespace或--schema=schema #只恢复指定名字的模式里的定义和/或数据。这个选项可以和-t选项一起使用，只恢复一个表的数据。<br>-t table或--table=table #只恢复指定的表的定义和/或数据。可以与-n参数（指定schema)联合使用。<br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">备份单个数据库<span class="hljs-built_in">test</span>中的所有表到指定目录</span><br>pg_dump -U postgres -f /backup/test_backup test<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">备份<span class="hljs-built_in">test</span>数据库中的t1表和t2表：</span><br>pg_dump -U postgres -t tl -t t2 -f /backup/test_backup_tl_t2 test<br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">备份指定数据库</span><br>pg_dump -d testdb &gt; /backup/testdb.sql<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">恢复过程</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">注意：事先需要存在数据库，且删除所有表后才能恢复</span><br>psql -d testdb &lt; /backup/testdb.sq1<br></code></pre></td></tr></table></figure><p>范例：使用pg_dumpall备份所有的数据库，其操作和pg_dump类似</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">备份全部数据库，每个数据库都需要输入密码，有N个数据库，就需要输入N次密码</span><br>pg_dumpa11 -U postgres -f fu11_backup.sq1<br>gp_dumpa11 &gt; fu11_backup.sq1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">恢复</span><br>psql &lt; ful1_backup.sql<br></code></pre></td></tr></table></figure><p>范例：使用pg_dump 和pg_restore备份还原</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">当连接的是一个本地数据库，并不需要密码时，要对数据库he1lodb进行备份，备份文件的格式是脚本文件格式</span><br>pg_dump -C hellodb &gt; hellodb.sql<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用pg_dump也可以备份一个远程的数据库，如下面的命令备份10.0.0.200机器上的he11odb数据库</span><br>pg_dump -h 10.0.0.200 -U postgres -C hellodb &gt; hellodb.sql<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果想生成的备份文件格式为自定义格式，可以使用下面的命令：</span><br>pg_dump -Fc -h 10.0.0.200 -Upostgres hellodb &gt; hellodb.dump<br><br>Password:<br>file hellodb.dump<br>hellodb.dump: PostgresQL custom database dump - v1.14-0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看备份文件内容</span><br>pg_restore hel1lodb.dump<br><br><br>[16:30:03 root@Master-DNS ~]#pg_restore -l hellodb.dump <br>;<br>; Archive created at 2023-10-01 16:30:03 CST<br>;     dbname: hellodb<br>;     TOC Entries: 28<br>;     Compression: -1<br>;     Dump Version: 1.14-0<br>;     Format: CUSTOM<br>;     Integer: 4 bytes<br>;     Offset: 8 bytes<br>;     Dumped from database version: 12.9<br>;     Dumped by pg_dump version: 12.9<br>;<br>.........<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">把上述备份文件恢复到另一个数据库hel1odb2中</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">先创建数据库才能恢复</span><br>psql -U postgres -h 10.0.0.200 -c &quot;create database hellodb2&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">还原</span><br>pg_restore -h 10.0.0.200 -U postgres -d hellodb2 hellodb.dump<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">只备份数据库he11odb中的表students</span><br>pg_dump -h 10.0.0.200 -Upostgres -t students hellodb &gt; students.sq1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">备份schema1模式中所有以job开头的表，但是不包括job_log表</span><br>pg_dump -t &#x27;schemal.job*&#x27; -T schemal.job_log hellodb &gt; schemal.emp.sql<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">备份所有数据库对象，但是不包括名字以_log结尾的表</span><br>pg_dump -T &#x27;*_log&#x27; hellodb &gt; log.sq1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">先从10.0.0.200备份数据库he11odb，然后恢复到10.0.0.100机器上</span><br>pg_dump -h 10.0.0.200 -U postgres hellodb -Fc &gt; hellodb.dump<br>pg_restore -h 10.0.0.100 -U postgres -C -d postgres hellodb.dump<br><span class="hljs-meta prompt_">#</span><span class="language-bash">在pg-restore命令中，-d中指定的数据库可以是10.0.0.200机器上实例中的任意数据库，pg-restore仅用该数据库名称进行连接，-C 表示先执行CREATE DATABASE命令创建he11odb数据库，然后再重新连接到hellodb数据库，最后把备份的表和其他对象建到hellodb数据库中</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">将备份出来的数据重新加载到一个新建的不同名称的数据库he11odb2中</span><br>createdb -T template0 hellodb2<br>pg_restore -d hellodb2 hel1odb.dump<br><span class="hljs-meta prompt_">#</span><span class="language-bash">注意，上面的命令从templateo而不是template1创建新数据库，确保干净。这里没有使用-c选项，而是直接连接到将要恢复的数据库上。</span><br></code></pre></td></tr></table></figure><h3 id="5-2-2COPY命令实现备份还原"><a href="#5-2-2COPY命令实现备份还原" class="headerlink" title="5.2.2COPY命令实现备份还原"></a>5.2.2COPY命令实现备份还原</h3><p>帮助文档</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://www.postgres.cn/docs/12/sql-copy.html<br></code></pre></td></tr></table></figure><p>COPY命令支持在PostgreSQL表和文件之间交换数据。</p><p>COPY TO把一个表的所有内容都拷贝到一个文件，而COPY FROM从一个文件里拷贝数据到一个表里（把数据附加到表中已经存在的内容里）。COPY TO还能拷贝SELECT查询的结果。</p><p>如果声明了一个字段列表，COPY将只在文件和表之间拷贝已声明字段的数据。如果表中有任何不在字段列表里的字段，那么COPY FROM将为那些字段插入缺省值。</p><p>带文件名的COPY指示PostgreSQL服务器直接从文件中读写数据。如果声明了文件名，那么服务器必须可以访问该文件，而且文件名必须从服务器的角度声明。如果使用了PROGRAM选项，则服务器会从指定的这个程序进行输入或是写入该程序作为输出。如果使用了STDIN或STDOUT选项，那么数据将通过客户端和服务器之间的连接来传输。</p><p>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">导出</span><br>COPY &#123; table_name [ ( column_name [, ...] ) ] | ( query ) &#125;<br>    TO &#123; &#x27;filename&#x27; | PROGRAM &#x27;command&#x27; | STDOUT &#125;<br>    [ [ WITH ] ( option [, ...] ) ]<br>    <br><span class="hljs-meta prompt_">#</span><span class="language-bash">导入</span><br>COPY table_name [ ( column_name [, ...] ) ]<br>    FROM &#123; &#x27;filename&#x27; | PROGRAM &#x27;command&#x27; | STDIN &#125;<br>    [ [ WITH ] ( option [, ...] ) ]<br>    [ WHERE condition ]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">常用参数说明：</span><br>table_name 现存表的名字(可以有模式修饰）<br>column_name 可选的待拷贝字段列表。如果没有声明字段列表，那么将使用所有字段<br>query 一个必须用圆括弧包围的SELECT或VALUES命令，其结果将被拷贝<br>filename 输入或输出文件的路径名。输入文件名可以是绝对或是相对的路径，但输出文件名必须是绝对路径。windows用户可能需要使用E”字符串和双反斜线作为路径名称<br>ROGRAM需执行的程序名。在COPY FROM命令中，输入是从程序的标准输出中读取，而在COPY TO中，命令的输出会作为程序的标准输入。注意，程序一般是在命令行界面下执行，当用户需要传递一些变量给程序时，如果这些变量的来源不是可靠的，用户必须小心过滤处理那些对命令行界面来说是有特殊意义的字符。基于安全的原因，最好是使用固定的命令字符串，或者至少是应避免直接使用用户输入（应先过滤特殊字符)<br>STDOUT声明输入将写入客户端应用<br>FORMAT选择被读或者写的数据格式：text、csv(逗号分隔值），或者binary。默认是text<br><span class="hljs-meta prompt_">#</span><span class="language-bash">注意：</span><br>opy命令必须在psql命令行执行，执行用户必须为superuser，否则会提示错误如果用普通用户进行执行，需要在copy前面加入“\”，即\copy即可<br></code></pre></td></tr></table></figure><p>范例：导出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">示例：</span><br>COPY students TO &#x27;/tmp/students.csv&#x27; WITH csv;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">可以导出指定的属性：</span><br>COPY students(stuid,name) TO &#x27;/tmp/students.csv&#x27; WITH csv;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">可以使用select 语句：</span><br>COPY (select * from students) TO &#x27;/tmp/students.csv&#x27;WITH csv;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">可以指定要导出哪些字段并带有列名：</span><br>COPY (select stuid,name,age from students) TO &#x27;/tmp/students.csv&#x27; WITH csvheader;<br></code></pre></td></tr></table></figure><p>范例：导入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">导入命令基本与导出一样，只是将TO改为FROM</span><br>create table students2 (like students);<br>COPY students2 FROM &#x27;/tmp/students.csv&#x27; WITH csv;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果导出的时候，指定了header属性，那么在导入的时候，也需要指定：</span><br>COPY students(stuid,name,age,gender) TO &#x27;/tmp/students.csv&#x27; wITH csv header;<br>COPY students2(stuid, name,age,gender) FROM &#x27;/tmp/students.csv&#x27; WITH csv header;<br></code></pre></td></tr></table></figure><h2 id="5-3物理备份"><a href="#5-3物理备份" class="headerlink" title="5.3物理备份"></a>5.3物理备份</h2><p>物理备份分为冷备份和热备份</p><ul><li><p>冷备份：最简单的物理备份就是冷备份，也就是把数据库停止，然后把数据库的PGDATA目录拷贝出来即可。</p><p>由于PostgreSQL把与数据库实例有关的配置文件和数据文件都放在$PGDATA目录下，所以PostgresQL做冷备份很简单</p></li><li><p>热备份：不停止数据库的数据库备份，称之为热备份或在线备份。在PostgreSQL中通常的热备份方法有两种。</p><ul><li>第一种方法：使用数据库的PITR方法利用pg_basebackup工具进行热备份</li><li>第二种方法：使用文件系统或块设备级别的快照功能完成备份。因为使用了快照，所以也能让备份出来的数据库与原数据库一致。</li></ul></li></ul><p>热备份流程</p><ul><li>以数据库超级用户身份连接到数据库，发出命令：SELECT pgstart_backup(‘label’);pg_start_backup()主要做了以下两个工作：<ul><li>o设置写日志标志为：XLogCtl-&gt;Insert.forcePageWrites = true, 也就是把这个标志设置为true后，数据库会把变化的整个数据块都记录到数据库中，而不仅仅是块中记录的变化。</li><li>强制发生一次checkpoint点。</li></ul></li><li>执行备份。使用任何方便的文件系统工具比如tar，或直接把数据目录复制下来。这些操作过程中既不需要关闭数据库，也不需要停止数据库的任何操作。</li><li>再次以数据库超级用户身份连接数据库，然后发出命令：SELECT pg_stop_backup（)；</li></ul><p>这将中止备份模式并自动切换到下一个WAL段。自动切换是为了让在备份间隔中写人的最后一个WAL段文件可以立即为下次备份做好准备。</p><ul><li>拷贝备份过程中产生的归档WAL日志文件</li></ul><p>范例：冷备份还原</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">备份</span><br>[root@ubuntu2004 ~]#pg_ctl stop<br>[root@ubuntu2004 ~]#mkdir /backup<br>[root@ubuntu2004 ~]#cp -a $PGDATA/ /backup/pgdata- `date +%F`<br>[root@ubuntu2004 ~]#pg_ctl start<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">还原</span><br>[root@ubuntu2004 ~]#pg_ctl stop<br>[root@ubuntu2004 ~]#rm -rf $PGDATA/*<br>[root@ubuntu2004 ~]#cp -a /backup/pgdata-2022-02-16/* $PGDATA/<br>[root@ubuntu2004 ~]#pg_ctl start<br></code></pre></td></tr></table></figure><p>范例：热备份和还原</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">psql -c &quot;select pg_start_backup(now()::text);&quot;#以当前时间做为标签<br>tar -cf /backup/full_ date +%F .tar /pgsql/data/<br>psql -c &quot;select pg_stop_backup();&quot;<br>tar -rf /backup/full_ date +%F .tar /archive/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">还原</span><br>pg_ct1 stop -D $PGDATA<br>rm -rf $PGDATA<br>tar xf /backup/ful1_ `date +%F`.tar -C /pgsql/data/<br>pg_ct1 start -D $PGDATA<br></code></pre></td></tr></table></figure><p>范例：利用LVM快照做备份</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">如果PGDATA是基于LVM存放的，可以执行基于逻辑卷快照备份</span><br>[root@ubuntu2004 ~]#systemctl stop postgresql ;lvcreate -n pgdata_snapshot -s -L 1G /dev/mapper/ubuntu--vg-ubuntu--lv; systemctl start postgresql<br><br>[root@ubuntu2004 ~]#mount /dev/ubuntu-vg/pgdata_snapshot /mnt<br>[root@ubuntu2004 ~]#cp -a /mnt/pgsql/data/ /backup/pgdata- `date +%F`<br><br>[root@ubuntu2004 ~]#lvremove /dev/ubuntu-vg/pgdata_snapshot<br></code></pre></td></tr></table></figure><h2 id="5-4-PITR-Point-in-Time-Recovery-介绍"><a href="#5-4-PITR-Point-in-Time-Recovery-介绍" class="headerlink" title="5.4 PITR(Point-in-Time Recovery)介绍"></a>5.4 PITR(Point-in-Time Recovery)介绍</h2><p>PostgreSQL支持类似于MySQL的主从复制的架构，一个Master 服务器database同步数据到多个Standby Server</p><p>PostgreSQL的主从同步是基于WAL(write ahead log预写式日志)日志实现的</p><p>PostgreSQL在数据目录的$PGDATA/pg_wal重做日志目录中始终维护着一个WAL日志文件。这个日志文件用于记录数据库数据文件的每次改变。当初设计这个日志文件的主要目的是为了在数据库异常崩溃后，能够通过重放最后一次checkpoint点之后的日志文件，把数据库推到一致状态。</p><p>事实上，这种日志文件机制，也提供了一种数据库热备份方案：在把数据库使用文件系统的方式备份出来的同时把相应的在线WAL日志也备份出来。虽然直接拷贝数据库数据文件会导致拷贝出来的文件不一致(比如拷贝的多个数据文件不是同一个时间点文件；拷贝一个8KB的数据块时，也存在不一致的情况：假设刚拷贝完前4KB的块，数据库又写了后4KB的块内容，那么所拷贝的块就不是一个完整的数据块)，但因为有了WAL日志，即使备份出来的数据块不一致，也可以重放备份开始后的WAL日志，把备份的内容推到一致状态。</p><p>由此可见，有了WAL日志之后，备份数据库时不再需要完美的一致性备份了，备份中任何数据的非一致性都会被重放WAL日志文件进行纠正，所以在备份数据库时可以通过简单的cp命令或tar等拷贝、备份文件来实现数据库的在线备份。</p><p>不停地重放WAL日志就可以把数据推到备份结束后的任意一个时间点，这就是基于时间点的备份Point-in-Time Recovery,缩写为PITR。</p><p>使用简单的cp命令或其他命令把数据库给在线拷贝出来的备份，被称为基础备份。后续WAL日志的备份与此基础备份构成一个完整备份。把基础备份恢复到另一台主机，然后不停地从原始数据库机器上接收WAL日志，在新机器上持续重放WAL日志，这样就可以在任何时间内在另一台机器上打开新产生的数据库。它拥有当前数据最新的数据状态。此新主机上的数据库称为Standby数据库，当前的主数据库出现问现故障无法正常提供服务时，可以把Standby数据库打开提供服务，从而实现高可用。</p><p>把WAL日志传送到另一台机器上的方法有两种，一种是通过归档WAL日志实现，一种是被称为流复制的方法</p><h2 id="5-5-pg-basebackup-实现完全备份和还原"><a href="#5-5-pg-basebackup-实现完全备份和还原" class="headerlink" title="5.5 pg_basebackup 实现完全备份和还原"></a>5.5 pg_basebackup 实现完全备份和还原</h2><p>pg_basebackup是基于流复制协议可以实现完全备份，并支持热备份</p><p>这个工具会把整个数据库实例的数据都拷贝出来，而不只是把实例中的部分（如某个数据库或某些表)单独备份出。</p><p>该工具使用replication协议连接到数据库实例上，所以主数据库中的pg_hba.conf必须允许replication连接，也就是在pg_hba.conf中必须有类似下面的内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">localreplicationdbatrust<br>hostreplicationdba0.0.0.0/0md5<br><span class="hljs-meta prompt_">#</span><span class="language-bash">上面的dba为备份的用户名，如果指令al1，即所有用户</span><br></code></pre></td></tr></table></figure><h3 id="5-5-1-pg-basebackup的命令行参数"><a href="#5-5-1-pg-basebackup的命令行参数" class="headerlink" title="5.5.1 pg_basebackup的命令行参数"></a>5.5.1 pg_basebackup的命令行参数</h3><p>pg_basebackup命令的使用方法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">pg_basebackup [option...]<br>此命令后可以跟多个选项，选项的具体说明如下。<br>-D directory或--pgdata=directory：指定把备份写到哪个目录。如果这个目录或这个目录路径中的各级父目录不存在，则pg_basebackup就会自动创建这个目录。<br>-F format或--format=format：指定输出的格式。“format”指一种格式，它目前又支持两种格式，一种是原样输出，即把主数据库中的各个数据文件、配置文件、目录结构都完全一样地写到备份目录，这种情况下“format”指定为“p”或“plain”；另一种是tar格式，相当于把输出的备份文件打包到一个tar文件中，这种情况下“format”应为“t”或“tar”。<br>-x或--xlog:备份时会把备份中产生的x1og文件也自动备份出来，这样才能在恢复数据库时，应用这些xlog文件把数据库推到一个一致点，然后真正打开这个备份的数据库。这个选项与选项“-xfetch”是完全一样的。使用这个选项，需要设置“wal_keep_segments”参数，以保证在备份过程中，需要的wAL日志文件不会被覆盖。<br>-X method或--xlog-method=method：”method”可以取的值为“f”、“fetch”、“s”.“stream”，其中“f”与“fetch相同，其意义与“-x”参数是一样的。“s”与“stream”表示的意思也相同,表示备份开始后，启动另一个流复制连接从主库接收WAL日志。这种方式避免了使用“-xf”时，主库上的WAL日志有可能被覆盖而导致失败的问题。但这种方式需要与主库建两个连接，因此使用这种方式时，主库的“max_wal_senders”参数至少要设置为2或大于2的值。新版取消此选项<br>-z或--gzip：仅能与tar输出模式配合使用，表明输出的tar备份包是经过gzip压缩的，相当于生成了一个*.tar.gz的备份包。<br>-z level或--compress=level：指定gzip的压缩级别，可以选1~9的数字，与gzip命令中的压缩级别是一样的，9表示最高压缩率，但也最耗CPU。<br><br>-R,--write-recovery-conf #将复制的配置信息保存,生成standby.signal<br>-c fast/spread或--checkpoint=fast|spread:设置checkpoint的模式是fast还是spread。<br>-l 1abel或--1abel=1abel:指定备份的一个标识，备份的标识是一个任意字符串，便于今后维护人员识别这个备份，该标识就是手工做基础备份时运行&quot;select pg_start_backup(‘label’)”传递给pg_start_backup函数的参数。在备份集中有一个文件叫“backup labe1”，这里面除了记录开始备份时WAL日志的起始位置、checkpoint的wAL日志位置、备份的开始时间外，也记录了这个标识串的信息。<br>-P或--progress：允许在备份过程中实时地打印备份的进度。当然这个打印的进度不是百分之百精确的，因为在备份过程中，数据库的数据还会发生变化，还会不断产生一些WAL日志。<br>-v或--verbose:详细模式，使用了-P参数后，还会打印出正在备份的具体文件的信息。<br>-v或--version:打印pg_basebackup的版本后退出。<br>-?或--help：显示帮助信息后退出。控制连接数据库的参数。<br>-h host或--host=host：指定连接的数据库的主机名或IP地址。<br>-p port或--port=port:指定连接的端口。<br>-s interval或--status-interval=interval：指定向服务器端周期反馈状态的秒数，如果服务器上配置了流复制的超时，在使用一-xlog=stream选项时，则需要设置这个参数，默认值为10秒。如果设置为0，表示不向服务器反馈状态。<br>-U username或--username=username:指定连接的用户名。-w或--no-password:指定从来不提示输入密码。<br>-w或--password:强制让pg_basebackup出现输入密码的提示。<br>-R write configuration for replication<br></code></pre></td></tr></table></figure><h3 id="5-5-2完全备份"><a href="#5-5-2完全备份" class="headerlink" title="5.5.2完全备份"></a>5.5.2完全备份</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在postgresQL服务器先授权</span><br>[postgres@gpserver ~]$vi /pgsql/data/pg_hba.confhost <br>replication al1 10.0.0.0/24 md5<br>[postgres@gpserver ~]$pg_ctl restart -D $PGDATA<br><span class="hljs-meta prompt_">#</span><span class="language-bash">在备份服务器执行下面操作</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">注意：备份目录/pgsq1/backup/必须为空</span><br>[postgres@gpserver ~]mkdir -p /pgsq1/backup/<br><span class="hljs-meta prompt_">#</span><span class="language-bash">备份</span><br>[postgres@gpserver ~]$pg_basebackup -D /pgsql/backup/ -Ft -pv -Upostgres -h10.0.0.200 -p 5432 -R<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">自动在<span class="hljs-variable">$PGDATA</span>目录下生成备份记录文件</span><br>[postgres@gpserver ~]$cat /pgsq1/data/backup_label.old<br>START WAL LOCATION: 0/45000028 (file 000000010000000000000045)<br>CHECKPOINT LOCATION: 0/45000060<br>BACKUP METHOD: streamed<br>BACKUP FROM: master<br>START TIME: 2020-05-11 10:38:49 UTC<br>LABEL: pg_basebackup base backup<br>START TIMELINE: 1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看备份生成的文件</span><br>[postgres@gpserver ~]$ 1s /pgsq1/backup/base.tar pg_wal.tar<br></code></pre></td></tr></table></figure><h3 id="5-5-3利用完全备份实现恢复"><a href="#5-5-3利用完全备份实现恢复" class="headerlink" title="5.5.3利用完全备份实现恢复"></a>5.5.3利用完全备份实现恢复</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在备份服务器上执行下面操作进行还原</span><br>[root@@gpserver ~]#mkdir /archive/<br>root@@gpserver ~]#chown postgres.postgres /archive/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">确认备份文件存在</span><br>[postgres@gpserver ~]$ ls /pgsq1/backup/base.tar pg_wal.tar<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">模拟故障</span><br>[postgres@gpserver ~]$echo $PGDATA/pgsql/data<br>[postgres@gpserver ~]$ pg_ct1 -D $PGDATA stop<br>[postgres@gpserver ~]$ rm -rf $PGDATA/*<br>[postgres@gpserver ~]$ rm -rf /archive/*<br><span class="hljs-meta prompt_">#</span><span class="language-bash">进行还原</span><br>[postgres@gpserver ~]$ tar xf /pgsql/backup/base.tar -C $PGDATA/<br>[postgres@gpserver ~]$ tar xf /pgsql/backup/pg_wal.tar -C /archive<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改配置</span><br>[postgres@gpserver ~]$ vim $PGDATA/postgresqlconf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">添加下面行</span><br>restore_command = &#x27;cp /archive/%f %p&#x27;<br>recovery_target = &#x27;immediate&#x27;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果pg_basebackup执行时添加-R选项，可以不执行下面，否则会无法启动服务，执行下面指令创建文件后才能启动</span><br>[postgres@gpserver ~]$touch /pgsql/data/recovery.signal<br>[postgres@gpserver ~]$pg_ctl start -D $PGDATA<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">停止恢复过程，否则为只读</span><br>postgres=# select pg_wal_replay_resume();<br></code></pre></td></tr></table></figure><h2 id="5-6利用PITR实现误删除的实战案例"><a href="#5-6利用PITR实现误删除的实战案例" class="headerlink" title="5.6利用PITR实现误删除的实战案例"></a>5.6利用PITR实现误删除的实战案例</h2><h3 id="5-6-1场景说明"><a href="#5-6-1场景说明" class="headerlink" title="5.6.1场景说明"></a>5.6.1场景说明</h3><p>每天2：00备份，第二天10：00误删除数据库，如何恢复？</p><h3 id="5-6-2故障恢复过程"><a href="#5-6-2故障恢复过程" class="headerlink" title="5.6.2故障恢复过程"></a>5.6.2故障恢复过程</h3><p>备份数据和归档</p><p>还原流程</p><ul><li>还原完全备份</li><li>归档日志恢复<ul><li>备份中的归档</li><li>恢复2：00到10:00之间的归档</li><li>恢复在线redo</li></ul></li></ul><h4 id="5-6-2-1备份"><a href="#5-6-2-1备份" class="headerlink" title="5.6.2.1备份"></a>5.6.2.1备份</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在PG服务器开启归档</span><br>[21:42:42 root@rocky8 ~]#vim /pgsql/data/postgresql.conf <br>archive_mode = on<br>archive_command = &#x27;DIR=/archive/`date +%F`;[ -d $DIR ] || mkdir -p $DIR;cp %p $DIR/%f&#x27;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#在PG服务器上修改配置</span></span><br>[23:15:06 root@Slave-DNS ~]#vim /pgsql/data/pg_hba.conf <br>host    all       all         10.0.0.0/24    trust<br>local   replication     all                      trust<br>host    replication     all        0.0.0.0/0     md5<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改postgres密码</span><br>testdb=# alter user postgres with password &#x27;123456&#x27;;<br><br><br>[21:47:28 root@rocky8 ~]#mkdir /archive<br>[21:47:30 root@rocky8 ~]#chown -R postgres. /archive<br>[21:47:38 root@rocky8 ~]#systemctl restart postgresql.service <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在PG服务器上创建测试数据</span><br>postgres=# create database testdb;<br>postgres=# \c testdb ;<br>testdb=# create table t1(id int);<br>testdb=# insert into t1 values (1);<br><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在备份服务器对PG数据库进行远程完全备份</span><br>[21:52:43 root@PG-backup ~]#mkdir /pgsql/backup/<br>[21:56:33 root@PG-backup ~]#chown -R postgres. /pgsql/backup/<br><br>[22:25:14 root@PG-backup ~]#pg_basebackup -D /pgsql/backup/ -Ft -Pv -Upostgres  -h 10.0.0.4 -p 5432 -R<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在PG服务器上继续生成测数据</span><br>testdb=# insert into t1 values (3);<br>testdb=# insert into t1 values (4);<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">模拟数据删除</span><br>testdb=# \c postgres ;<br>postgres=# drop database testdb;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">发现故障，停止用户访问</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看当前日志文件</span><br>postgres=# select pg_walfile_name(pg_current_wal_lsn());<br>     pg_walfile_name      <br>--------------------------<br> 000000010000000000000003<br>(1 row)<br><br>postgres=# select txid_current();<br> txid_current <br>--------------<br>          741<br>(1 row)<br><br><br></code></pre></td></tr></table></figure><h4 id="5-6-2-2故障还原"><a href="#5-6-2-2故障还原" class="headerlink" title="5.6.2.2故障还原"></a>5.6.2.2故障还原</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在PG服务器上切换归档日志</span><br>postgres=# select pg_switch_wal();<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在要还原的服务器停止服务，准备还原</span><br>[23:37:50 root@PG-backup ~]#systemctl stop postgresql<br>[23:38:20 root@PG-backup ~]#rm -rf /pgsql/data/*<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在测试的还原服务器进行还原</span><br>[23:52:05 root@PG-backup ~]#mkdir /archive/<br>[00:10:48 root@PG-backup ~]#chown -R postgres. /archive/<br>[00:09:21 postgres@PG-backup ~]$tar xf /pgsql/backup/base.tar -C /pgsql/data/<br><span class="hljs-meta prompt_">#</span><span class="language-bash">此步可以不执行</span><br>[00:10:30 postgres@PG-backup ~]$tar xf /pgsql/backup/pg_wal.tar -C /archive/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">复制PG服务器的归档日志到还原的测试服务器</span><br>[00:16:02 root@PG-backup ~]#rsync -a 10.0.0.4:/archive/ /archive/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看故障点事务ID</span><br>[21:52:01 root@PG-backup ~]#pg_waldump /archive/2023-10-02/000000010000000000000003 | grep -B 10 &quot;DROP dir&quot;<br>rmgr: Heap        len (rec/tot):     54/   150, tx:        737, lsn: 0/03000060, prev 0/03000028, desc: INSERT off 2 flags 0x00, blkref #0: rel 1663/16384/16385 blk 0 FPW<br>rmgr: Transaction len (rec/tot):     34/    34, tx:        737, lsn: 0/030000F8, prev 0/03000060, desc: COMMIT 2023-10-02 21:41:59.669497 CST<br>rmgr: Heap        len (rec/tot):     59/    59, tx:        738, lsn: 0/03000120, prev 0/030000F8, desc: INSERT off 3 flags 0x00, blkref #0: rel 1663/16384/16385 blk 0<br>rmgr: Transaction len (rec/tot):     34/    34, tx:        738, lsn: 0/03000160, prev 0/03000120, desc: COMMIT 2023-10-02 21:42:01.887616 CST<br>rmgr: Heap        len (rec/tot):     59/    59, tx:        739, lsn: 0/03000188, prev 0/03000160, desc: INSERT off 4 flags 0x00, blkref #0: rel 1663/16384/16385 blk 0<br>rmgr: Transaction len (rec/tot):     34/    34, tx:        739, lsn: 0/030001C8, prev 0/03000188, desc: COMMIT 2023-10-02 21:42:05.595895 CST<br>rmgr: Standby     len (rec/tot):     50/    50, tx:          0, lsn: 0/030001F0, prev 0/030001C8, desc: RUNNING_XACTS nextXid 740 latestCompletedXid 739 oldestRunningXid 740<br>rmgr: Heap        len (rec/tot):     59/  1243, tx:        740, lsn: 0/03000228, prev 0/030001F0, desc: DELETE off 4 flags 0x00 KEYS_UPDATED , blkref #0: rel 1664/0/1262 blk 0 FPW<br>rmgr: Standby     len (rec/tot):     54/    54, tx:          0, lsn: 0/03000708, prev 0/03000228, desc: RUNNING_XACTS nextXid 741 latestCompletedXid 739 oldestRunningXid 740; 1 xacts: 740<br>rmgr: XLOG        len (rec/tot):    114/   114, tx:          0, lsn: 0/03000740, prev 0/03000708, desc: CHECKPOINT_ONLINE redo 0/3000708; tli 1; prev tli 1; fpw true; xid 0:741; oid 24576; multi 1; offset 0; oldest xid 726 in DB 1; oldest multi 1 in DB 1; oldest/newest commit timestamp xid: 0/0; oldest running xid 740; online<br>rmgr: Database    len (rec/tot):     38/    38, tx:        740, lsn: 0/030007B8, prev 0/03000740, desc: DROP dir 1663/16384<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看此指令的事务ID为740，前一个事务为739</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改配置文件postgresq1.conf,或者postgresq1.auto.conf文件也可以</span><br>[21:53:22 root@PG-backup ~]#vim /pgsql/data/postgresql.conf <br><span class="hljs-meta prompt_">#</span><span class="language-bash">加下面两行</span><br>restore_command = &#x27;cp /archive/2023-10-02/%f %p&#x27;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">指定还原至上面查到的事务ID</span><br>recovery_target_xid = &#x27;739&#x27;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">也可以通过下面方式指定还原至的位置</span><br>recovery_target_name =&#x27;restore_point&#x27; #指定还原点名称<br>recovery_target_time=&#x27;2023-10-02 21:42:05&#x27; #指定还原至时间点<br>recovery_target_1sn=&#x27;0/030001C8&#x27; #指定还原到LSN号的位置<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动服务</span><br>[22:06:09 root@PG-backup ~]#systemctl start postgresql<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">验证数据</span><br>[16:17:23 root@PG-backup ~]#psql<br>psql (14.2)<br>Type &quot;help&quot; for help.<br><br>postgres=# <br>postgres=# \l<br>                                  List of databases<br>   Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges   <br>-----------+----------+----------+-------------+-------------+-----------------------<br> postgres  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | <br> template0 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +<br>           |          |          |             |             | postgres=CTc/postgres<br> template1 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +<br>           |          |          |             |             | postgres=CTc/postgres<br> testdb    | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | <br>(4 rows)<br><br>postgres=# \c testdb ;<br>You are now connected to database &quot;testdb&quot; as user &quot;postgres&quot;.<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">验证数据是否还原</span><br>testdb=# select * from t1;<br> id <br>----<br>  1<br>  2<br>  3<br>  4<br>(4 rows)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">当前无法写入</span><br>testdb=# insert into t1 values (5);<br>ERROR:  cannot execute INSERT in a read-only transaction<br>[22:06:43 root@PG-backup ~]#pg_controldata <br>pg_control version number:            1300<br>Catalog version number:               202107181<br>Database system identifier:           7285006788378561368<br>Database cluster state:               in archive recovery<br>pg_control last modified:             Mon 02 Oct 2023 10:06:40 PM CST<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">恢复正常模式</span><br>testdb=# select pg_wal_replay_resume();<br> pg_wal_replay_resume <br>----------------------<br> <br>(1 row)<br>[22:10:40 root@PG-backup ~]#pg_controldata <br>pg_control version number:            1300<br>Catalog version number:               202107181<br>Database system identifier:           7285006788378561368<br>Database cluster state:               in production<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">恢复正常写入</span><br>testdb=# insert into t1 values (5);<br>INSERT 0 1<br><br></code></pre></td></tr></table></figure><h1 id="6-PostgreSQL高可用"><a href="#6-PostgreSQL高可用" class="headerlink" title="6 PostgreSQL高可用"></a>6 PostgreSQL高可用</h1><h2 id="6-1流复制介绍"><a href="#6-1流复制介绍" class="headerlink" title="6.1流复制介绍"></a>6.1流复制介绍</h2><p>流复制streaming replication是实现PostgreSQL的高可用的常见技术</p><p>PostgresQL流复制相当于MySQL的主从复制，可以实现数据同步和数据备份</p><p>官方文档：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://postgres.cn/docs/12/warm-standby.html#STREAMING-REPLICATION<br></code></pre></td></tr></table></figure><h3 id="6-1-1什么是流复制"><a href="#6-1-1什么是流复制" class="headerlink" title="6.1.1什么是流复制"></a>6.1.1什么是流复制</h3><p>PostgreSQL通过WAL日志来传送的方式有两种：基于文件的日志传送和流复制。</p><p>不同于基于文件的日志传送，流复制的关键在于“流”，所谓流就是没有界限的一串数据，类似于河里的水流，是连成一片的。</p><p>流复制比使用基于文件方式的日志传送更能使一台后备服务器保持最新的状态。后备服务器连接到主服务器，主服务器则在WAL记录产生时即将它们以流式传送给后备服务器而不必等到WAL文件被填充。</p><p>比如有一个大文件要从本地主机发送到远程主机，如果是按照“流”接收到的话，我们可以一边接收，一边将文本流存入文件系统。这样，等到“流”接收完了，硬盘写入操作也已经完成。</p><h3 id="6-1-2流复制发展历史"><a href="#6-1-2流复制发展历史" class="headerlink" title="6.1.2流复制发展历史"></a>6.1.2流复制发展历史</h3><p>PostgreSQL在流复制出现之前，使用的就是基于文件的日志传送：对WAL日志进行拷贝，因此从库始终落后主库一个日志文件，并且还需要使用rsync工具同步数据目录。</p><p>而流复制出现是从2010年推出的PostgreSQL9.0开始的，其历史大致为：</p><ul><li>起源：PostgreSQL9.0开始支持流式物理复制，用户可以通过流式复制，构建只读备库(主备物理复制，块级别一致)。流式物理复制可以做到极低的延迟(通常在1毫秒以内）。</li><li>同步流复制：PostgreSQL9.1开始支持同步复制，但是当时只支持一个同步流复制备节点（例如配置了3个备，只有一个是同步模式的，其他都是异步模式)。同步流复制的出现，保证了数据的0丢失。</li><li>级联流复制：PostgreSQL9.2支持级联流复制。即备库还可以再连备库。</li><li>流式虚拟备库：PostgreSQL9.2还支持虚拟备库，即就是只有WAL，没有数据文件的备库。</li><li>逻辑复制：PostgresQL9.4开始可以实现逻辑复制，逻辑复制可以做到对主库的部分复制，例如表级复制，而不是整个集群的块级一致复制。</li><li>增加多种同步级别：PostgreSQL9.6版本开始可以通过synchronous_commit参数，来配置事务的同步级别。</li></ul><h3 id="6-1-3流复制原理"><a href="#6-1-3流复制原理" class="headerlink" title="6.1.3流复制原理"></a>6.1.3流复制原理</h3><p>备库不断的从主库同步相应的数据，并在备库apply每个WAL record，这里的流复制每次传输单位是WAL日志的record。</p><p><img src="image-20231002221940237.png" alt="image-20231002221940237"></p><h3 id="6-1-4流复制按照同步方式分类流"><a href="#6-1-4流复制按照同步方式分类流" class="headerlink" title="6.1.4流复制按照同步方式分类流"></a>6.1.4流复制按照同步方式分类流</h3><p>复制类似于MySQL的的同步机制，支持以下两种同步机制</p><ul><li>异步流复制</li><li>同步流复制</li></ul><p>在实际生产环境中，建议需要根据环境的实际情况来选择同步或异步模式，同步模式需要等待备库的写盘才能返回成功，如此一来，在主备库复制正常的情况下，能够保证备库的数据不会丢失，但是带来的一个负面问题，一旦备库宕机，主库就会挂起而无法进行正常操作，即在同步模式中，备库对主库的有很大的影响，而异步模式就不会。因此，在生产环境中，大多会选择异步复制模式，而非同步模式.</p><h3 id="6-1-5流复制特点"><a href="#6-1-5流复制特点" class="headerlink" title="6.1.5流复制特点"></a>6.1.5流复制特点</h3><ul><li>延迟极低，不怕大事务</li><li>支持断点续传</li><li>支持多副本</li><li>配置简单</li><li>备库与主库物理完全一致，并支持只读</li></ul><h2 id="6-2实现流复制"><a href="#6-2实现流复制" class="headerlink" title="6.2实现流复制"></a>6.2实现流复制</h2><h3 id="6-2-1基础环境准备"><a href="#6-2-1基础环境准备" class="headerlink" title="6.2.1基础环境准备"></a>6.2.1基础环境准备</h3><p>两个主机节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">10.0.0.4 Master<br>10.0.0.3 Standby<br></code></pre></td></tr></table></figure><p><img src="image-20231002222230041.png" alt="image-20231002222230041"></p><h3 id="6-2-2-Master-节点配置"><a href="#6-2-2-Master-节点配置" class="headerlink" title="6.2.2 Master 节点配置"></a>6.2.2 Master 节点配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在master 10.0.0.4 配置</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建复制的用户并授权</span> <br>[22:26:18 root@PG-Master ~]#psql<br>postgres=# create role repluser with replication login password &#x27;123456&#x27;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改ph_hba.conf进行授权</span><br>[22:26:16 root@PG-Master ~]#vim /pgsql/data/pg_hba.conf <br>host    replication     repluser        0.0.0.0/0               md5<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改配置（可选）：</span><br>[22:31:26 root@PG-Master ~]#vim /pgsql/data/postgresql.conf<br>synchronous_standby_names=&#x27;*&#x27;#开启此项,表示同步方式,需要同时打开synchronous_commit=on，此为默认值，默认是异步方式<br><br>synchronous_commit = on #开启同步模式<br>archive_mode= on #建议打开归档模式，防止长时间无法同步，WAL被覆盖造成数据丢失archive_command = &#x27;[ ! -f /archive/%f ] &amp;&amp; cp %p /archive/%f&#x27;<br>wal_level=replica #设置wal的级别<br>max_wal_senders=5#这个设置可以最多有几个流复制连接，一般有几个从节点就设置几个<br>wal_keep_segments=128#设置流复制保留的最多的WAL文件数目<br>wal_sender_timeout =60s #设置流复制主机发送数据的超时时间<br>max_connections=200#一般查多于写的应用从库的最大连接数要比较大<br>hot_standby=on#对主库无影响，用于将来可能会成为从库,这台机器不仅仅是用于数据归档，也用于数据查询，在从库上配置此项后为只读<br>max_standby_streaming_delay =30s #数据流备份的最大延迟时间<br>wal_receiver_status_interval=10s #多久向主报告一次从的状态,当然从每次数据复制都会向主报告状态，只是设置最长的间隔时间<br>hot_standby_feedback = on #如果有错误的数据复制，是否向主进行反馈<br>wal_log_hints = on#对非关键更新进行整页写入<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启服务</span><br>[22:39:28 root@PG-Master ~]#mkdir /archive<br>[22:39:43 root@PG-Master ~]#chown repluser. /archive/<br>[22:40:18 root@PG-Master ~]#systemctl restart postgresql.service<br><br><br></code></pre></td></tr></table></figure><h3 id="6-2-3-Standby节点配置"><a href="#6-2-3-Standby节点配置" class="headerlink" title="6.2.3 Standby节点配置"></a>6.2.3 Standby节点配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在从节点 10.0.0.3上配置</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">清空数据和归档</span><br>[22:26:10 root@PG-Standby ~]#systemctl stop postgresql<br>[22:42:42 root@PG-Standby ~]#rm -rf /pgsql/data/*<br>[22:42:53 root@PG-Standby ~]#mkdir /archive<br>[22:43:14 root@PG-Standby ~]#rm -rf /archive/*<br>[22:43:21 root@PG-Standby ~]#mkdir -p /pgsql/backup<br>[22:44:05 root@PG-Standby ~]#rm -rf /pgsql/backup/*<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">备份主库数据到备库</span><br>[22:44:16 root@PG-Standby ~]#pg_basebackup -D /pgsql/backup/ -Ft -Pv -Urepluser  -h 10.0.0.4 -p 5432 -R<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">还原备份的数据实现初始的主从数据同步</span><br>[22:46:02 root@PG-Standby ~]#tar xf /pgsql/backup/base.tar -C /pgsql/data/<br>[22:47:26 root@PG-Standby ~]#tar xf /pgsql/backup/pg_wal.tar -C /archive/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">方法1</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改postgresql.conf文件</span><br>[22:47:42 root@PG-Standby ~]#vim /pgsql/data/postgresql.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">添加下面两行</span><br>primary_conninfo = &#x27;host=10.0.0.4 port=5432 user=repluser password=123456&#x27;<br>restore_command = &#x27;cp /archive/%f %p&#x27;  #此行可不配置<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改配置（可选）：</span><br>hot_standby = on#开启此项，此是默认项<br>recovery_target_timeline =latest #默认<br>max_connections=120 #大于等于主节点，正式环境应当重新考虑此值的大小<br>max_standby_streaming_delay = 30s<br>wal_receiver_status_interval = 10s<br>hot_standby_feedback = on<br>max_wal_senders = 15<br>logging_collector = on<br>1og_directory = &#x27;pg_log&#x27;<br>1og_filename = &#x27;postgresq1-%Y-%m-%d_%H%M%s.1og&#x27;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">方法2</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改postgresql.auto.conf文件</span><br>[22:47:42 root@PG-Standby ~]#vim /pgsql/data/postgresql.auto.conf<br>primary_conninfo = &#x27;host=10.0.0.4 port=54321 user=repluser password=123456 sslmode=disable sslcompression=0 gssencmode=disablekrbsrvname=post_session_attrs=any&#x27;#此行自动生成,只修改用户名即可<br>restore_command = &#x27;cp /archive/%f %p&#x27;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启服务</span><br>[22:51:24 root@PG-Standby ~]#systemctl restart postgresql.service<br><br></code></pre></td></tr></table></figure><h3 id="6-2-4监控同步状态"><a href="#6-2-4监控同步状态" class="headerlink" title="6.2.4监控同步状态"></a>6.2.4监控同步状态</h3><h4 id="6-2-4-1在主库查看状态"><a href="#6-2-4-1在主库查看状态" class="headerlink" title="6.2.4.1在主库查看状态"></a>6.2.4.1在主库查看状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在master 10.0.0.4上查看</span><br>[22:42:12 root@PG-Master ~]#pg_controldata <br>pg_control version number:            1300<br>Catalog version number:               202107181<br>Database system identifier:           7285006788378561368<br>Database cluster state:               in production<br><br>postgres=# select pid,state,client_addr,sync_priority,sync_state from pg_stat_replication;<br> pid  |   state   | client_addr | sync_priority | sync_state <br>------+-----------+-------------+---------------+------------<br> 2284 | streaming | 10.0.0.3    |             0 | async<br>(1 row)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">下面只在主节点查看同步模式，注意：如果无从节点连接，将无任何显示信息</span><br>postgres=# select pg_current_wal_insert_lsn(),* from pg_stat_replication;<br>pg_current_wal_insert_lsn | 0/3000148#当前lsn号<br>pid                       | 2284<br>usesysid                  | 16384<br>usename                   | repluser<br>application_name          | walreceiver<br>client_addr               | 10.0.0.3<br>client_hostname           | <br>client_port               | 42434<br>backend_start             | 2023-10-02 22:54:38.290262+08<br>backend_xmin              | <br>state                     | streaming<br>sent_lsn                  | 0/3000148 <br>write_lsn                 | 0/3000148 #同步的lsn号，和上面一致说明同步，有差异表示有延迟<br>flush_lsn                 | 0/3000148<br>replay_lsn                | 0/3000148<br>write_lag                 | <br>flush_lag                 | <br>replay_lag                | <br>sync_priority             | 0<br>sync_state                | async#当前是异步，同步显示位sync<br>reply_time                | 2023-10-02 23:00:18.669813+08<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">服务器查看数据库是否位备库，f表示主库，t表示位备库</span><br>postgres=# select * from pg_is_in_recovery();<br>pg_is_in_recovery | f<br><br>postgres=# select application_name,client_addr,sync_state from pg_stat_replication;<br> walreceiver      | 10.0.0.3    | async<br><br><br>[23:06:41 root@PG-Master ~]#ps aux | grep walsender<br>postgres    2284  0.0  1.0 173784  8128 ?        Ss   22:54   0:00 postgres: walsender repluser 10.0.0.3(42434) streaming 0/30190E0<br><br></code></pre></td></tr></table></figure><h4 id="6-2-4-2在从库查看状态"><a href="#6-2-4-2在从库查看状态" class="headerlink" title="6.2.4.2在从库查看状态"></a>6.2.4.2在从库查看状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在从库10.0.0.3上查看</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">从节点可以读</span><br>testdb=# select * from t1;<br> id <br>----<br>  1<br>  2<br>  3<br>  5<br>(4 rows)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">从节点不支持写</span><br>testdb=# insert into t1 values (4);<br>ERROR:  cannot execute INSERT in a read-only transaction<br><br><br>[22:54:38 root@PG-Standby ~]#pg_controldata <br>pg_control version number:            1300<br>Catalog version number:               202107181<br>Database system identifier:           7285006788378561368<br>Database cluster state:               in archive recovery #备库状态<br>pg_control last modified:             Mon 02 Oct 2023 11:07:38 PM CST<br><br>testdb=# select * from pg_is_in_recovery();<br> pg_is_in_recovery <br>-------------------<br> t<br>(1 row)<br><br><br>testdb=# \x<br>Expanded display is on.<br><br><br>testdb=# select * from pg_stat_wal_receiver;<br>-[ RECORD 1 ]---------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------<br>pid                   | 1797<br>status                | streaming<br>receive_start_lsn     | 0/3000000<br>receive_start_tli     | 1<br>written_lsn           | 0/3019308<br>flushed_lsn           | 0/3019308<br>received_tli          | 1<br>last_msg_send_time    | 2023-10-02 23:13:05.339437+08<br>last_msg_receipt_time | 2023-10-02 23:13:05.339583+08<br>latest_end_lsn        | 0/3019308<br>latest_end_time       | 2023-10-02 23:12:35.320206+08<br>slot_name             | <br>sender_host           | 10.0.0.4<br>sender_port           | 5432<br>conninfo              | user=repluser password=******** channel_binding=disable dbname=replication host=10.0.0.4 port=5432 fallback_application_name=walreceiver sslmode=disable sslcompression=0 sslsni=1 ssl_min_protocol_version=TLSv1.2 gssencmode=disable krbsrvname=postgres target_session_attrs=any<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看进程</span><br>[23:13:52 root@PG-Standby ~]#ps aux | grep postgres<br>postgres    1789  0.0  2.3 172768 17472 ?        Ss   22:54   0:00 /aaps/pgsql/bin/postmaster -D /pgsql/data/<br>postgres    1790  0.0  1.0 172952  8096 ?        Ss   22:54   0:00 postgres: startup recovering 000000010000000000000003#恢复进程<br>postgres    1793  0.0  0.7 172768  5396 ?        Ss   22:54   0:00 postgres: checkpointer <br>postgres    1794  0.0  0.3 172768  2608 ?        Ss   22:54   0:00 postgres: background writer <br>postgres    1796  0.0  0.3  27552  2736 ?        Ss   22:54   0:00 postgres: stats collector <br>postgres    1797  0.0  0.7 177372  5712 ?        Ss   22:54   0:00 postgres: walreceiver streaming 0/3019308#接受wal日志进程<br>postgres    1826  0.0  1.8 175144 13748 ?        Ss   23:10   0:00 postgres: postgres testdb [local] idle<br>root        1831  0.0  0.1  12144  1176 pts/0    S+   23:13   0:00 grep --color=auto postgres<br><span class="hljs-meta prompt_">#</span><br></code></pre></td></tr></table></figure><h3 id="6-2-5切换主从"><a href="#6-2-5切换主从" class="headerlink" title="6.2.5切换主从"></a>6.2.5切换主从</h3><h4 id="6-2-5-1将从库切换为主库"><a href="#6-2-5-1将从库切换为主库" class="headerlink" title="6.2.5.1将从库切换为主库"></a>6.2.5.1将从库切换为主库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在从库 10.0.0.3上配置</span><br>[23:16:13 postgres@PG-Standby ~]$pg_ctl promote<br>waiting for server to promote.... done<br>server promoted<br>[23:16:26 postgres@PG-Standby ~]$pg_controldata <br>pg_control version number:            1300<br>Catalog version number:               202107181<br>Database system identifier:           7285006788378561368<br>Database cluster state:               in production<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启服务</span><br>[23:18:49 root@PG-Standby ~]#systemctl restart postgresql<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">恢复正常模式</span><br>postgres=# select pg_wal_replay_resume();<br><br></code></pre></td></tr></table></figure><h4 id="6-2-5-2原主库切换为从库"><a href="#6-2-5-2原主库切换为从库" class="headerlink" title="6.2.5.2原主库切换为从库"></a>6.2.5.2原主库切换为从库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在原主库服务器10.0.0.4上配置</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在原主库修复故障后，在主库服务器重复上面Standby节点的6.2.3的步骤</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在原主库服务器创建standby.signal文件</span><br>[23:21:29 root@PG-Master ~]#touch $PGDATA/standby.signal<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在原主库服务器启动服务</span><br>[23:34:26 root@PG-Master ~]#systemctl restart postgresql.service<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在主服务器上查看状态</span><br>[23:35:50 root@PG-Master ~]#pg_controldata <br>pg_control version number:            1300<br>Catalog version number:               202107181<br>Database system identifier:           7285006788378561368<br>Database cluster state:               in archive recovery<br><br>testdb=# select * from pg_is_in_recovery();<br> t<br></code></pre></td></tr></table></figure><h4 id="6-2-5-3重新验证同步状态"><a href="#6-2-5-3重新验证同步状态" class="headerlink" title="6.2.5.3重新验证同步状态"></a>6.2.5.3重新验证同步状态</h4><p>在新主库创建数据，验证是否能同步至原主库</p><h3 id="6-2-6实现同步的流复制"><a href="#6-2-6实现同步的流复制" class="headerlink" title="6.2.6实现同步的流复制"></a>6.2.6实现同步的流复制</h3><h4 id="6-2-6-1配置同步的流复制"><a href="#6-2-6-1配置同步的流复制" class="headerlink" title="6.2.6.1配置同步的流复制"></a>6.2.6.1配置同步的流复制</h4><p>主节点需要特殊的如下配置，从节点同6.2.3配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[22:31:26 root@PG-Master ~]#vim /pgsql/data/postgresql.conf<br>synchronous_standby_names=&#x27;*&#x27; #开启此项,表示同步方式,需要同时打开<br>synchronous_commit=on #此为默认值，默认是异步方式<br></code></pre></td></tr></table></figure><h4 id="6-2-6-2验证同步状态"><a href="#6-2-6-2验证同步状态" class="headerlink" title="6.2.6.2验证同步状态"></a>6.2.6.2验证同步状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在主节点查看<span class="hljs-built_in">sync</span>状态</span><br>postgres=# select pid,state,client_addr,sync_priority,sync_state from pg_stat_replication;<br> pid  |   state   | client_addr | sync_priority | sync_state <br>------+-----------+-------------+---------------+------------<br> 1466 | streaming | 10.0.0.4    |             1 | sync<br>(1 row)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">从节点停止服务</span><br>[23:36:06 root@PG-Master ~]#systemctl stop postgresql.service<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">此种状态下主节点只能读，写入时会处于卡顿状态，直至从节点恢复正常同步</span><br>testdb=# delete from t1 where id=8;<br>....<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第七周作业</title>
    <link href="/2023/09/11/%E7%AC%AC%E4%B8%83%E5%91%A8%E4%BD%9C%E4%B8%9A/"/>
    <url>/2023/09/11/%E7%AC%AC%E4%B8%83%E5%91%A8%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><hr><h1 id="1-总结pg和mysql的优劣势。"><a href="#1-总结pg和mysql的优劣势。" class="headerlink" title="1 总结pg和mysql的优劣势。"></a>1 总结pg和mysql的优劣势。</h1><p><strong>MySQL相对于PostgreSQL的劣势：</strong></p><table><thead><tr><th><strong>MySQL</strong></th><th><strong>PostgreSQL</strong></th></tr></thead><tbody><tr><td>最重要的引擎InnoDB很早就由Oracle公司控制。目前整个MySQL数据库都由Oracle控制。</td><td>BSD协议，没有被大公司垄断。</td></tr><tr><td>对复杂查询的处理较弱，查询优化器不够成熟</td><td>很强大的查询优化器，支持很复杂的查询处理。</td></tr><tr><td>只有一种表连接类型:嵌套循环连接(nested-loop),不支持排序-合并连接(sort-merge join)与散列连接(hash join)。</td><td>都支持</td></tr><tr><td>性能优化工具与度量信息不足</td><td>提供了一些性能视图，可以方便的看到发生在一个表和索引上的select、delete、update、insert统计信息，也可以看到cache命中率。网上有一个开源的pgstatspack工具。</td></tr><tr><td>InnoDB的表和索引都是按相同的方式存储。也就是说表都是索引组织表。这一般要求主键不能太长而且插入时的主键最好是按顺序递增，否则对性能有很大影响。</td><td>不存在这个问题。</td></tr><tr><td>大部分查询只能使用表上的单一索引;在某些情况下，会存在使用多个索引的查询,但是查询优化器通常会低估其成本,它们常常比表扫描还要慢。</td><td>不存在这个问题</td></tr><tr><td>表增加列，基本上是重建表和索引，会花很长时间。</td><td>表增加列，只是在数据字典中增加表定义，不会重建表</td></tr><tr><td>存储过程与触发器的功能有限。可用来编写存储过程、触发器、计划事件以及存储函数的语言功能较弱</td><td>除支持pl/pgsql写存储过程，还支持perl、python、Tcl类型的存储过程：pl/perl，pl/python，pl/tcl。 也支持用C语言写存储过程。</td></tr><tr><td>不支持Sequence。</td><td>支持</td></tr><tr><td>不支持函数索引，只能在创建基于具体列的索引。 不支持物化视图。</td><td>支持函数索引，同时还支持部分数据索引，通过规则系统可以实现物化视图的功能。</td></tr><tr><td>执行计划并不是全局共享的, 仅仅在连接内部是共享的。</td><td>执行计划共享</td></tr><tr><td>MySQL支持的SQL语法(ANSI SQL标准)的很小一部分。不支持递归查询、通用表表达式（Oracle的with 语句）或者窗口函数（分析函数）。</td><td>都 支持</td></tr></tbody></table><table><thead><tr><th>不支持用户自定义类型或域(domain)</th><th>支持。</th></tr></thead><tbody><tr><td>对于时间、日期、间隔等时间类型没有秒以下级别的存储类型</td><td>可以精确到秒以下。</td></tr><tr><td>身份验证功能是完全内置的，不支持操作系统认证、PAM认证，不支持LDAP以及其它类似的外部身份验证功能。</td><td>支持OS认证、Kerberos 认证 、Ident 的认证、LDAP 认证、PAM 认证</td></tr><tr><td>不支持database link。有一种叫做Federated的存储引擎可以作为一个中转将查询语句传递到远程服务器的一个表上,不过,它功能很粗糙并且漏洞很多</td><td>有dblink，同时还有一个dbi-link的东西，可以连接到oracle和mysql上。</td></tr><tr><td>Mysql Cluster可能与你的想象有较大差异。开源的cluster软件较少。 复制(Replication)功能是异步的,并且有很大的局限性.例如,它是单线程的(single-threaded),因此一个处理能力更强的Slave的恢复速度也很难跟上处理能力相对较慢的Master.</td><td>有丰富的开源cluster软件支持。</td></tr><tr><td>explain看执行计划的结果简单。</td><td>explain返回丰富的信息。</td></tr><tr><td>类似于ALTER TABLE或CREATE TABLE一类的操作都是非事务性的.它们会提交未提交的事务，并且不能回滚也不能做灾难恢复</td><td>DDL也是有事务的。</td></tr></tbody></table><p><strong>PostgreSQL主要优势：</strong></p><figure class="highlight http"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs http">　1. PostgreSQL完全免费，而且是BSD协议，如果你把PostgreSQL改一改，然后再拿去卖钱，也没有人管你，这一点很重要，这表明了PostgreSQL数据库不会被其它公司控制。oracle数据库不用说了，是商业数据库，不开放。而MySQL数据库虽然是开源的，但现在随着SUN被oracle公司收购，现在基本上被oracle公司控制，其实在SUN被收购之前，MySQL中最重要的InnoDB引擎也是被oracle公司控制的，而在MySQL中很多重要的数据都是放在InnoDB引擎中的，反正我们公司都是这样的。所以如果MySQL的市场范围与oracle数据库的市场范围冲突时，oracle公司必定会牺牲MySQL，这是毫无疑问的。<br>2.与PostgreSQl配合的开源软件很多，有很多分布式集群软件，如pgpool、pgcluster、slony、plploxy等等，很容易做读写分离、负载均衡、数据水平拆分等方案，而这在MySQL下则比较困难。<br>3. PostgreSQL源代码写的很清晰，易读性比MySQL强太多了，怀疑MySQL的源代码被混淆过。所以很多公司都是基本PostgreSQL做二次开发的。<br>4. PostgreSQL在很多方面都比MySQL强，如复杂SQL的执行、存储过程、触发器、索引。同时PostgreSQL是多进程的，而MySQL是线程的，虽然并发不高时，MySQL处理速度快，但当并发高的时候，对于现在多核的单台机器上，MySQL的总体处理性能不如PostgreSQL，原因是MySQL的线程无法充分利用CPU的能力。<br></code></pre></td></tr></table></figure><p><strong>MySQL相对于PG的优势</strong></p><p>1.innodb的基于回滚段实现的MVCC机制，相对PG新老数据一起存放的基于XID的MVCC机制，是占优的。新老数据一起存放，需要定时触 发VACUUM，会带来多余的IO和数据库对象加锁开销，引起数据库整体的并发能力下降。而且VACUUM清理不及时，还可能会引发数据膨胀。</p><p>2.MySQL采用索引组织表，这种存储方式非常适合基于主键匹配的查询、删改操作，但是对表结构设计存在约束。</p><p>3.MySQL的优化器较简单，系统表、运算符、数据类型的实现都很精简，非常适合简单的查询操作。</p><p>4.MySQL相对于PG在国内的流行度更高，PG目前在国使用量相对少。</p><p>5.MySQL的存储引擎插件化机制，使得它的应用场景更加广泛，比如除了innodb适合事务处理场景外，myisam适合静态数据的查询场景。</p><h1 id="2-总结pg二进制安装和编译安装。"><a href="#2-总结pg二进制安装和编译安装。" class="headerlink" title="2 总结pg二进制安装和编译安装。"></a>2 总结pg二进制安装和编译安装。</h1><h2 id="2-1-二进制安装"><a href="#2-1-二进制安装" class="headerlink" title="2.1 二进制安装"></a>2.1 二进制安装</h2><p>各linux发行版中大多都内置了PGSQL的二进制安装包，但内置版本相对旧一些，对于二进制包的安装方法是通过不同发行版本的Linux下的包管理器进行的，如在RHEL系统相关版本下用yum命令，在Ubuntu下用apt命令。</p><h2 id="2-2-源码编译安装"><a href="#2-2-源码编译安装" class="headerlink" title="2.2 源码编译安装"></a>2.2 源码编译安装</h2><h3 id="2-2-1-编译安装过程说明"><a href="#2-2-1-编译安装过程说明" class="headerlink" title="2.2.1 编译安装过程说明"></a>2.2.1 编译安装过程说明</h3><p>第一步：下载源代码</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">https://www.postgresql.org/ftp/source/<br>https://mirrors.aliyun.com/postgresql/source/<br></code></pre></td></tr></table></figure><p>第二步：编译安装。过程与Linux下其他软件的编译安装过程相同</p><ul><li>./configure</li><li>make</li><li>make install</li></ul><p>第三步：编译安装完成后执行如下步骤</p><ul><li>使用initdb命令初使用化数据库</li><li>启动数据库实例</li></ul><h3 id="2-2-2-系统初始化和优化配置"><a href="#2-2-2-系统初始化和优化配置" class="headerlink" title="2.2.2 系统初始化和优化配置"></a>2.2.2 系统初始化和优化配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">关闭防火墙和SELinux等</span><br>systemctl disable firewalld<br>sed -i &#x27;/^SELINUX=/c SELINUX=Disabled&#x27;  /etc/selinux/config<br><span class="hljs-meta prompt_">#</span><span class="language-bash">内核参数优化</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">vi /etc/sysctl.conf</span><br>kernel.shmmax=68719476736（CentosS6以前版本默认值，CentoS7默认为18446744073692774399)<br>kernel.shma11 = 4294967296（CentoS6以前版本默认值，CentoS7默认为18446744073692774399)<br>kernel.shmmni = 4096<br>kernel.sem = 50100 64128000 50100 1280<br>fs.file-max = 7672460<br>net.ipv4.ip_local_port_range = 9000 65000<br>net.core.rmem_default = 1048576<br>net.core.rmem_max = 4194304<br>net.core.wmem_default = 262144<br>net.core.wmem_max = 1048576<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">vim /etc/security/limits.conf</span><br>* - nofile 100000<br>* - nproc 100000<br>* - memlock 60000<br></code></pre></td></tr></table></figure><h3 id="2-2-3-安装依赖包"><a href="#2-2-3-安装依赖包" class="headerlink" title="2.2.3 安装依赖包"></a>2.2.3 安装依赖包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">RHEL系统</span><br>yum install -y gcc make readline-devel zlib-devel<br><span class="hljs-meta prompt_">#</span><span class="language-bash">ubuntu</span><br>apt update<br>apt install -y gcc make libreadline-dev zlib1g-dev<br></code></pre></td></tr></table></figure><h3 id="2-2-4-源码编译安装"><a href="#2-2-4-源码编译安装" class="headerlink" title="2.2.4 源码编译安装"></a>2.2.4 源码编译安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">下载解压缩</span><br>[21:41:20 root@rocky8 ~]#wget https://mirrors.aliyun.com/postgresql/source/v12.9/postgresql-12.9.tar.gz<br>[21:45:00 root@rocky8 ~]#tar xf postgresql-12.9.tar.gz <br>[21:45:10 root@rocky8 ~]#cd postgresql-12.9/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看安装说明</span><br>[21:47:48 root@rocky8 postgresql-12.9]#cat /root/postgresql-12.9/INSTALL<br> ./configure<br>    make<br>    su<br>    make install<br>    adduser postgres<br>    mkdir /usr/local/pgsql/data<br>    chown postgres /usr/local/pgsql/data<br>    su - postgres<br>    /usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data<br>    /usr/local/pgsql/bin/pg_ctl -D /usr/local/pgsql/data -l logfile start<br>    /usr/local/pgsql/bin/createdb test<br>    /usr/local/pgsql/bin/psql test<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">开始编译三步曲，默认安装在/usr/local/pgsq1</span><br>[21:52:14 root@rocky8 postgresql-12.9]#./configure --prefix=/apps/pgsql --with-pgport=5432<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看编译选项（可选）</span><br><br><br>[21:57:11 root@rocky8 postgresql-12.9]#make -j 3 world  #默认make不包括文档和其他模块<br>[22:00:16 root@rocky8 postgresql-12.9]#make install-world  #默认make install不包括文档和其他模块<br></code></pre></td></tr></table></figure><h3 id="2-2-5-创建数据库用户和组"><a href="#2-2-5-创建数据库用户和组" class="headerlink" title="2.2.5  创建数据库用户和组"></a>2.2.5  创建数据库用户和组</h3><p>PostgreSQL默认不支持以root身份启动服务，虽然也可修改源码实现root启动，但基于安全考虑不建议，因此必须创建一个用于启动PostgrepSQL的普通用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建数据库用户和组，注意此用户需要可以交互登录</span><br>[22:07:25 root@rocky8 ~]#useradd -s /bin/bash -m -d /home/postgres postgres<br>[22:08:47 root@rocky8 ~]#echo -e &#x27;123456\n123456&#x27; | passwd postgres<br>[22:11:34 root@rocky8 ~]#echo postgres:123456 | chpasswd<br></code></pre></td></tr></table></figure><h3 id="2-2-6创建数据目录并授权"><a href="#2-2-6创建数据目录并授权" class="headerlink" title="2.2.6创建数据目录并授权"></a>2.2.6创建数据目录并授权</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[22:11:46 root@rocky8 ~]#mkdir -pv /pgsql/data/<br>[22:13:28 root@rocky8 ~]#chown postgres. /pgsql/data/<br></code></pre></td></tr></table></figure><h3 id="2-2-7设置环境变量"><a href="#2-2-7设置环境变量" class="headerlink" title="2.2.7设置环境变量"></a>2.2.7设置环境变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">[22:14:38 root@rocky8 ~]#vim /etc/profile.d/pgsql.sh<br>[22:19:11 root@rocky8 ~]#cat /etc/profile.d/pgsql.sh<br>export PGHOME=/apps/pgsql<br>export PATH=$PGHOME/bin/:$PATH<br>export PGDATA=/pgsql/data<br>export PGUSER=postgres<br>export MANPATH=/apps/pgsql/share/man:$MANPATH<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">验证</span><br>[22:19:15 root@rocky8 ~]#su - postgres<br>[22:20:22 postgres@rocky8 ~]$psql --version<br>psql (PostgreSQL) 12.9<br></code></pre></td></tr></table></figure><h3 id="2-2-8初始化数据库"><a href="#2-2-8初始化数据库" class="headerlink" title="2.2.8初始化数据库"></a>2.2.8初始化数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[22:19:15 root@rocky8 ~]#su - postgres<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">初始化</span><br>[22:20:45 postgres@rocky8 ~]$initdb  #前面加了环境变量，所以这里可以不加其他选项<br><br>initdb -D $PGDATA<br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果没有指定选项-D&lt;datadir&gt;，按环境变量<span class="hljs-variable">$PGDATA</span>指定的路径进行初始化</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">生产建议初始化方式</span><br>initdb -A md5 -D $PGDATA -E utf8 --locale=C -U postgres -W<br>-A#指定local connections默认的身份验证方法<br>-D#指定数据目录<br>-E #指定字符集<br>--locale=C#指定语言环境<br>-U #指定数据库superuser用户名<br>-W#指定数据库superuser的用户密码<br></code></pre></td></tr></table></figure><h3 id="2-2-9-启动和关闭服务"><a href="#2-2-9-启动和关闭服务" class="headerlink" title="2.2.9 启动和关闭服务"></a>2.2.9 启动和关闭服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">启动</span><br>[22:22:34 postgres@rocky8 ~]$pg_ctl -l logfile start <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">停止</span><br>[22:28:42 postgres@rocky8 ~]$pg_ctl stop<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动命令：</span><br>pg_ctl -D /pgsq1/data -1 logfile start<br>postgres -D /pgsq1/data &amp;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">停止数据库的命令如下：</span><br>pg_ct1 stop -D $PGDATA [-m SHUTDOWN-MODE]<br>其中-m是指定数据库的停止方法，有以下三种：<br>smart：等所有的连接中止后，关闭数据库。如果客户端连接不终止，则无法关闭数据库。<br>fast：快速关闭数据库，断开客户端的连接，让已有的事务回滚，然后正常关闭数据库。相当于oracle数据库关闭时的immediate模式。此为默认值，建议使用<br>immediate：立即关闭数据库，相当于数据库进程立即停止，直接退出，下次启动数据库需要进行恢复。相当于oracle数据库关闭时的 abort模式<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">smart关闭</span><br>pg_ctl stop -D /pgsq1/data/ -ms<br><span class="hljs-meta prompt_">#</span><span class="language-bash">fast关闭，推荐使用，也是默认模式</span><br>pg_ctl stop -D /pgsq1/data/ -mf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">immediate 相当于ki11-9</span><br>pg_ctl stop -D /pgsq1/data/ -mi<br><span class="hljs-meta prompt_">#</span><span class="language-bash">或者发送信号，直接向数据库主进程发送的signal信号有以下三种。</span><br>SIGTERM:发送此信号为Smart Shutdown关机模式。<br>SIGINT：发送此信号为Fast Shutdown关机模式。<br>SIGQUIT：发送此信号为Immediate Shutdown关机模式。<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启</span><br>pg_ctl restart -mf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">源码目录中内置PostgresQL的启动脚本</span><br>postgresql-12.9/contrib/start-scripts/linux<br></code></pre></td></tr></table></figure><p>范例：实现开机自启动PostgreSQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[22:49:16 root@rocky8 ~]#cp  postgresql-12.9/contrib/start-scripts/linux /etc/init.d/postgressql<br>[22:53:09 root@rocky8 ~]#chmod +x /etc/init.d/postgressql <br>[22:53:50 root@rocky8 ~]#chkconfig --add postgressql<br><br>[22:51:44 root@rocky8 ~]#vim /etc/init.d/postgressql <br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改下面两行</span><br>prefix=/apps/pgsql<br>PGDATA=&quot;/pgsql/data&quot;<br><br><br>[22:54:28 root@rocky8 ~]#service postgressql start <br></code></pre></td></tr></table></figure><p>范例：创建 service 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建新的service文件</span><br>[23:00:02 root@rocky8 ~]#vim /lib/systemd/system/postgresql.service<br>[23:07:25 root@rocky8 ~]#cat /lib/systemd/system/postgresql.service <br>[23:14:29 root@rocky8 ~]#cat /lib/systemd/system/postgresql.service <br>[Unit]<br>Description=PostgreSQL database server<br>After=network.target<br><br><br>[Service]<br>User=postgres<br>Group=postgres<br><br>ExecStart=/apps/pgsql/bin/postmaster -D /pgsql/data<br>ExecReload=/bin/kill -HUP<br><br><br>[Install]<br>WantedBy=multi-user.target<br><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">确认文件内容</span><br>[23:09:34 root@rocky8 ~]#systemctl daemon-reload<br>[23:09:47 root@rocky8 ~]#systemctl cat postgresql.service<br><span class="hljs-meta prompt_"># </span><span class="language-bash">/usr/lib/systemd/system/postgresql.service</span><br>[23:14:29 root@rocky8 ~]#cat /lib/systemd/system/postgresql.service <br>[Unit]<br>Description=PostgreSQL database server<br>After=network.target<br><br><br>[Service]<br>User=postgres<br>Group=postgres<br><br>ExecStart=/apps/pgsql/bin/postmaster -D /pgsql/data<br>ExecReload=/bin/kill -HUP<br><br><br>[Install]<br>WantedBy=multi-user.target<br><br><br>[23:25:49 root@rocky8 ~]#systemctl enable --now postgresql<br><br></code></pre></td></tr></table></figure><h3 id="2-2-10-查看编译和相关信息"><a href="#2-2-10-查看编译和相关信息" class="headerlink" title="2.2.10 查看编译和相关信息"></a>2.2.10 查看编译和相关信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">[14:42:03 root@rocky8 ~]#pg_config<br>BINDIR = /apps/pgsql/bin<br>DOCDIR = /apps/pgsql/share/doc<br>HTMLDIR = /apps/pgsql/share/doc<br>INCLUDEDIR = /apps/pgsql/include<br>PKGINCLUDEDIR = /apps/pgsql/include<br>INCLUDEDIR-SERVER = /apps/pgsql/include/server<br>LIBDIR = /apps/pgsql/lib<br>PKGLIBDIR = /apps/pgsql/lib<br>LOCALEDIR = /apps/pgsql/share/locale<br>MANDIR = /apps/pgsql/share/man<br>SHAREDIR = /apps/pgsql/share<br>SYSCONFDIR = /apps/pgsql/etc<br>PGXS = /apps/pgsql/lib/pgxs/src/makefiles/pgxs.mk<br>CONFIGURE = &#x27;--prefix=/apps/pgsql&#x27; &#x27;--with-pgport=5432&#x27;<br>CC = gcc<br>CPPFLAGS = -D_GNU_SOURCE<br>CFLAGS = -Wall -Wmissing-prototypes -Wpointer-arith -Wdeclaration-after-statement -Werror=vla -Wendif-labels -Wmissing-format-attribute -Wformat-security -fno-strict-aliasing -fwrapv -fexcess-precision=standard -Wno-format-truncation -Wno-stringop-truncation -O2<br>CFLAGS_SL = -fPIC<br>LDFLAGS = -Wl,--as-needed -Wl,-rpath,&#x27;/apps/pgsql/lib&#x27;,--enable-new-dtags<br>LDFLAGS_EX = <br>LDFLAGS_SL = <br>LIBS = -lpgcommon -lpgport -lpthread -lz -lreadline -lrt -lcrypt -ldl -lm <br>VERSION = PostgreSQL 12.9<br></code></pre></td></tr></table></figure><h3 id="2-2-11-源码编译安装脚本"><a href="#2-2-11-源码编译安装脚本" class="headerlink" title="2.2.11 源码编译安装脚本"></a>2.2.11 源码编译安装脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment">#***************************************************************************</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Author:tangbeiting</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">QQ:306876058</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Date:2023-09-16</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">FileName:postgresql_src_install.sh</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">URL:https://xiaohexie00.github.io/</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Description:The <span class="hljs-built_in">test</span> script</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Copyright (C):2023 ALL rights reserved</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">**************************************************************************</span><br>POSTGRESQL_VERSION=12.9<br>INSTALL_DIR=/aaps/pgsql<br>DATA_DIR=/pgsql/data/<br>PORT=5432<br>CPUS=4<br>DB_USER=postgres<br><br>. /etc/os-release<br><br>color () &#123;<br>    RES_COL=60<br>    MOVE_TO_COL=&quot;echo -en \\033[$&#123;RES_COL&#125;G&quot;<br>    SETCOLOR_SUCCESS=&quot;echo -en \\033[1;32m&quot;<br>    SETCOLOR_FAILURE=&quot;echo -en \\033[1;31m&quot;<br>    SETCOLOR_WARNING=&quot;echo -en \\033[1;33m&quot;<br>    SETCOLOR_NORMAL=&quot;echo -en \E[0m&quot;<br>    echo -n &quot;$1&quot; &amp;&amp; $MOVE_TO_COL<br>    echo -n &quot;[&quot;<br>    if [ $2 = &quot;success&quot; -o $2 = &quot;0&quot; ] ;then<br>        $&#123;SETCOLOR_SUCCESS&#125;<br>        echo -n $&quot;  OK  &quot;    <br>    elif [ $2 = &quot;failure&quot; -o $2 = &quot;1&quot;  ] ;then <br>        $&#123;SETCOLOR_FAILURE&#125;<br>        echo -n $&quot;FAILED&quot;<br>    else<br>        $&#123;SETCOLOR_WARNING&#125;<br>        echo -n $&quot;WARNING&quot;<br>    fi<br>    $&#123;SETCOLOR_NORMAL&#125;<br>    echo -n &quot;]&quot;<br>    echo <br>&#125;<br><br>install_postgresql () &#123;<br>    if [ $ID = &#x27;rocky&#x27; -o $ID = &#x27;centos&#x27; ] ; then<br>        yum install -y gcc make readline-devel zlib-devel wget<br>    elif [ $ID = &#x27;ubuntu&#x27; ] ;then<br>        apt update<br>        apt install -y gcc make libreadline-dev zlib1g-dev wget<br>    else<br>        color &quot;不支持此操作系统，退出！&quot; 1<br>        exit<br>    fi<br>    <br>    if [ ! -f postgresql-$&#123;POSTGRESQL_VERSION&#125;.tar.gz  ] ; then<br>        wget https://mirrors.aliyun.com/postgresql/source/v$&#123;POSTGRESQL_VERSION&#125;/postgresql-$&#123;POSTGRESQL_VERSION&#125;.tar.gz<br>    fi<br>    <br>    tar xf postgresql-$&#123;POSTGRESQL_VERSION&#125;.tar.gz<br>    cd postgresql-$&#123;POSTGRESQL_VERSION&#125;/<br>    ./configure --prefix=$&#123;INSTALL_DIR&#125;  --with-pgport=$PORT<br>    make -j $CPUS world<br>    make install-world<br>    <br>    useradd -s /bin/bash -m -d /home/$DB_USER $DB_USER<br>    echo -e &#x27;123456\n123456&#x27; | passwd $DB_USER<br>    <br>    mkdir -pv $&#123;DATA_DIR&#125;<br>    chown $DB_USER.$DB_USER $&#123;DATA_DIR&#125;<br>    <br>    cat &gt; /etc/profile.d/pgsql.sh &lt;&lt;EOF<br>export PGHOME=$&#123;INSTALL_DIR&#125;<br>export PATH=$&#123;INSTALL_DIR&#125;/bin/:\$PATH<br>export PGDATA=/pgsql/data<br>export PGUSER=postgres<br>export MANPATH=$&#123;INSTALL_DIR&#125;/share/man:$MANPATH<br>EOF<br>    <br>   su - $DB_USER -c &#x27;initdb&#x27;  <br>&#125;    <br> <br><br><br>start_service () &#123; <br>    cat &gt; /lib/systemd/system/postgresql.service &lt;&lt;EOF    <br>[Unit]<br>Description=PostgreSQL database server<br>After=network.target<br><br>[Service]<br>User=postgres<br>Group=postgres<br><br>ExecStart=$&#123;INSTALL_DIR&#125;/bin/postmaster -D $&#123;DATA_DIR&#125;<br>ExecReload=/bin/kill -HUP $MAINPID<br><br>[Install]<br>WantedBy=multi-user.target<br>EOF<br><br>    systemctl daemon-reload<br>    systemctl enable --now postgresql<br>    systemctl is-active postgresql.service<br>    if [ $? -eq 0 ] ; then<br>        color &quot;PostgreSQL 安装成功!&quot; 0<br>    else<br>        color &quot;PostgreSQL 安装失败!&quot; 1<br>        exit 1<br>    fi<br>&#125;<br><br>install_postgresql<br>start_service<br></code></pre></td></tr></table></figure><h1 id="3-总结pg服务管理相关命令-pg-ctl-和pgsql命令选项及示例和不同系统的初始化操作"><a href="#3-总结pg服务管理相关命令-pg-ctl-和pgsql命令选项及示例和不同系统的初始化操作" class="headerlink" title="3 总结pg服务管理相关命令 pg_ctl 和pgsql命令选项及示例和不同系统的初始化操作"></a>3 总结pg服务管理相关命令 pg_ctl 和pgsql命令选项及示例和不同系统的初始化操作</h1><h2 id="3-1-pg-ctl-命令管理PostgreSQL"><a href="#3-1-pg-ctl-命令管理PostgreSQL" class="headerlink" title="3.1 pg_ctl 命令管理PostgreSQL"></a>3.1 pg_ctl 命令管理PostgreSQL</h2><p>pg_ctl是一个实用的命令行工具，有以下常见功能：</p><ul><li>初始化 PostgresQL数据库实例</li><li>启动、终止或重启PostgresQL数据库服务。</li><li>查看PostgreSQL数据库服务的状态</li><li>让数据库实例重新读取配置文件。允许给一个指定的PostgresQL进程发送信号</li><li>控制 standby 服务器为可读写</li><li>在Windows平台下允许为数据库实例注册或取消一个系统服务</li></ul><p>pc_ctl 命令格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">[16:58:00 root@rocky8 ~]#pg_ctl --help<br>pg_ctl is a utility to initialize, start, stop, or control a PostgreSQL server.<br><br>Usage:<br>  pg_ctl init[db]   [-D DATADIR] [-s] [-o OPTIONS]<br>  pg_ctl start      [-D DATADIR] [-l FILENAME] [-W] [-t SECS] [-s]<br>                    [-o OPTIONS] [-p PATH] [-c]<br>  pg_ctl stop       [-D DATADIR] [-m SHUTDOWN-MODE] [-W] [-t SECS] [-s]<br>  pg_ctl restart    [-D DATADIR] [-m SHUTDOWN-MODE] [-W] [-t SECS] [-s]<br>                    [-o OPTIONS] [-c]<br>  pg_ctl reload     [-D DATADIR] [-s]<br>  pg_ctl status     [-D DATADIR]<br>  pg_ctl promote    [-D DATADIR] [-W] [-t SECS] [-s]<br>  pg_ctl logrotate  [-D DATADIR] [-s]<br>  pg_ctl kill       SIGNALNAME PID<br><br></code></pre></td></tr></table></figure><h3 id="3-2初始化实例"><a href="#3-2初始化实例" class="headerlink" title="3.2初始化实例"></a>3.2初始化实例</h3><p>初始化PostgresQL数据库实例的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">先切换用户</span><br>su - postgres<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">初始化数据库</span><br>initdb [DATADIR]<br>pg_ctl init[db] [-s] [-D DATADIR] [-o options]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">pg_ctl命令调用initdb命令创建了一个新的PostgresQL数据库实例，参数说明如下。</span><br>-s#只打印错误和警告信息，不打印提示性信息。<br>-D DATADIR#指定数据库实例的数据目录。如果没有指定DATADIR，使用环境变量PGDATA指定的路径<br>-o options #为直接传递给initdb命令的参数<br></code></pre></td></tr></table></figure><p>范例：创建新的数据库实例数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs shell">[17:31:01 root@Master-DNS ~]#chown postgres: /pgsql/<br>[17:31:38 root@Master-DNS ~]#ls -dl /pgsql<br>drwxr-xr-x 3 postgres postgres 18 Sep 16 16:51 /pgsql<br>[17:31:48 root@Master-DNS ~]#su - postgres<br>Last login: Sat Sep 16 17:30:43 CST 2023 on pts/2<br>[17:31:57 postgres@Master-DNS ~]$pg_ctl init -D /pgsql/data2<br>The files belonging to this database system will be owned by user &quot;postgres&quot;.<br>This user must also own the server process.<br><br>The database cluster will be initialized with locale &quot;en_US.UTF-8&quot;.<br>The default database encoding has accordingly been set to &quot;UTF8&quot;.<br>The default text search configuration will be set to &quot;english&quot;.<br><br>Data page checksums are disabled.<br><br>creating directory /pgsql/data2 ... ok<br>creating subdirectories ... ok<br>selecting dynamic shared memory implementation ... posix<br>selecting default max_connections ... 100<br>selecting default shared_buffers ... 128MB<br>selecting default time zone ... Asia/Shanghai<br>creating configuration files ... ok<br>running bootstrap script ... ok<br>performing post-bootstrap initialization ... ok<br>syncing data to disk ... ok<br><br>initdb: warning: enabling &quot;trust&quot; authentication for local connections<br>You can change this by editing pg_hba.conf or using the option -A, or<br>--auth-local and --auth-host, the next time you run initdb.<br><br>Success. You can now start the database server using:<br><br>    /aaps/pgsql/bin/pg_ctl -D /pgsql/data2 -l logfile start<br><br><br>[17:34:20 postgres@Master-DNS ~]$ls /pgsql/data2<br>base          pg_dynshmem    pg_logical    pg_replslot   pg_stat      pg_tblspc    pg_wal                postgresql.conf<br>global        pg_hba.conf    pg_multixact  pg_serial     pg_stat_tmp  pg_twophase  pg_xact<br>pg_commit_ts  pg_ident.conf  pg_notify     pg_snapshots  pg_subtrans  PG_VERSION   postgresql.auto.conf<br></code></pre></td></tr></table></figure><h3 id="3-3服务管理"><a href="#3-3服务管理" class="headerlink" title="3.3服务管理"></a>3.3服务管理</h3><h4 id="3-3-1查看服务状态"><a href="#3-3-1查看服务状态" class="headerlink" title="3.3.1查看服务状态"></a>3.3.1查看服务状态</h4><p>查询数据库实例状态的命令如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">pg_ctl status [-D datadir]<br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http">[17:34:55 postgres@Master-DNS ~]$pg_ctl status -D /pgsql/data2<br>pg_ctl: no server running<br><br></code></pre></td></tr></table></figure><h4 id="3-3-2启动服务"><a href="#3-3-2启动服务" class="headerlink" title="3.3.2启动服务"></a>3.3.2启动服务</h4><p>启动PostgreSQL服务的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">pg_ctl start [-w] [-t seconds] [-s] [-D datadir] [-1 filename] [-o options] [-ppath] [-c]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">参数说明如下。</span><br>start#启动数据库实例<br>-w#等待启动完成-t#等待启动完成的等待秒数，默认为60秒<br>-s#只打印错误和警告信息，不打印提示性信息<br>-D datadir#指定数据库实例的数据目录<br>-l#服务器日志输出附加在“filename”文件上，如果该文件不存在则创建它<br>-o options #声明要直接传递给postgres的选项，具体可见postgres命令的帮助<br>-p path #指定postgres可执行文件的位置。默认情况下postgres可执行文件来自和pg_ct1相同的目录,不必使用该选项。除非要进行一些不同寻常的操作，或者产生了postgres执行文件找不到的错误<br>-c#提高服务器的软限制（ulimit-c），尝试允许数据库实例在有异常时产生一个coredump文件，以便于问题定位和故障分析<br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[17:40:57 postgres@Master-DNS ~]$pg_ctl status -D /pgsql/data2<br>[17:41:42 postgres@Master-DNS ~]$pg_ctl start -D /pgsql/data2<br>waiting for server to start....2023-09-16 17:41:47.177 CST [14233] LOG:  starting PostgreSQL 12.9 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18), 64-bit<br>2023-09-16 17:41:47.178 CST [14233] LOG:  listening on IPv6 address &quot;::1&quot;, port 5432<br>2023-09-16 17:41:47.178 CST [14233] LOG:  listening on IPv4 address &quot;127.0.0.1&quot;, port 5432<br>2023-09-16 17:41:47.178 CST [14233] LOG:  listening on Unix socket &quot;/tmp/.s.PGSQL.5432&quot;<br>2023-09-16 17:41:47.185 CST [14234] LOG:  database system was shut down at 2023-09-16 17:32:32 CST<br>2023-09-16 17:41:47.186 CST [14233] LOG:  database system is ready to accept connections<br> done<br>server started<br><br></code></pre></td></tr></table></figure><h4 id="3-3-3停止服务"><a href="#3-3-3停止服务" class="headerlink" title="3.3.3停止服务"></a>3.3.3停止服务</h4><p>停止PostgresQL数据库的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">pg_ctl stop [-w] [-t seconds] [-s] [-D datadir] [-m s[mart] 1 f[ast] | i[mmediate] ]<br><span class="hljs-meta prompt_">#</span><span class="language-bash">参数说明如下。</span><br>-W#不等待数据库停下来，命令就返回。<br>-m#指定停止的模式。前面已叙述过停止的几种模式了。#其它未说明的参数，其含义与启动数据库命令中的参数相同。<br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[17:42:00 postgres@Master-DNS ~]$pg_ctl stop -D /pgsql/data2<br>waiting for server to shut down....2023-09-16 17:44:45.968 CST [14233] LOG:  received fast shutdown request<br>2023-09-16 17:44:45.969 CST [14233] LOG:  aborting any active transactions<br>2023-09-16 17:44:45.969 CST [14233] LOG:  background worker &quot;logical replication launcher&quot; (PID 14240) exited with exit code 1<br>2023-09-16 17:44:45.970 CST [14235] LOG:  shutting down<br>2023-09-16 17:44:45.974 CST [14233] LOG:  database system is shut down<br> done<br>server stopped<br>[17:44:46 postgres@Master-DNS ~]$pg_ctl status -D /pgsql/data2<br>pg_ctl: no server running<br><br></code></pre></td></tr></table></figure><h4 id="2-3-2-4重启服务"><a href="#2-3-2-4重启服务" class="headerlink" title="2.3.2.4重启服务"></a>2.3.2.4重启服务</h4><p>重启PostgresQL数据库的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">pg_ctl restart [-w] [-t seconds][-s] [-D datadir] [-c] [-m s[mart] [ f[ast] [i[mmediate] ] [-o &quot;options ]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">此命令中的参数与启动或停止命令中的参数含义相同</span><br></code></pre></td></tr></table></figure><h4 id="3-3-4加载配置"><a href="#3-3-4加载配置" class="headerlink" title="3.3.4加载配置"></a>3.3.4加载配置</h4><p>在配置文件中改变参数后，需要使用上面这条命令使参数生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">修改配置文件 postgresql.conf后，让修改生效的方法有两种</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">方法一：在操作系统使用下面命令</span><br>pg_ctl reload [-s] [-D datadir]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">方法二：在psql中使用如下命令</span><br>postgres=# select pg_reload_conf();<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">注意：加载配置操作只针对一些配置的修改生效，有些配置需要重新启动服务才能生效</span><br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">注意：修改端口不支持reload,只能restart</span><br>[17:49:29 postgres@Master-DNS ~]$vim /pgsql/data2/postgresql.conf <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改端口</span><br>[17:50:14 postgres@Master-DNS ~]$echo port=5433 &gt;&gt; /pgsql/data2/postgresql.conf <br>[17:50:33 postgres@Master-DNS ~]$pg_ctl reload -D /pgsql/data2<br>pg_ctl: PID file &quot;/pgsql/data2/postmaster.pid&quot; does not exist<br>Is server running?<br>[17:50:43 postgres@Master-DNS ~]$pg_ctl start -D /pgsql/data2<br>waiting for server to start....2023-09-16 17:50:55.079 CST [14276] LOG:  starting PostgreSQL 12.9 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18), 64-bit<br>2023-09-16 17:50:55.079 CST [14276] LOG:  listening on IPv6 address &quot;::1&quot;, port 5433<br>2023-09-16 17:50:55.079 CST [14276] LOG:  listening on IPv4 address &quot;127.0.0.1&quot;, port 5433<br>2023-09-16 17:50:55.080 CST [14276] LOG:  listening on Unix socket &quot;/tmp/.s.PGSQL.5433&quot;<br>2023-09-16 17:50:55.090 CST [14277] LOG:  database system was shut down at 2023-09-16 17:44:45 CST<br>2023-09-16 17:50:55.091 CST [14276] LOG:  database system is ready to accept connections<br> done<br>server started<br>[17:50:55 postgres@Master-DNS ~]$ss -ntl<br>State          Recv-Q         Send-Q                 Local Address:Port                 Peer Address:Port         Process         <br>LISTEN         0              128                          0.0.0.0:22                        0.0.0.0:*                            <br>LISTEN         0              244                        127.0.0.1:5432                      0.0.0.0:*                            <br>LISTEN         0              244                        127.0.0.1:5433                      0.0.0.0:*                                                      <br>LISTEN         0              244                            [::1]:5432                         [::]:*                            <br>LISTEN         0              244                            [::1]:5433                         [::]:*  <br></code></pre></td></tr></table></figure><h1 id="4-总结pg数据库结构组织"><a href="#4-总结pg数据库结构组织" class="headerlink" title="4 总结pg数据库结构组织"></a>4 总结pg数据库结构组织</h1><h3 id="4-1数据库的结构组织"><a href="#4-1数据库的结构组织" class="headerlink" title="4.1数据库的结构组织"></a>4.1数据库的结构组织</h3><p><img src="image-20230916175616026.png" alt="image-20230916175616026"></p><p>在一个PostgreSQL数据库系统中，数据的组织结构可以分为以下五层：</p><ul><li><p>实例：一个PostgreSQL对应一个安装的数据目录$PGDATA,即一个instance实例</p></li><li><p>数据库：一个PostgresQL数据库服务下可以管理多个数据库，当应用连接到一个数据库时，一般只能访问这个数据库中的数据，而不能访问其他数据库中的内容</p><p>默认情况下初始实例只有三个数据库：postgres、templateo、template1</p></li><li><p>模式：一个数据库可以创建多个不同的名称空间即Schema,用于分隔不同的业务数据</p></li><li><p>表和索引：一个数据库可以有多个表和索引。在PostgreSQL中表的术语称为Relation，而在其他数据库中通常叫Table</p></li><li><p>行和列：每张表中有很多列和行数据。在PostgreSQL中行的术语一般为“Tuple”，而在其他数据库中则叫”Row”。</p></li></ul><h3 id="4-2-PostgreSQL中的术语"><a href="#4-2-PostgreSQL中的术语" class="headerlink" title="4.2 PostgreSQL中的术语"></a>4.2 PostgreSQL中的术语</h3><p>PostgreSQL有一些术语与其他数据库中不一样，了解了这些术语的意思，就能更好地看懂PostgreSQL中的文档。</p><p>与其他数据库不同的术语如下。</p><ul><li>Relation:表示表table或索引index,具体表示的是Table还是Index需要看具体情况</li><li>Tuple：表示表中的行，在其他数据库中使ROW来表示</li><li>Segment:每个表和索引都单独对应一个文件,即为segment,如果文件大小超过1GB,会创建多个相同名称但后缀不同的文件</li><li>Page：表示在磁盘中的数据块。在文件中以块为单位存放数据，默认值为8KB,最大可以为32KB</li><li>Buffer：表示在内存中的数据块。</li></ul><p>范例：编译时可以指定segment大小</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[18:00:19 root@rocky8 postgresql-12.9]#./configure --help | grep segment<br>  --with-segsize=SEGSIZE  set table segment size in GB [1]<br><br></code></pre></td></tr></table></figure><h3 id="4-3模版数据库template0和template1"><a href="#4-3模版数据库template0和template1" class="headerlink" title="4.3模版数据库template0和template1"></a>4.3模版数据库template0和template1</h3><p>template1和template0是PostgreSQL的模板数据库。所谓模板数据库就是创建新database时,PostgreSQL会基于模板数据库制作一份副本，其中会包含所有的数据库设置和数据文件。</p><p>PostgreSQL安装好以后会默认附带两个模板数据库：默认模板库为template1和template1。</p><p>默认模板库为template1,也可以指定template0</p><p>比如:create database db1 template template0</p><p>不要对templateo模板数据库进行任何修改，因为这是原始的干净模板</p><p>如果其它模板数据库被搞坏了，基于这个数据库做一个副本就可以了。</p><p>如果希望定制自己的模板数据库，那么请基于template1进行修改，或者自己另外创建一个模板数据库再修改。</p><p>template1和template0的区别主要有两点：</p><ol><li>template1可以连接,template0不可以连接。</li><li>使用template1模板库建库时不可指定新的encoding和locale,而template0可以。</li></ol><p>注意：template0和template1都不能被删除。</p><h3 id="4-4模式schema"><a href="#4-4模式schema" class="headerlink" title="4.4模式schema"></a>4.4模式schema</h3><p>模式schema是数据库中的一个概念，可以将其理解为一个命名空间。不同的模式下可以有相同名称的表、函数等对象且互相不冲突。提出模式的概念是为了便于管理，只要有权限，每个模式(schema)的对象可以互相调用。</p><p>在PostgreSQL中，一个数据库包含一个或多个模式，一个模式中又包含了表、函数及操作符等数据库对象。</p><p>在PostgresQL中，不能同时访问不同数据库中的对象，当要访问另一个数据库中的表或其他对象时，需要重新连接到这个新的数据库，而模式没有此限制。一个用户在连接到一个数据库后，就可以同时访问这个数据库中多个模式的对象。</p><p>通常情况下，创建和访问表的时候都不用指定模式，实际上这时访问的都是public模式。每当我们创建一个新的数据库时，PostgreSQL都会自动创建一个名为public的模式。当登录到该数据库时，如果没有特殊的指定，都是以该模式public操作各种数据对象的。</p><p>我们需要使用模式有以下几个主要原因：</p><ul><li>允许多个用户在使用同一个数据库时彼此互不干扰。</li><li>把数据库对象放在不同的模式下，然后组织成逻辑组，让它们更便于管理。</li><li>第三方的应用可以放在不同的模式中，这样就不会和其他对象的名字冲突了。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建模式</span><br>create schema schema_name;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除模式</span><br>drop schema schema_name;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看模式</span><br>\dn<br></code></pre></td></tr></table></figure><p>要访问指定模式中的对象，需要先指定一个包含模式名及表名的名字，模式和表之间用一个“点”分开，</p><p>如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">schema_name.table_name<br></code></pre></td></tr></table></figure><h1 id="5-实现pg远程连接。输入密码和无密码登陆"><a href="#5-实现pg远程连接。输入密码和无密码登陆" class="headerlink" title="5 实现pg远程连接。输入密码和无密码登陆"></a>5 实现pg远程连接。输入密码和无密码登陆</h1><p>范例：实现远程连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">修改用户postgres密码</span><br>[22:09:36 root@Master-DNS ~]#psql<br>psql (12.9)<br>Type &quot;help&quot; for help.<br><br>postgres=# alter user postgres with password &#x27;123456&#x27;;<br>ALTER ROLE<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看监听地址和端口，默认为127.0.0.1：5432</span><br>[22:12:56 postgres@Master-DNS ~]$ss -tnl<br>State          Recv-Q         Send-Q                 Local Address:Port                 Peer Address:Port         Process         <br>LISTEN         0              128                          0.0.0.0:22                        0.0.0.0:*                            <br>LISTEN         0              244                          0.0.0.0:5432                      0.0.0.0:*                            <br>LISTEN         0              244                        127.0.0.1:5433                      0.0.0.0:*  <br><br><br><br>[22:18:17 root@Master-DNS ~]#vim /pgsql/data/pg_hba.conf <br><span class="hljs-meta prompt_"># </span><span class="language-bash">IPv4 <span class="hljs-built_in">local</span> connections:</span><br>host    all             all             127.0.0.1/32            trust<br>host    all             all             10.0.0.0/24             md5<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启服务生效</span><br>[22:18:45 root@Master-DNS ~]#pg_ctl restart -D /pgsql/data<br>或者<br>pg_ctl restart -mf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">测试远程登录</span><br>[22:15:57 root@rocky8 ~]#psql -h 10.0.0.3 -p 5432 postgres postgres<br></code></pre></td></tr></table></figure><p>范例：利用.pgpass文件实现免密码连接远程posgresql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell">[22:31:43 root@rocky8 ~]#vim .pgpass<br><span class="hljs-meta prompt_">#</span><span class="language-bash">格式：hostname:port:database:username:password</span><br>10.0.0.3:5432:postgres:postgres:123456<br><br>[22:32:48 root@rocky8 ~]#chmod 600 .pgpass <br>[22:33:07 root@rocky8 ~]#ll .pgpass <br>-rw------- 1 root root 39 Sep 16 22:32 .pgpass<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">psq1默认连接本机，需要指定和.pgpass文件内容相匹配信息才可以使用.pgpass文件连接</span><br>[22:39:29 root@rocky8 ~]#psql -h 10.0.0.3 <br>psql (12.9)<br>Type &quot;help&quot; for help.<br><br>postgres=# \l<br>                                  List of databases<br>   Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges   <br>-----------+----------+----------+-------------+-------------+-----------------------<br> db1       | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | <br> postgres  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | <br> template0 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +<br>           |          |          |             |             | postgres=CTc/postgres<br> template1 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +<br>           |          |          |             |             | postgres=CTc/postgres<br>(4 rows)<br><br>postgres=# \c<br>You are now connected to database &quot;postgres&quot; as user &quot;postgres&quot;.<br><br><br></code></pre></td></tr></table></figure><h1 id="6-总结库，模式，表的添加和删除操作。表数据的CURD。同时总结相关信息查看语句。"><a href="#6-总结库，模式，表的添加和删除操作。表数据的CURD。同时总结相关信息查看语句。" class="headerlink" title="6 总结库，模式，表的添加和删除操作。表数据的CURD。同时总结相关信息查看语句。"></a>6 总结库，模式，表的添加和删除操作。表数据的CURD。同时总结相关信息查看语句。</h1><h2 id="6-1数据库的创建和删除"><a href="#6-1数据库的创建和删除" class="headerlink" title="6.1数据库的创建和删除"></a>6.1数据库的创建和删除</h2><p>创建数据库可以使用SQL语句create database实现，也可以利用createdb命令创建数据库</p><p>createdb是一个SQL命令CREATE DATABASE的封装。</p><p>createdb 命令语法格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">createdb [option...] [dbname [description]]<br>参数说明：<br>options：参数可选项，可以是以下值：<br>-D tablespace指定数据库默认表空间。<br>-e 将createdb 生成的命令发送到服务端。<br>-E encoding指定数据库的编码。<br>-1 1ocale指定数据库的语言环境。<br>-T template指定创建此数据库的模板。<br>--help显示 createdb 命令的帮助信息。<br>-h host指定服务器的主机名。<br>-p port指定服务器监听的端口，或者 socket文件。<br>-U username连接数据库的用户名。<br>-w忽略输入密码。<br>-w连接时强制要求输入密码<br><br>dbname：要创建的数据库名。<br>description：关于新创建的数据库相关的说明。<br></code></pre></td></tr></table></figure><p>删除数据库可以使用SQL语句drop database 实现</p><p>范例：创建数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">方法1</span><br>[20:44:03 root@rocky8 ~]#createdb -h 10.0.0.3 -p 5432 -U postgres db2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">方法2</span><br>[20:44:36 root@Master-DNS ~]#psql<br>postgres=# create database db1;<br>CREATE DATABASE<br>postgres=# \l<br>                                  List of databases<br>   Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges   <br>-----------+----------+----------+-------------+-------------+-----------------------<br> db1       | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | <br> postgres  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | <br> template0 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +<br>           |          |          |             |             | postgres=CTc/postgres<br> template1 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +<br>           |          |          |             |             | postgres=CTc/postgres<br>(4 rows)<br><br><br></code></pre></td></tr></table></figure><p>范例：删除数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[20:44:36 root@Master-DNS ~]#psql<br>postgres=# drop database db1;<br></code></pre></td></tr></table></figure><p>范例：查看数据库存放目录的路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">postgres=# select oid,datname from pg_database;<br>  oid  |  datname  <br>-------+-----------<br> 12726 | postgres<br>     1 | template1<br> 12725 | template0<br> 16385 | testdb<br> 16386 | db2<br>(5 rows)<br><br>[20:49:55 root@Master-DNS ~]#ls /pgsql/data/base/<br>1  12725  12726  16385  16386<br><br></code></pre></td></tr></table></figure><h2 id="6-2管理和查看模式"><a href="#6-2管理和查看模式" class="headerlink" title="6.2管理和查看模式"></a>6.2管理和查看模式</h2><p>一个数据库包含一个或多个已命名的模式，模式又包含表。模式还可以包含其它对象，包括数据类型、函数、操作符等。同一个对象名可以在不同的模式里使用而不会导致冲突；比如，schema1和schema2都可以包含一个名为test的表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建模式</span><br>create schema schema_name;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除模式</span><br>drop schema schema_name;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">列出所有schema</span><br>postgres=# create table public.t1(id int);<br>postgres=# \dt<br>        List of relations<br> Schema | Name | Type  |  Owner   <br>--------+------+-------+----------<br> public | t1   | table | postgres<br>(1 row)<br><br>postgres=# create table public.t2(id int);<br>postgres=# \dn<br>  List of schemas<br>  Name  |  Owner   <br>--------+----------<br> public | postgres<br>(1 row)<br><br>postgres=# \dt<br>        List of relations<br> Schema | Name | Type  |  Owner   <br>--------+------+-------+----------<br> public | t1   | table | postgres<br> public | t2   | table | postgres<br>(2 rows)<br><br><br>postgres=# create schema xiaohexie;<br>CREATE SCHEMA<br>postgres=# create table xiaohexie.t2(id int);<br>CREATE TABLE<br>postgres=# \dt<br>        List of relations<br> Schema | Name | Type  |  Owner   <br>--------+------+-------+----------<br> public | t1   | table | postgres<br> public | t2   | table | postgres<br>(2 rows)<br><br>postgres=# \dn<br>   List of schemas<br>   Name    |  Owner   <br>-----------+----------<br> public    | postgres<br> xiaohexie | postgres<br>(2 rows)<br><br><br>postgres=# \dt xiaohexie.*;<br>          List of relations<br>  Schema   | Name | Type  |  Owner   <br>-----------+------+-------+----------<br> xiaohexie | t2   | table | postgres<br>(1 row)<br></code></pre></td></tr></table></figure><h2 id="6-3查看和连接数据库"><a href="#6-3查看和连接数据库" class="headerlink" title="6.3查看和连接数据库"></a>6.3查看和连接数据库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">列出所有数据库名，相当于MySQL中的show databases;</span><br>postgres=# \l<br>                                  List of databases<br>   Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges   <br>-----------+----------+----------+-------------+-------------+-----------------------<br> db2       | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | <br> postgres  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | <br> template0 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +<br>           |          |          |             |             | postgres=CTc/postgres<br> template1 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +<br>           |          |          |             |             | postgres=CTc/postgres<br> testdb    | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | <br>(5 rows)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">显示数据库详细信息，比如大小</span><br>postgres=# \l+<br>                                                                    List of databases<br>   Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges   |  Size   | Tablespace |                Descr<br>iption                 <br>-----------+----------+----------+-------------+-------------+-----------------------+---------+------------+---------------------<br>-----------------------<br> db2       | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                       | 7513 kB | pg_default | <br> postgres  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                       | 7665 kB | pg_default | default administrati<br>ve connection database<br> template0 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +| 7513 kB | pg_default | unmodifiable empty d<br>atabase<br>           |          |          |             |             | postgres=CTc/postgres |         |            | <br> template1 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +| 7513 kB | pg_default | default template for<br> new databases<br>           |          |          |             |             | postgres=CTc/postgres |         |            | <br> testdb    | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |                       | 7513 kB | pg_default | <br>(5 rows)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看当前连接信息</span><br>postgres=# \c<br>You are now connected to database &quot;postgres&quot; as user &quot;postgres&quot;.<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看当前来南京详细信息</span><br>postgres=# \conninfo <br>You are connected to database &quot;postgres&quot; as user &quot;postgres&quot; via socket in &quot;/tmp&quot; at port &quot;5432&quot;.<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">连接数据库，相当于use</span><br><br><br>postgres=# \c db2<br>You are now connected to database &quot;db2&quot; as user &quot;postgres&quot;.<br><br></code></pre></td></tr></table></figure><h2 id="6-4管理表"><a href="#6-4管理表" class="headerlink" title="6.4管理表"></a>6.4管理表</h2><p>PostgreSQL支持多种数据类型实现表结构的创建</p><p>范例：查看支持数据类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">db2=# select typname from pg_type;<br>                typname                <br>---------------------------------------<br> bool<br> bytea<br> char<br> name<br> int8<br> int2<br> int2vector<br> int4<br> regproc<br> text<br> oid<br> tid<br> xid<br> cid<br> oidvector<br> pg_type<br> pg_attribute<br> pg_proc<br>............<br></code></pre></td></tr></table></figure><p>范例：管理表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs shell">testdb=# \c testdb <br>You are now connected to database &quot;testdb&quot; as user &quot;postgres&quot;.<br>testdb=# \d<br>Did not find any relations.<br>testdb=# create table tb1 (id serial primary key,name text );<br>CREATE TABLE<br>testdb=# \d<br>             List of relations<br> Schema |    Name    |   Type   |  Owner   <br>--------+------------+----------+----------<br> public | tb1        | table    | postgres<br> public | tb1_id_seq | sequence | postgres<br>(2 rows)<br><br><br>testdb=# insert into tb1 (name) select (md5(random()::text)) from generate_series(2,10);<br>INSERT 0 9<br>testdb=# select * from tb1; <br> id |               name               <br>----+----------------------------------<br>  1 | 132e3fcc509eac22115b11f105289c94<br>  2 | a49fef866f321e05a8de6711115b58c5<br>  3 | 92b46b11da21239a005d0a8a566b50fd<br>  4 | c471f760e94e2bf8774fbe63b4125fb2<br>  5 | be6dab02ab4dadf31ee9b6cfdf5018a2<br>  6 | ede4d47ca3326f8ef76d7eacb25bae44<br>  7 | 1a3cad7de238e4668201aa2d1a98bde5<br>  8 | 990a9c4e924be586da2e2b6886aa62ed<br>  9 | 6cfa64ea77ece1c0318eb8873d0914a9<br>(9 rows)<br><br><br><br><br>testdb=# insert  into  tb1 (name) values(&#x27;bb&#x27;) ;<br>INSERT 0 1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#PostgreSQL中插入100万条记录只需要花3s</span></span><br>testdb=# \timing on <br>Timing is on.<br>testdb=# insert into tb1 (name) select (md5(random()::text)) from generate_series (1,1000000);<br>INSERT 0 1000000<br>Time: 3184.463 ms (00:03.184)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">复制表结构，不复制数据</span><br>testdb=# create table tb2 (like tb1);<br>CREATE TABLE<br>Time: 7.417 ms<br>testdb=# \d tb2<br>                Table &quot;public.tb2&quot;<br> Column |  Type   | Collation | Nullable | Default <br>--------+---------+-----------+----------+---------<br> id     | integer |           | not null | <br> name   | text    |           |          | <br><br>testdb=# select * from tb2;<br> id | name <br>----+------<br>(0 rows)<br><br>Time: 0.494 ms<br>testdb=# drop table tb2;<br>DROP TABLE<br>testdb=# \d <br>             List of relations<br> Schema |    Name    |   Type   |  Owner   <br>--------+------------+----------+----------<br> public | tb1        | table    | postgres<br> public | tb1_id_seq | sequence | postgres<br><br></code></pre></td></tr></table></figure><h2 id="6-5表的CRUD"><a href="#6-5表的CRUD" class="headerlink" title="6.5表的CRUD"></a>6.5表的CRUD</h2><p>SQL的CRUD,即Insert,update,delete,select 四条语句范例:：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs shell">testdb=# create table tb2 (id serial ,name varchar(10));<br>CREATE TABLE<br>Time: 1.782 ms<br>testdb=# \d tb2;<br>                                   Table &quot;public.tb2&quot;<br> Column |         Type          | Collation | Nullable |             Default             <br>--------+-----------------------+-----------+----------+---------------------------------<br> id     | integer               |           | not null | nextval(&#x27;tb2_id_seq&#x27;::regclass)<br> name   | character varying(10) |           |          | <br><br>testdb=# insert into tb2 (name) values(&#x27;a&#x27;);<br>INSERT 0 1<br>Time: 0.863 ms<br>testdb=# insert into tb2 (name) values(&#x27;b&#x27;);<br>INSERT 0 1<br>Time: 0.939 ms<br><br><br>testdb=#select *from tb2;<br> id | name <br>----+------<br>  1 | a<br>  2 | b<br>(2 rows)<br><br>Time: 0.753 ms<br><br>testdb=# update tb2 set name=&#x27;c&#x27; where id=&#x27;2&#x27;;<br>UPDATE 1<br>Time: 1.908 ms<br>testdb=# select *from tb2;<br> id | name <br>----+------<br>  1 | a<br>  2 | c<br>(2 rows)<br><br>Time: 0.696 ms<br><br>testdb=# delete from tb2 where id=1;<br>DELETE 1<br>Time: 1.343 ms<br>testdb=# select *from tb2;<br> id | name <br>----+------<br>  2 | c<br>(1 row)<br><br>Time: 0.369 ms<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">清空表</span><br>testdb=# truncate tb1;<br>TRUNCATE TABLE<br>Time: 17.382 ms<br>testdb=# select *from tb1;<br> id | name <br>----+------<br>(0 rows)<br><br>Time: 0.492 ms<br></code></pre></td></tr></table></figure><p>范例：查看表的列信息及大小</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">testdb=# \d tb2;<br>                                   Table &quot;public.tb2&quot;<br> Column |         Type          | Collation | Nullable |             Default             <br>--------+-----------------------+-----------+----------+---------------------------------<br> id     | integer               |           | not null | nextval(&#x27;tb2_id_seq&#x27;::regclass)<br> name   | character varying(10) |           |          | <br><br>testdb=# select pg_column_size(name),name from tb2;<br> pg_column_size | name <br>----------------+------<br>              2 | c<br>(1 row)<br><br>Time: 0.657 ms<br><br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">testdb=# select generate_series(3,6);<br> generate_series <br>-----------------<br>               3<br>               4<br>               5<br>               6<br>(4 rows)<br><br>Time: 0.396 ms<br><br></code></pre></td></tr></table></figure><h1 id="7-总结pg的用户和角色管理。"><a href="#7-总结pg的用户和角色管理。" class="headerlink" title="7 总结pg的用户和角色管理。"></a>7 总结pg的用户和角色管理。</h1><p>在PostgreSQL中，用户与角色是没有区别的。</p><p>用户和角色可以用来实现以下功能：</p><ul><li>用来登录数据库实例、</li><li>管理数据库对象</li></ul><p>创建用户与角色的语法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">CREATE USER name [[WITH] option [ ...]]<br>CREATE ROLE name [[WITH] option [ ...]]<br><span class="hljs-meta prompt_">#</span><span class="language-bash">上面两个命令都可以创建用户，不同的是CREATE USER创建的用户默认可以登录，而CREATE ROLE不可以登录</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">除了CREATE USER默认创建出来的用户有LOGIN的权限，而CREATE ROLE 创建出来的用户没有“LOGIN”的权限之外，CREATE RULE 与 CREATE USER没有其他任何的区别。</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">上面语法中的“option”可以是如下内容。</span><br>SUPERUSER|NOSUPERUSER：表示创建出来的用户是否为超级用户。只有超级用户才能创建超级用户。<br>CREATEDB /NOCREATEDB：指定创建出来的用户是否有执行“CREATE DATABASE&#x27;的权限。<br>CREATEROLE NOCREATEROLE：指定创建出来的用户是否有创建其他角色的权限。<br>CREATEUSER NOCREATEUSER：指定创建出来的用户是否有创建其他用户的权限。<br>INHERIT |NOINHERIT：如果创建的一个用户拥有某一个或某几个角色，这时若指定INHERIT，则表示用户自动拥有相应角色的权限，否则这个用户没有该角色的权限。<br>LOGIN|NOLOGIN：指定创建出来的用户是否有“LOGIN”的权限，可以临时地禁止一个用户的“LOGIN”权限，这时此用户就不能连接到数据库<br>CONNECTION LIMIT connlimit：指定该用户可以使用的并发连接数量。默认值是-1，表示没有限制。<br>[ENCRYPTED | UNENCRYPTED ] PASSWORD&#x27;paSSWord&#x27;：用于控制存储在系统表里面的口令是否加密。<br>VALID UNTIL&#x27;timestamp&#x27;：密码失效时间，如果不指定这个子句，那么口令将永远有效。<br>INROLE role name [，...]：指定用户成为哪些角色的成员，请注意没有任何选项可以把新角色添加为管理员，必须使用独立的GRANT命令来做这件事情。<br>IN GROUP role_name [,...]:与IN ROLE相同,是已过时的语法。<br>ROLE role_name [,...]:role_name将成为这个新建的角色的成员。<br>ADMIN role_name[,...]:role_name将有这个新建角色的WITH ADMIN OPTION权限。<br>USER role_name[,…]:与ROLE子句相同,但已过时。<br>SYSID uid：此子句主要是为了SQL向下兼容，实际没有什么用处。<br></code></pre></td></tr></table></figure><h2 id="7-2用户管理案例"><a href="#7-2用户管理案例" class="headerlink" title="7.2用户管理案例"></a>7.2用户管理案例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看帮助</span><br>\h create user<br>\h alter user<br>\h drop user<br>\h create role<br>\h alter role<br>\h drop role<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">以下两个命令用法相似</span><br>create user#创建的用户默认可以连接<br>create role#创建的用户默认无法连接<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改用户</span><br>alter user<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除用户</span><br>drop user<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">显出所有用户和角色</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">\<span class="hljs-built_in">du</span>和\dg命令等价。原因是在PostgreSQL数据库中用户和角色不分的。</span><br>\du<br>\dg<br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建可以登录的用户和密码</span><br>create user wang with password &#x27;123456&#x27;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建不可登录用户</span><br>create role zhao with password &#x27;123456&#x27;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建可以连接的用户</span><br>create role li with login password &#x27;123456&#x27; valid until &#x27;2025-12-31&#x27;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建管理员</span><br>create role admin with superuser login password &#x27;123456&#x27;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建复制用户</span><br>create role repl replication login  encrypted password &#x27;123456&#x27;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改密码</span><br>alter user admin with password &#x27;12345678&#x27;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改权限和密码</span><br>alter user wang with nologin password &#x27;123&#x27;;<br>alter user zhao with login ;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除用户</span><br>drop user zhao ;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看用户信息</span><br>\du<br><br>                                   List of roles<br> Role name |                         Attributes                         | Member of <br>-----------+------------------------------------------------------------+-----------<br> admin     | Superuser                                                  | &#123;&#125;<br> li        | Password valid until 2025-12-31 00:00:00+08                | &#123;&#125;<br> postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | &#123;&#125;<br> repl      | Replication                                                | &#123;&#125;<br> wang      | Cannot login                                               | &#123;&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看指定用户信息</span><br>\du wang<br><br>            List of roles<br> Role name |  Attributes  | Member of <br>-----------+--------------+-----------<br> wang      | Cannot login | &#123;&#125;<br><br></code></pre></td></tr></table></figure><p>范例：修改 postgres用户密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">使用postgres用户登录（PostgresSQL安装后会自动创建postgres用户）</span><br>[root@rocky8 ~]#su -postgres<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">登录postgresq1数据库</span><br>[root@rocky8 ~]# psql -U postgres<br><span class="hljs-meta prompt_">#</span><span class="language-bash">安全起见，修改数据库管理员postgres用户的密码</span><br>postgres=# ALTER USER postgres WITH ENCRYPTED PASSWORD &#x27;123456&#x27;;<br>ALTER ROLE<br></code></pre></td></tr></table></figure><h2 id="7-3权限管理"><a href="#7-3权限管理" class="headerlink" title="7.3权限管理"></a>7.3权限管理</h2><p>在PostgreSQL数据库中，每个数据库的对象（包括数据库）都有一个所有者，也就是说任何数据库对象都是属于某个用户的，所有者默认就拥有所有权限。所以不需要把对象的权限再赋给所有者。自己创建的数据库对象，自己当然有全部的权限。当然，所有者出于安全考虑也可以选择废弃一些自己的权限。在PostsgreSQL数据库中，删除一个对象及任意修改它的权利是所有者固有的，不能被赋予或撤销。所有者也隐含地拥有把操作该对象的权限赋给别人的权利。</p><p>一个用户的权限分为两类，一类是在创建用户时就指定的权限，这些权限如下：</p><ul><li>超级用户的权限</li><li>创建数据库的权限</li><li>是否允许LOGIN的权限</li></ul><p>以上这些权限是创建用户时指定的，后续可使用ALTER ROLE命令来修改。</p><p>还有一类权限，是由命令GRANT和REVOKE来管理的，这些权限如下：</p><ul><li>在数据库中创建模式（SCHEMA)</li><li>允许在指定的数据库中创建临时表连接某个数据库</li><li>在模式中创建数据库对象，如创建表、视图函数等</li><li>在一些表中做SELECT、UPDATE、INSERRDELETE等操作等</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">GRANT命令有两个作用</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">1.让某个用户成为某个角色的成员，从而使其拥有角色的权限：</span><br>GRANT role_name [, ...] T0 role_name [, ...] [ WITH ADMIN OPTION ];<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2.把某些数据库逻辑结构对象的操作权限赋予某个用户(或角色)，命令的格式如下：</span><br>GRANT some privileqes ON database_object_type object_name TO role_name;<br>其中,“some _privileges”表示在这个数据库对象中的权限,“database_object_type”是数据库对象的类型，如“TABLE”、“SEQUENCE”、“SCHEMA”，等。<br></code></pre></td></tr></table></figure><p><strong>PostgresQL中的权限是按以下几个层次进行管理的：</strong></p><ul><li>cluster权限：实例权限通过pg_hba.conf配置</li><li>管理赋在用户特殊属性上的权限，如超级用户的权限、创建数据库的权限、创建用户的权限、Login权限等</li><li>在数据库中创建模式的权限</li><li>表空间权限：通过grant/revoke控制权限操作表，物化视图，索引等</li><li>在模式中创建数据库对象的权限，如创建表、创建索引，等等</li><li>查询表、往表中插入数据、更新表、删除表中数据的权限</li><li>操作表中某些字段的权限</li></ul><h2 id="7-4权限案例"><a href="#7-4权限案例" class="headerlink" title="7.4权限案例"></a>7.4权限案例</h2><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">授权创建新数据库</span><br>postgres=# alter user wang with createdb;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">database权限设置</span><br>grant create on DATABASE testdb to wang ;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">schema权限</span><br>alter schema wang owner to wang ;<br>grant SELECT,insert,update,delete on all tables in schema wang to wang ;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建<span class="hljs-built_in">test</span>的schema指定所有者为joe</span><br>create schema if not exists test authorization joe;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">object权限</span><br>GRANT select,insert,update,delete ON testdb.t1 TO wang;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建数据库并指定所有者的用户</span><br>create user wang with password &#x27;123456&#x27;;<br>create database zabbix owner wang ;<br></code></pre></td></tr></table></figure><p>范例：创建业务用户和授权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">postgres=# create database pinxixi;<br>postgres=#\c pinxixi<br>pinxixi=#create user wanrentuan with password &#x27;123456&#x27;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">方法1</span><br>pinxixi=#create schema wanrentuan;<br>pinxixi=#ALTER SCHEMA wanrentuan OWNER to wanrentuan;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">方法2</span><br>pinxixi=#CREATE SCHEMA AUTHORIZATION wanrentuan;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">方法3</span><br>pinxixi=#GRANT select, insert,update,delete oN ALL TABLES IN SCHEMA wanrentuanto wanrentuan;<br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">将创建一个名为“<span class="hljs-built_in">readonly</span>”的用户</span><br>CREATE USER readonly with password &#x27;123456&#x27;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">把在public的schema下现有的所有表的SELECT 权限赋给用户<span class="hljs-built_in">readonly</span></span><br>GRANT SELECT ON ALL TABLES IN SCHEMA public TO readonly;<br></code></pre></td></tr></table></figure><h1 id="8-添加mage用户，magedu模式，准备zabbix库，配置mage用户的默认模式magedu，要求mage用户给zabbix库有所有权限。"><a href="#8-添加mage用户，magedu模式，准备zabbix库，配置mage用户的默认模式magedu，要求mage用户给zabbix库有所有权限。" class="headerlink" title="8 添加mage用户，magedu模式，准备zabbix库，配置mage用户的默认模式magedu，要求mage用户给zabbix库有所有权限。"></a>8 添加mage用户，magedu模式，准备zabbix库，配置mage用户的默认模式magedu，要求mage用户给zabbix库有所有权限。</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">postgres=# create user mage with password &#x27;123456&#x27;;<br>CREATE ROLE<br>postgres=# create database zabbix;<br>CREATE DATABASE<br>postgres=# create schema magedu;<br>CREATE SCHEMA<br><br>postgres=# alter database zabbix owner to mage;<br>ALTER DATABASE<br>postgres=# alter schema magedu owner to mage;<br><br></code></pre></td></tr></table></figure><h1 id="9-总结pgsql的进程结构，说明进程间如何协同工作的。"><a href="#9-总结pgsql的进程结构，说明进程间如何协同工作的。" class="headerlink" title="9 总结pgsql的进程结构，说明进程间如何协同工作的。"></a>9 总结pgsql的进程结构，说明进程间如何协同工作的。</h1><p><img src="image-20231003233044764.png" alt="image-20231003233044764"></p><h3 id="9-1进程"><a href="#9-1进程" class="headerlink" title="9.1进程"></a>9.1进程</h3><ul><li><p>Postmaster主进程</p><ul><li><p>它是整个数据库实例的主控制进程，负责启动和关闭该数据库实例。</p></li><li><p>实际上，使用pg ctl来启动数据库时，pg_ctl也是通过运行postgres来启动数据库的，只是它做了一些包装，更容易启动数据库。</p></li><li><p>它是第一个PostgresQL进程，此主进程还会fork出其他子进程，并管理它们。</p></li><li><p>当用户和PostgreSQL建立连接时，首先是和Postmaster进程建立连接。首先，客户端会发出身份验证的信息给Postmaster进程，Postmaster进程根据消息中的信息进行身份验证判断，如果验证通过，它会fork出一个会话子进程为这个连接服务。</p></li><li><p>当某个服务进程出现错误的时候，Postmaster主进程会自动完成系统的恢复。恢复过程中会停掉所有的服务进程，然后进行数据库数据的一致性恢复，等恢复完成后，数据库又可以接受新的连接。</p></li><li><p>验证功能是通过配置文件pg_hba.conf和用户验证模块来提供。</p></li><li><p>postmaster程序是指向postgres的软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[22:39:20 root@Master-DNS ~]#ll /aaps/pgsql/bin/postmaster <br>lrwxrwxrwx 1 root root 8 Sep 16 16:51 /aaps/pgsql/bin/postmaster -&gt; postgres<br></code></pre></td></tr></table></figure></li></ul></li><li><p>BgWriter 后台写进程</p><ul><li>为了提高插入、删除和更新数据的性能，当往数据库中插入或者更新数据时，并不会马上把数据持久化到数据文件中，而是先写入Buffer中</li><li>该辅助进程可以周期性的把内存中的脏数据刷新到磁盘中</li></ul></li><li><p>WalWriter 预写式日志进程</p><ul><li>WAL是write ahead log的缩写,WAL log旧版中称为xlog,相当于MySQL中Redo log</li><li>预写式日志是在修改数据之前，必须把这些修改操作记录到磁盘中，这样后面更新实际数据时，就不需要实时的把数据持久化到文件中了。即使机器突然宕机或者数据库异常退出，导致一部分内存中的脏数据没有及时的刷新到文件中，在数据库重启后，通过读取WAL日志，并把最后一部分WAL日志重新执行一遍，就能恢复到宕机时的状态了</li><li>WAL日志保存在pg_wal目录（早期版本为pg_xlog)下。每个xlog文件默认是16MB,为了满足恢复要求，在pg_wal目录下会产生多个WAL日志，这样就可保证在宕机后，未持久化的数据都可以通过WAL日志来恢复，那些不需要的WAL日志将会被自动覆盖</li></ul></li><li><p>Checkpointer 检查点进程</p><ul><li>检查点（Checkpoints)是事务序列中的点，保证在该点之前的所有日志信息都更新到数据文件中。</li><li>在检查点时，所有脏数据页都冲刷到磁盘并且向日志文件中写入一条特殊的检查点记录。在发生崩溃的时候，恢复器就知道应该从日志中的哪个点（称做redo记录）开始做REDO操作，因为在该记录前的对数据文件的任何修改都已经在磁盘上了。在完成检查点处理之后，任何在redo记录之前写的日志段都不再需要，因此可以循环使用或者删除。在进行WAL归档的时候，这些日志在循环利用或者删除之前应该必须先归档保存</li><li>检查点进程（CKPT)在特定时间自动执行一个检查点,通过向数据库写入进程(BgWriter)传递消息来启动检查点请求</li></ul></li><li><p>AutoVacuum 自动清理进程</p><ul><li>执行delete操作时，旧的数据并不会立即被删除，在更新数据时，也不会在旧的数据上做更新，而是新生成一行数据。旧的数据只是被标识为删除状态，在没有并发的其他事务读到这些旧数据时，它们才会被清除掉</li><li>autovacuum lanucher负责回收垃圾数据的master进程，如果开启了autovacuum的话，那么postmaster会fork这个进程</li><li>autovacuum worker负责回收垃圾数据的worker进程,是lanucher进程fork出来的</li></ul></li><li><p>PgStat统计数据收集进程</p><ul><li>此进程主要做数据的统计收集工作</li><li>收集的信息主要用于查询优化时的代价估算。统计的数据包括对一个表或索引进行的插入、删除、更新操作，磁盘块读写的次数以及行的读次数等。</li><li>系统表pg_statistic中存储了PgStat收集的各类统计信息</li></ul></li><li><p>PgArch归档进程</p><ul><li>默认没有此进程，开启归档功能后才会启动archiver进程</li><li>WAL日志文件会被循环使用，也就是说WAL日志会被覆盖，利用PgArch进程会在覆盖前把WAL日志备份出来，类似于binlog,可用于备份功能</li><li>PostgreSQL从8.X版本开始提供了PITR(Point-In-Time-Recovery)技术,即就是在对数据厍进行过一次全量备份后，该技术将备份时间点后面的WAL日志通过归档进行备份，将来可以使用数据库的全量备份再加上后面产生的WAL日志，即可把数据库向前恢复到全量备份后的任意一个时间点的状态</li></ul></li><li><p>SysLogger 系统日志进程</p><ul><li>默认没有此进程，配置文件postgresql.conf 设置参数logging_collect设置为“on”时，主进程才会启动SysLogger辅助进程</li><li>它从Postmaster主进程、所有的服务进程以及其他辅助进程收集所有的stderr输出，并将这些输出写入到日志文件中</li></ul></li><li><p>startup启动进程</p><ul><li>用于数据库恢复的进程</li></ul></li><li><p>Session 会话进程</p><ul><li>每一个用户发起连接后，一旦验证成功，postmaster进程就会fork一个新的子进程负责连接此用户。</li><li>通常表现为进程形式：postgres postgres [local] idle</li></ul></li></ul><p>案例：查看进程</p><p><img src="image-20230928224114461.png" alt="image-20230928224114461"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[21:44:27 root@Master-DNS ~]#ps auxf|grep ^postgres<br>postgres     843  0.0  0.6 172536 17092 ?        Ss   21:43   0:00 /aaps/pgsql/bin/postmaster -D /pgsql/data/<br>postgres     910  0.0  0.1 172652  5628 ?        Ss   21:43   0:00  \_ postgres: checkpointer   <br>postgres     911  0.0  0.1 172536  4992 ?        Ss   21:43   0:00  \_ postgres: background writer   <br>postgres     912  0.0  0.2 172536  7628 ?        Ss   21:43   0:00  \_ postgres: walwriter   <br>postgres     913  0.0  0.2 173208  6192 ?        Ss   21:43   0:00  \_ postgres: autovacuum launcher   <br>postgres     914  0.0  0.1  27220  3240 ?        Ss   21:43   0:00  \_ postgres: stats collector   <br>postgres     915  0.0  0.1 172960  4968 ?        Ss   21:43   0:00  \_ postgres: logical replication launcher   <br></code></pre></td></tr></table></figure><p>范例：开启归档后再查看进程</p><p><img src="image-20230928225410387.png" alt="image-20230928225410387"></p><h1 id="10-总结pgsql的数据目录中结构，说明每个文件的作用，并可以配上一些示例说明文件的作用。"><a href="#10-总结pgsql的数据目录中结构，说明每个文件的作用，并可以配上一些示例说明文件的作用。" class="headerlink" title="10 总结pgsql的数据目录中结构，说明每个文件的作用，并可以配上一些示例说明文件的作用。"></a>10 总结pgsql的数据目录中结构，说明每个文件的作用，并可以配上一些示例说明文件的作用。</h1><h3 id="数据库目录介绍"><a href="#数据库目录介绍" class="headerlink" title="数据库目录介绍"></a>数据库目录介绍</h3><p><img src="image-20230928230020677.png" alt="image-20230928230020677"></p><p>数据库数据存放在环境变量PGDATA指向数据目录。这个目录是在安装时指定的，所以在安装时需要指定一个合适的目录作为数据目录的根目录，而且，每一个数据库实例都要有一个对应的目录。目录的初始化是使用initdb来完成的。</p><p>初始化完成后，PGDATA数据目录下就会生成三个配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">postgresql.conf#数据库实例的主配置文件，基本上所有的配置参数都在此文件中。<br>pg_hba.conf#认证配置文件，配置了允许哪些IP的主机访问数据库，认证的方法是什么等信息。<br>pg_ident.conf #认证方式ident的用户映射文件。<br></code></pre></td></tr></table></figure><p>此外在PGDATA目录下还会生成如下一些子目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">base #默认表空间的目录，每个数据库都对应一个base目录下的子目录，每个表和索引对应一个独立文件<br>global #这个目录对应pg_globa1表空间，存放实例中的共享对象<br><span class="hljs-meta prompt_">pg_clog#</span><span class="language-bash">存储事务提交状态数据</span><br>pg_bba.conf #数据库访问控制文件<br><span class="hljs-meta prompt_">pg_1og#</span><span class="language-bash">数据库系统日志目录，在查询一些系统错误时就可查看此目录下日志文件。(根据配置定义，可能没有这个目录）</span><br>pg_xact #提交日志commit log的目录,pg 9之前叫<br><span class="hljs-meta prompt_">pg_clogpg_multixact#</span><span class="language-bash">共享行锁的事务状态数据</span><br>pg_notify #异步消息相关的状态数据pg_serial #串行隔离级别的事务状态数据<br>pg_snapshots #存储执行了事务snapshot导出的状态数据<br>pg_stat_tmp #统计信息的临时文件<br>pg_subtrans #子事务状态数据<br><span class="hljs-meta prompt_">pg_stat#</span><span class="language-bash">统计信息的存储目录。关闭服务时,将pg_stat_tmp目录中的内容移动至此目录实现保存</span><br>pg_stat_tmp #统计信息的临时存储目录。开启数据库时存放统计信息<br><span class="hljs-meta prompt_">pg_tblsp#</span><span class="language-bash">存储了指向各个用户自建表空间实际目录的链接文件</span><br><span class="hljs-meta prompt_">pg_twophase#</span><span class="language-bash">使用两阶段提交功能时分布式事务的存储目录</span><br>pg_wal #WAL日志的目录，早期版一本目录为<br>pg_xlogPG_VERSION #数据库版本<br>postmaster.opts #记录数据库启动时的命令行选项<br>postmaster.pid#数据库启动的主进程信息文件，包括PID，SPGDATA目录，数据库启动时间，监听端口，socket文件路径，临听地址，共享内存的地址信息(ipsc可查看），主进程状态<br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">[22:43:39 root@Master-DNS ~]#ll $PGDATA<br>total 64<br>drwx------ 11 postgres postgres   123 Sep 27 17:48 base<br>drwx------  2 postgres postgres  4096 Sep 28 22:05 global<br>drwx------  2 postgres postgres     6 Sep 16 16:51 pg_commit_ts<br>drwx------  2 postgres postgres     6 Sep 16 16:51 pg_dynshmem<br>-rw-------  1 postgres postgres  4795 Sep 16 22:12 pg_hba.conf<br>-rw-------  1 postgres postgres  1636 Sep 16 16:51 pg_ident.conf<br>drwx------  4 postgres postgres    68 Sep 28 21:48 pg_logical<br>drwx------  4 postgres postgres    36 Sep 16 16:51 pg_multixact<br>drwx------  2 postgres postgres    18 Sep 28 21:43 pg_notify<br>drwx------  2 postgres postgres     6 Sep 16 16:51 pg_replslot<br>drwx------  2 postgres postgres     6 Sep 16 16:51 pg_serial<br>drwx------  2 postgres postgres     6 Sep 16 16:51 pg_snapshots<br>drwx------  2 postgres postgres     6 Sep 28 21:43 pg_stat<br>drwx------  2 postgres postgres   168 Sep 28 23:03 pg_stat_tmp<br>drwx------  2 postgres postgres    18 Sep 16 16:51 pg_subtrans<br>drwx------  2 postgres postgres    32 Sep 18 23:00 pg_tblspc<br>drwx------  2 postgres postgres     6 Sep 16 16:51 pg_twophase<br>-rw-------  1 postgres postgres     3 Sep 16 16:51 PG_VERSION<br>drwx------  3 postgres postgres  4096 Sep 18 22:46 pg_wal<br>drwx------  2 postgres postgres    18 Sep 16 16:51 pg_xact<br>-rw-------  1 postgres postgres    88 Sep 16 16:51 postgresql.auto.conf<br>-rw-------  1 postgres postgres 26808 Sep 16 21:25 postgresql.conf<br>-rw-------  1 postgres postgres    45 Sep 28 21:43 postmaster.opts<br>-rw-------  1 postgres postgres    68 Sep 28 21:43 postmaster.pid<br><br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell">[23:03:24 root@Master-DNS ~]#ls /pgsql/data<br>base          pg_hba.conf    pg_notify     pg_stat      pg_twophase  postgresql.auto.conf<br>global        pg_ident.conf  pg_replslot   pg_stat_tmp  PG_VERSION   postgresql.conf<br>pg_commit_ts  pg_logical     pg_serial     pg_subtrans  pg_wal       postmaster.opts<br>pg_dynshmem   pg_multixact   pg_snapshots  pg_tblspc    pg_xact      postmaster.pid<br>[23:04:00 root@Master-DNS ~]#cat /pgsql/data/PG_VERSION <br>12<br>[23:04:17 root@Master-DNS ~]#cat /pgsql/data/postgresql.auto.conf <br><span class="hljs-meta prompt_"># </span><span class="language-bash">Do not edit this file manually!</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">It will be overwritten by the ALTER SYSTEM <span class="hljs-built_in">command</span>.</span><br><br><br>[23:04:33 root@Master-DNS ~]#cat /pgsql/data/postmaster.opts <br>/aaps/pgsql/bin/postgres &quot;-D&quot; &quot;/pgsql/data/&quot;<br>[23:05:05 root@Master-DNS ~]#cat /pgsql/data/postmaster.pid <br>843<br>/pgsql/data<br>1695908629<br>5432<br>/tmp<br>*<br>  5432001         0<br>ready   <br>[23:05:12 root@Master-DNS ~]#find /tmp/ -type s -ls<br>   741700      0 srwxrwxrwx   1  postgres postgres        0 Sep 28 22:41 /tmp/.s.PGSQL.5432<br><br></code></pre></td></tr></table></figure><h1 id="11-尝试将pgsql新版本的运行日志存储到数据库。"><a href="#11-尝试将pgsql新版本的运行日志存储到数据库。" class="headerlink" title="11 尝试将pgsql新版本的运行日志存储到数据库。"></a>11 尝试将pgsql新版本的运行日志存储到数据库。</h1><h5 id="将csv格式运行日志存储至数据库"><a href="#将csv格式运行日志存储至数据库" class="headerlink" title="将csv格式运行日志存储至数据库"></a><strong>将csv格式运行日志存储至数据库</strong></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs shell">[23:56:39 root@Master-DNS ~]#vim /pgsql/data/postgresql.conf<br>log_destination = &#x27;csvlog&#x27; <br>logging_collector = on<br><br>[00:05:38 root@Master-DNS ~]#systemctl restart postgresql<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">先创建对应的表结构，只适用于PG12</span><br>testdb=#CREATE TABLE pg_log(<br>log_time timestamp(3) with time zone,<br>user_name text,<br>database_name text,<br>process_id integer,<br>connection_from text,<br>session_id text,<br>session_line_num bigint,<br>command_tag text,<br>session_start_time timestamp with time zone,<br>virtual_transaction_id text,<br>transaction_id bigint,<br>error_severity text,<br>sql_state_code text,<br>message text,<br>detail text,<br>hint text,<br>interna7_query text,<br>interna7_query_pos integer,<br>context text,<br>query text,<br>query_pos integer,<br>location text,<br>application_name text,<br>PRIMARY KEY (session_id,session_line_num)<br>);<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">将csv文件中的日志导入到表中</span><br>testdb=# copy pg_log from &#x27;/pgsql/data/log/postgresql-2023-09-29_000620.csv&#x27; with csv;<br>COPY 4<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第6周作业</title>
    <link href="/2023/09/03/%E7%AC%AC6%E5%91%A8%E4%BD%9C%E4%B8%9A/"/>
    <url>/2023/09/03/%E7%AC%AC6%E5%91%A8%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="1-简述DDL-DML-DCL-DQL，并且说明mysql各个关键字查询时候的先后顺序"><a href="#1-简述DDL-DML-DCL-DQL，并且说明mysql各个关键字查询时候的先后顺序" class="headerlink" title="1.简述DDL,DML,DCL,DQL，并且说明mysql各个关键字查询时候的先后顺序"></a>1.简述DDL,DML,DCL,DQL，并且说明mysql各个关键字查询时候的先后顺序</h1><h2 id="1-1-简述DDL-DML-DCL-DQL"><a href="#1-1-简述DDL-DML-DCL-DQL" class="headerlink" title="1.1 简述DDL,DML,DCL,DQL"></a>1.1 简述DDL,DML,DCL,DQL</h2><ul><li><p>DDL：数据定义语言</p><p>CREATE（创建数据库，数据表..），DROP（删除数据库，数据表），ALTER（修改数据库，数据表）</p></li><li><p>DML：数据操纵语言</p><p>INSERT(插入数据)，DELETE（删除数据），UPDATE（修改数据）</p><p>软件开发：CRUD</p></li><li><p>DQL：数据查询语言</p><p>SELECT（查询数据）</p></li><li><p>DCL：数据控制语言</p><p>GRANT（授予权限），REVOKE（取消权限）</p></li></ul><h2 id="1-2-说明mysql各个关键字查询时候的先后顺序"><a href="#1-2-说明mysql各个关键字查询时候的先后顺序" class="headerlink" title="1.2  说明mysql各个关键字查询时候的先后顺序"></a>1.2  说明mysql各个关键字查询时候的先后顺序</h2><p>关键字keyword组成子句clause，多条clause组成整个语句</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs mysql">select *#SELECT子句<br>from student #FROM子句<br>where stu_name=&#x27;xiaoming&#x27;#WHERE子句<br></code></pre></td></tr></table></figure><p>说明：一组SQL语句由三个子句构成，SELECT ,FROM 和WHERE时关键字</p><p>获取SQL 命令使用帮助：<br>官方帮助：<br><a href="https://dev.mysql.com/doc/refman/8.0/en/sql-statements.html">https://dev.mysql.com/doc/refman/8.0/en/sql-statements.html</a></p><p>mysql各个关键字执行顺序如下：</p><p><img src="image-20230908172835517.png" alt="image-20230908172835517"></p><p>查询执行路径中的组件：查询缓存、解释器、预处理器、优化器、查询执行引擎、存储引擎</p><p>select语句的执行流程：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">FROM</span>  clause <span class="hljs-comment">--&gt; WHERE clause --&gt; GROUP BY --&gt; HAVING --&gt; SELECT --&gt; ORDER BY --&gt; LIMIT</span><br></code></pre></td></tr></table></figure><h1 id="2-自行设计10个sql查询语句，需要用到关键字-GROUP-BY-HAVING-ORDER-BY-LIMIT-，至少同时用到两个。"><a href="#2-自行设计10个sql查询语句，需要用到关键字-GROUP-BY-HAVING-ORDER-BY-LIMIT-，至少同时用到两个。" class="headerlink" title="2.自行设计10个sql查询语句，需要用到关键字[GROUP BY/HAVING/ORDER BY/LIMIT]，至少同时用到两个。"></a>2.自行设计10个sql查询语句，需要用到关键字[GROUP BY/HAVING/ORDER BY/LIMIT]，至少同时用到两个。</h1><p>示例1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">#查询teachers表中age<span class="hljs-operator">&gt;</span><span class="hljs-number">20</span>，男女的人数<br>MariaDB [hellodb]<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),gender <span class="hljs-keyword">from</span> teachers <span class="hljs-keyword">where</span> age <span class="hljs-operator">&gt;</span> <span class="hljs-number">20</span>  <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender;<br><span class="hljs-operator">+</span><span class="hljs-comment">----------+--------+</span><br><span class="hljs-operator">|</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">|</span> gender <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+--------+</span><br><span class="hljs-operator">|</span>        <span class="hljs-number">2</span> <span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>        <span class="hljs-number">2</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+--------+</span><br><span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.000</span> sec)<br><br><br></code></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">#查询teachers表中age<span class="hljs-operator">&lt;</span><span class="hljs-number">90</span>，按age降序排序<br>MariaDB [hellodb]<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teachers <span class="hljs-keyword">where</span> age <span class="hljs-operator">&lt;</span> <span class="hljs-number">90</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age <span class="hljs-keyword">desc</span> ;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-operator">|</span> TID <span class="hljs-operator">|</span> Name          <span class="hljs-operator">|</span> Age <span class="hljs-operator">|</span> Gender <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">3</span> <span class="hljs-operator">|</span> Miejue Shitai <span class="hljs-operator">|</span>  <span class="hljs-number">77</span> <span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">1</span> <span class="hljs-operator">|</span> Song Jiang    <span class="hljs-operator">|</span>  <span class="hljs-number">45</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">5</span> <span class="hljs-operator">|</span> xiaohexie     <span class="hljs-operator">|</span>  <span class="hljs-number">18</span> <span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-number">3</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.000</span> sec)<br><br></code></pre></td></tr></table></figure><p>示例3：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">#查询teachers表中最大年纪的所有信息<br>MariaDB [hellodb]<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teachers <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age <span class="hljs-keyword">desc</span> limit <span class="hljs-number">1</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-operator">|</span> TID <span class="hljs-operator">|</span> Name          <span class="hljs-operator">|</span> Age <span class="hljs-operator">|</span> Gender <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">2</span> <span class="hljs-operator">|</span> Zhang Sanfeng <span class="hljs-operator">|</span>  <span class="hljs-number">94</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+---------------+-----+--------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.000</span> sec)<br><br></code></pre></td></tr></table></figure><p>示例4：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">#查询students表中男女的平均年龄<br>MariaDB [hellodb]<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(age)<span class="hljs-operator">/</span><span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),gender <span class="hljs-keyword">from</span> students <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender;<br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------+--------+</span><br><span class="hljs-operator">|</span> <span class="hljs-built_in">sum</span>(age)<span class="hljs-operator">/</span><span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">|</span> gender <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------+--------+</span><br><span class="hljs-operator">|</span>           <span class="hljs-number">19.0000</span> <span class="hljs-operator">|</span> F      <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>           <span class="hljs-number">33.0000</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------+--------+</span><br><span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.000</span> sec)<br><br></code></pre></td></tr></table></figure><p>示例5：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql">#查询students表中年龄降序排序前五位的信息<br>MariaDB [hellodb]<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age <span class="hljs-keyword">desc</span> limit <span class="hljs-number">5</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">-------+--------------+-----+--------+---------+-----------+</span><br><span class="hljs-operator">|</span> StuID <span class="hljs-operator">|</span> Name         <span class="hljs-operator">|</span> Age <span class="hljs-operator">|</span> Gender <span class="hljs-operator">|</span> ClassID <span class="hljs-operator">|</span> TeacherID <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+--------------+-----+--------+---------+-----------+</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">25</span> <span class="hljs-operator">|</span> Sun Dasheng  <span class="hljs-operator">|</span> <span class="hljs-number">100</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span>    <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span>      <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">3</span> <span class="hljs-operator">|</span> Xie Yanke    <span class="hljs-operator">|</span>  <span class="hljs-number">53</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span>       <span class="hljs-number">2</span> <span class="hljs-operator">|</span>        <span class="hljs-number">16</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">6</span> <span class="hljs-operator">|</span> Shi Qing     <span class="hljs-operator">|</span>  <span class="hljs-number">46</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span>       <span class="hljs-number">5</span> <span class="hljs-operator">|</span>      <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">13</span> <span class="hljs-operator">|</span> Tian Boguang <span class="hljs-operator">|</span>  <span class="hljs-number">33</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span>       <span class="hljs-number">2</span> <span class="hljs-operator">|</span>      <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">4</span> <span class="hljs-operator">|</span> Ding Dian    <span class="hljs-operator">|</span>  <span class="hljs-number">32</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span>       <span class="hljs-number">4</span> <span class="hljs-operator">|</span>         <span class="hljs-number">4</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+--------------+-----+--------+---------+-----------+</span><br><span class="hljs-number">5</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.000</span> sec)<br><br></code></pre></td></tr></table></figure><p>示例6：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">#查询students表每个班的人数，只显示人数大于<span class="hljs-number">3</span>的classid<br>MariaDB [hellodb]<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> classid,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> students <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> classid <span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">&gt;</span><span class="hljs-number">3</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">---------+----------+</span><br><span class="hljs-operator">|</span> classid <span class="hljs-operator">|</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+----------+</span><br><span class="hljs-operator">|</span>       <span class="hljs-number">1</span> <span class="hljs-operator">|</span>        <span class="hljs-number">4</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>       <span class="hljs-number">3</span> <span class="hljs-operator">|</span>        <span class="hljs-number">4</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>       <span class="hljs-number">4</span> <span class="hljs-operator">|</span>        <span class="hljs-number">4</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>       <span class="hljs-number">6</span> <span class="hljs-operator">|</span>        <span class="hljs-number">4</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+----------+</span><br><span class="hljs-number">4</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.000</span> sec)<br><br></code></pre></td></tr></table></figure><p>示例7：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql">#查询students表每个班的人数，只显示人数大于<span class="hljs-number">2</span>的classid，按升序排序<br>MariaDB [hellodb]<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> classid,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> students <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> classid <span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">&gt;</span><span class="hljs-number">2</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>);<br><span class="hljs-operator">+</span><span class="hljs-comment">---------+----------+</span><br><span class="hljs-operator">|</span> classid <span class="hljs-operator">|</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+----------+</span><br><span class="hljs-operator">|</span>       <span class="hljs-number">7</span> <span class="hljs-operator">|</span>        <span class="hljs-number">3</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>       <span class="hljs-number">2</span> <span class="hljs-operator">|</span>        <span class="hljs-number">3</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>       <span class="hljs-number">6</span> <span class="hljs-operator">|</span>        <span class="hljs-number">4</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>       <span class="hljs-number">1</span> <span class="hljs-operator">|</span>        <span class="hljs-number">4</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>       <span class="hljs-number">4</span> <span class="hljs-operator">|</span>        <span class="hljs-number">4</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>       <span class="hljs-number">3</span> <span class="hljs-operator">|</span>        <span class="hljs-number">4</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+----------+</span><br><span class="hljs-number">6</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.000</span> sec)<br><br></code></pre></td></tr></table></figure><p>示例8：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql">#查询students表age<span class="hljs-operator">&lt;</span><span class="hljs-number">25</span> gender<span class="hljs-operator">=</span><span class="hljs-string">&#x27;M&#x27;</span>的信息，按升序排序<br>MariaDB [hellodb]<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students <span class="hljs-keyword">where</span> age <span class="hljs-operator">&lt;</span><span class="hljs-number">25</span> <span class="hljs-keyword">having</span> gender<span class="hljs-operator">=</span><span class="hljs-string">&#x27;M&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age;<br><span class="hljs-operator">+</span><span class="hljs-comment">-------+---------------+-----+--------+---------+-----------+</span><br><span class="hljs-operator">|</span> StuID <span class="hljs-operator">|</span> Name          <span class="hljs-operator">|</span> Age <span class="hljs-operator">|</span> Gender <span class="hljs-operator">|</span> ClassID <span class="hljs-operator">|</span> TeacherID <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+---------------+-----+--------+---------+-----------+</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">15</span> <span class="hljs-operator">|</span> Duan Yu       <span class="hljs-operator">|</span>  <span class="hljs-number">19</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span>       <span class="hljs-number">4</span> <span class="hljs-operator">|</span>      <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">16</span> <span class="hljs-operator">|</span> Xu Zhu        <span class="hljs-operator">|</span>  <span class="hljs-number">21</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span>       <span class="hljs-number">1</span> <span class="hljs-operator">|</span>      <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">1</span> <span class="hljs-operator">|</span> Shi Zhongyu   <span class="hljs-operator">|</span>  <span class="hljs-number">22</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span>       <span class="hljs-number">2</span> <span class="hljs-operator">|</span>         <span class="hljs-number">3</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">2</span> <span class="hljs-operator">|</span> Shi Potian    <span class="hljs-operator">|</span>  <span class="hljs-number">22</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span>       <span class="hljs-number">1</span> <span class="hljs-operator">|</span>         <span class="hljs-number">7</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">11</span> <span class="hljs-operator">|</span> Yuan Chengzhi <span class="hljs-operator">|</span>  <span class="hljs-number">23</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span>       <span class="hljs-number">6</span> <span class="hljs-operator">|</span>      <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">18</span> <span class="hljs-operator">|</span> Hua Rong      <span class="hljs-operator">|</span>  <span class="hljs-number">23</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span>       <span class="hljs-number">7</span> <span class="hljs-operator">|</span>      <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">23</span> <span class="hljs-operator">|</span> Ma Chao       <span class="hljs-operator">|</span>  <span class="hljs-number">23</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span>       <span class="hljs-number">4</span> <span class="hljs-operator">|</span>      <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+---------------+-----+--------+---------+-----------+</span><br><br></code></pre></td></tr></table></figure><p>示例9：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">#查询students表平均年龄小于<span class="hljs-number">22</span>的班级<br>MariaDB [hellodb]<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> classid,<span class="hljs-built_in">avg</span>(age) <span class="hljs-keyword">from</span> students <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> classid <span class="hljs-keyword">having</span> <span class="hljs-built_in">avg</span>(age)<span class="hljs-operator">&lt;</span><span class="hljs-number">22</span> ;<br><span class="hljs-operator">+</span><span class="hljs-comment">---------+----------+</span><br><span class="hljs-operator">|</span> classid <span class="hljs-operator">|</span> <span class="hljs-built_in">avg</span>(age) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+----------+</span><br><span class="hljs-operator">|</span>       <span class="hljs-number">1</span> <span class="hljs-operator">|</span>  <span class="hljs-number">20.5000</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>       <span class="hljs-number">3</span> <span class="hljs-operator">|</span>  <span class="hljs-number">20.2500</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>       <span class="hljs-number">6</span> <span class="hljs-operator">|</span>  <span class="hljs-number">20.7500</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>       <span class="hljs-number">7</span> <span class="hljs-operator">|</span>  <span class="hljs-number">19.6667</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------+----------+</span><br><span class="hljs-number">4</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.000</span> sec)<br><br></code></pre></td></tr></table></figure><p>示例10：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">#查询students表classid<span class="hljs-operator">=</span><span class="hljs-number">2</span>的所有信息，按年龄降序排序显示<br>MariaDB [hellodb]<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students <span class="hljs-keyword">where</span> classid<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age; <br><span class="hljs-operator">+</span><span class="hljs-comment">-------+--------------+-----+--------+---------+-----------+</span><br><span class="hljs-operator">|</span> StuID <span class="hljs-operator">|</span> Name         <span class="hljs-operator">|</span> Age <span class="hljs-operator">|</span> Gender <span class="hljs-operator">|</span> ClassID <span class="hljs-operator">|</span> TeacherID <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+--------------+-----+--------+---------+-----------+</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">1</span> <span class="hljs-operator">|</span> Shi Zhongyu  <span class="hljs-operator">|</span>  <span class="hljs-number">22</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span>       <span class="hljs-number">2</span> <span class="hljs-operator">|</span>         <span class="hljs-number">3</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">13</span> <span class="hljs-operator">|</span> Tian Boguang <span class="hljs-operator">|</span>  <span class="hljs-number">33</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span>       <span class="hljs-number">2</span> <span class="hljs-operator">|</span>      <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>     <span class="hljs-number">3</span> <span class="hljs-operator">|</span> Xie Yanke    <span class="hljs-operator">|</span>  <span class="hljs-number">53</span> <span class="hljs-operator">|</span> M      <span class="hljs-operator">|</span>       <span class="hljs-number">2</span> <span class="hljs-operator">|</span>        <span class="hljs-number">16</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------+--------------+-----+--------+---------+-----------+</span><br><span class="hljs-number">3</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.000</span> sec)<br><br></code></pre></td></tr></table></figure><h1 id="3-xtrabackup备份和还原数据库练习"><a href="#3-xtrabackup备份和还原数据库练习" class="headerlink" title="3.xtrabackup备份和还原数据库练习"></a>3.xtrabackup备份和还原数据库练习</h1><p>利用xtrabackup8.0进行完全备份和增量备份以及还原MySQL8.0</p><h2 id="3-1-xtrabackup进行完全备份和还原"><a href="#3-1-xtrabackup进行完全备份和还原" class="headerlink" title="3.1 xtrabackup进行完全备份和还原"></a>3.1 xtrabackup进行完全备份和还原</h2><h3 id="3-1-1下载并安装xtrabackup"><a href="#3-1-1下载并安装xtrabackup" class="headerlink" title="3.1.1下载并安装xtrabackup"></a>3.1.1下载并安装xtrabackup</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">percona下载地址：</span><br>https://www.percona.com/downloads<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">percona-xtrabackup下载链接：</span><br>https://downloads.percona.com/downloads/Percona-XtraBackup-8.0/Percona-XtraBackup-8.0.34-29/binary/redhat/8/x86_64/percona-xtrabackup-80-8.0.34-29.1.el8.x86_64.rpm<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装percona-xtrabackup</span><br>[20:50:10 root@rocky8 ~]#yum install -y  percona-xtrabackup-80-8.0.34-29.1.el8.x86_64.rpm <br></code></pre></td></tr></table></figure><h3 id="3-1-2-备份和还原过程"><a href="#3-1-2-备份和还原过程" class="headerlink" title="3.1.2 备份和还原过程"></a>3.1.2 备份和还原过程</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs shell">1 在原主机上做完全备份到/backup<br>[21:12:21 root@rocky8 ~]#mkdir /backup<br>[21:12:21 root@rocky8 ~]#xtrabackup -uroot --backup --target-dir=/backup/base<br><br>2 目标主机无需创建/backup目录，直接复制目录<br>[21:12:21 root@rocky8 ~]#scp -r /backup/ 10.0.0.3:/<br><br><br>3 在目标主机上还原<br>注意：需要恢复主机MySQL服务停止，并且数据目录为空<br>1）预准备：确保数据一致，提交完成的事务，回滚未完成的事务<br>[21:34:45 root@rocky ~]#yum install -y percona-xtrabackup-80-8.0.34-29.1.el8.x86_64.rpm <br>[21:34:45 root@rocky ~]#xtrabackup --prepare --target-dir=/backup/base<br>2）复制到数据目录<br>注意：需要恢复主机MySQL服务停止，并且数据目录为空<br>[21:34:45 root@rocky ~]#xtrabackup --copy-back --target-dir=/backup/base<br>3）还原属性<br>[21:34:45 root@rocky ~]#chown -R mysql:mysql  /var/lib/mysql<br>4）启动服务<br>[21:34:45 root@rocky ~]#service  mysqld start <br><br><br>4 验证数据<br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">show databases;</span><br>+--------------------+<br>| Database           |<br>+--------------------+<br>| hellodb            |<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| sys                |<br>+--------------------+<br><br></code></pre></td></tr></table></figure><h2 id="3-2-xtrabackup进行增量备份和还原"><a href="#3-2-xtrabackup进行增量备份和还原" class="headerlink" title="3.2 xtrabackup进行增量备份和还原"></a>3.2 xtrabackup进行增量备份和还原</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">安装percona-xtrabackup</span><br>[20:50:10 root@rocky8 ~]#yum install -y  percona-xtrabackup-80-8.0.34-29.1.el8.x86_64.rpm <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">备份过程</span><br>1） 在原主机上做完全备份到/backup<br>[21:12:21 root@rocky8 ~]#mkdir /backup<br>[21:12:21 root@rocky8 ~]#xtrabackup -uroot --backup --target-dir=/backup/base<br><br>2）第一次修改数据<br>[21:12:21 root@rocky8 ~]#mysql &lt; hellodb_innodb.sql<br>3）第一次增量备份<br>[21:12:21 root@rocky8 ~]#xtrabackup -uroot --backup --target-dir=/backup/inc1 --incremental-basedir=/backup/base<br>4）第二次修改数据<br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">insert teachers (name,age,gender) values(<span class="hljs-string">&#x27;aa&#x27;</span>,10,<span class="hljs-string">&#x27;M&#x27;</span>);</span><br><br><br>5）第二次增量备份<br>[21:12:21 root@rocky8 ~]#xtrabackup -uroot --backup --target-dir=/backup/inc2 --incremental-basedir=/backup/inc1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">还原过程</span><br>1）预准备完成备份，此选项--apply-log-only阻止回滚未完成的事务<br>[21:12:21 root@rocky8 ~]#yum install -y  percona-xtrabackup-80-8.0.34-29.1.el8.x86_64.rpm <br>[21:12:21 root@rocky8 ~]# xtrabackup --prepare --apply-log-only --target-dir=/backup/base<br>2）合并第1次增量备份到完全备份<br>[21:12:21 root@rocky8 ~]#xtrabackup --prepare --apply-log-only --target-dir=/backup/base --incremental-dir=/backup/inc1<br>3）合并第2次增量备份到完全备份：最后一次还原不需要加选项--apply-log-only<br>[21:12:21 root@rocky8 ~]#xtrabackup --prepare --target-dir=/backup/base --incremental-dir=/backup/inc2<br><br>4）复制到数据目录<br>注意：需要恢复主机MySQL服务停止，并且数据目录为空<br>[21:12:21 root@rocky8 ~]#xtrabackup --copy-back --target-dir=/backup/base<br>[21:12:21 root@rocky8 ~]#xtrabackup --copy-back --target-dir=/backup/base<br>5）还原属性<br>[21:34:45 root@rocky ~]#chown -R mysql:mysql  /var/lib/mysql<br>6）启动服务<br>[21:34:45 root@rocky ~]#service  mysqld start <br></code></pre></td></tr></table></figure><h1 id="4-实现mysql主从复制，主主复制和半同步复制"><a href="#4-实现mysql主从复制，主主复制和半同步复制" class="headerlink" title="4.实现mysql主从复制，主主复制和半同步复制"></a>4.实现mysql主从复制，主主复制和半同步复制</h1><h2 id="4-1-mysql主从复制"><a href="#4-1-mysql主从复制" class="headerlink" title="4.1 mysql主从复制"></a>4.1 mysql主从复制</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">主节点</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装MySQL</span><br>[22:30:32 root@rocky ~]#yum install -y mariadb-server<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改master主节点的配置</span><br>[22:30:32 root@rocky ~]#vim /etc/my.cnf.d/mariadb-server.cnf<br>[mysqld]<br>log_bin   #启用二进制日志，mysql8.0之后版本默认开启<br>server-id=4#设置全局唯一的ID号<br><br>[22:33:05 root@rocky ~]#systemctl restart mariadb.service<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看二进制文件和位置</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">show master logs;</span><br>+-------------------+-----------+-----------+<br>| Log_name          | File_size | Encrypted |<br>+-------------------+-----------+-----------+<br>| rocky8-bin.000001 |       157 | No        |<br>+-------------------+-----------+-----------+<br>1 row in set (0.00 sec)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建复制用户</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">grant replication slave on *.* to repluser@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">MySQL8.0需要分成下面两步实现</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">create user repluser@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span> ;</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">grant replication slave on *.* to repluser@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">从节点</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装MySQL</span><br>[22:30:32 root@rocky ~]#yum install -y mariadb-server<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改从节点的配置</span><br>[22:30:32 root@rocky ~]#vim /etc/my.cnf.d/mariadb-server.cnf<br>[mysqld]<br>log_bin   #启用二进制日志，mysql8.0之后版本默认开启<br>server-id=3<br>[22:33:05 root@rocky ~]#systemctl restart mariadb.service<br>[22:33:05 root@rocky ~]#mysql<br>MariaDB [(none)]&gt; help change master to<br>MariaDB [(none)]&gt; CHANGE MASTER TO<br>    -&gt;   MASTER_HOST=&#x27;10.0.0.4&#x27;,<br>    -&gt;   MASTER_USER=&#x27;repluser&#x27;,<br>    -&gt;   MASTER_PASSWORD=&#x27;123456&#x27;,<br>    -&gt;   MASTER_PORT=3306,<br>    -&gt;   MASTER_LOG_FILE=&#x27;mariadb-bin.000001&#x27;,<br>    -&gt;   MASTER_LOG_POS=330;<br>Query OK, 0 rows affected (0.005 sec)<br><br>MariaDB [(none)]&gt; start slave;<br>Query OK, 0 rows affected (0.001 sec)<br><br>MariaDB [(none)]&gt; show slave status \G<br>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near &#x27;stattus&#x27; at line 1<br>MariaDB [(none)]&gt; show slave status \G<br>*************************** 1. row ***************************<br>                Slave_IO_State: Waiting for master to send event<br>                   Master_Host: 10.0.0.4<br>                   Master_User: repluser<br>                   Master_Port: 3306<br>                 Connect_Retry: 60<br>               Master_Log_File: mariadb-bin.000001<br>           Read_Master_Log_Pos: 330<br>                Relay_Log_File: mariadb-relay-bin.000002<br>                 Relay_Log_Pos: 557<br>         Relay_Master_Log_File: mariadb-bin.000001<br>              Slave_IO_Running: Yes<br>             Slave_SQL_Running: Yes<br>               Replicate_Do_DB: <br>           Replicate_Ignore_DB: <br>            Replicate_Do_Table: <br>        Replicate_Ignore_Table: <br>       Replicate_Wild_Do_Table: <br>   Replicate_Wild_Ignore_Table: <br>                    Last_Errno: 0<br>                    Last_Error: <br>                  Skip_Counter: 0<br>           Exec_Master_Log_Pos: 330<br>               Relay_Log_Space: 868<br>               Until_Condition: None<br>                Until_Log_File: <br>                 Until_Log_Pos: 0<br>            Master_SSL_Allowed: No<br>            Master_SSL_CA_File: <br>            Master_SSL_CA_Path: <br>               Master_SSL_Cert: <br>             Master_SSL_Cipher: <br>                Master_SSL_Key: <br>         Seconds_Behind_Master: 0<br> Master_SSL_Verify_Server_Cert: No<br>                 Last_IO_Errno: 0<br>                 Last_IO_Error: <br>                Last_SQL_Errno: 0<br>                Last_SQL_Error: <br>   Replicate_Ignore_Server_Ids: <br>              Master_Server_Id: 4<br>                Master_SSL_Crl: <br>            Master_SSL_Crlpath: <br>                    Using_Gtid: No<br>                   Gtid_IO_Pos: <br>       Replicate_Do_Domain_Ids: <br>   Replicate_Ignore_Domain_Ids: <br>                 Parallel_Mode: conservative<br>                     SQL_Delay: 0<br>           SQL_Remaining_Delay: NULL<br>       Slave_SQL_Running_State: Slave has read all relay log; waiting for the slave I/O thread to update it<br>              Slave_DDL_Groups: 0<br>Slave_Non_Transactional_Groups: 0<br>    Slave_Transactional_Groups: 0<br>1 row in set (0.000 sec)<br><br></code></pre></td></tr></table></figure><p>验证：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在master上修改数据</span><br>MariaDB [hellodb]&gt; insert teachers (name,age,gender) values(&#x27;aa&#x27;,17,&#x27;M&#x27;);<br>Query OK, 1 row affected (0.002 sec)<br><br>MariaDB [hellodb]&gt; select * from teachers;<br>+-----+---------------+-----+--------+<br>| TID | Name          | Age | Gender |<br>+-----+---------------+-----+--------+<br>|   1 | Song Jiang    |  45 | M      |<br>|   2 | Zhang Sanfeng |  94 | M      |<br>|   3 | Miejue Shitai |  77 | F      |<br>|   4 | Lin Chaoying  |  93 | F      |<br>|   5 | aa            |  17 | M      |<br>+-----+---------------+-----+--------+<br>5 rows in set (0.000 sec)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#在slave上查看数据是否同步</span></span><br>MariaDB [hellodb]&gt; select * from teachers;<br>+-----+---------------+-----+--------+<br>| TID | Name          | Age | Gender |<br>+-----+---------------+-----+--------+<br>|   1 | Song Jiang    |  45 | M      |<br>|   2 | Zhang Sanfeng |  94 | M      |<br>|   3 | Miejue Shitai |  77 | F      |<br>|   4 | Lin Chaoying  |  93 | F      |<br>|   5 | aa            |  17 | M      |<br>+-----+---------------+-----+--------+<br>5 rows in set (0.000 sec)<br><br></code></pre></td></tr></table></figure><h2 id="4-2-实现主主复制"><a href="#4-2-实现主主复制" class="headerlink" title="4.2 实现主主复制"></a>4.2 实现主主复制</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在第一个master节点上实现</span><br>[15:02:02 root@rocky ~]#vim /etc/my.cnf.d/mariadb-server.cnf <br>[mysqld]<br>log-bin<br>server-id=4<br>auto_increment_offset=1#开始点<br>auto_increment_increment=2#增长幅度<br><br>[15:03:29 root@rocky ~]#systemctl start mariadb<br>[15:03:29 root@rocky ~]#mysql<br>MariaDB [hellodb]&gt; show master logs;<br>+--------------------+-----------+<br>| Log_name           | File_size |<br>+--------------------+-----------+<br>| mariadb-bin.000001 |      9199 |<br>| mariadb-bin.000002 |       344 |<br>+--------------------+-----------+<br>2 rows in set (0.000 sec)<br>MariaDB [(none)]&gt; grant replication slave on *.* to repluser@&#x27;10.0.0.%&#x27; identified by &#x27;123456&#x27;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在第二个master节点上实现</span><br>[15:02:02 root@rocky ~]#vim /etc/my.cnf.d/mariadb-server.cnf <br>[mysqld]<br>log-bin<br>server-id=3<br>auto_increment_offset=2#开始点<br>auto_increment_increment=2#增长幅度<br><br>[15:03:29 root@rocky ~]#systemctl start mariadb<br>[15:03:29 root@rocky ~]#mysql<br>MariaDB [(none)]&gt; CHANGE MASTER TO<br>    MASTER_HOST=&#x27;10.0.0.4&#x27;,<br>  MASTER_USER=&#x27;repluser&#x27;,<br>    MASTER_PASSWORD=&#x27;123456&#x27;,<br>MASTER_PORT=3306,<br> MASTER_LOG_FILE=&#x27;mariadb-bin.000002&#x27;,<br>MASTER_LOG_POS=684;<br>Query OK, 0 rows affected (0.005 sec)<br>MariaDB [(none)]&gt; show master logs;<br>+--------------------+-----------+<br>| Log_name           | File_size |<br>+--------------------+-----------+<br>| mariadb-bin.000001 |      1127 |<br>+--------------------+-----------+<br>1 row in set (0.000 sec)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在第一个master节点上实现</span><br>MariaDB [(none)]&gt; CHANGE MASTER TO<br>MASTER_HOST=&#x27;10.0.0.3&#x27;,<br>MASTER_USER=&#x27;repluser&#x27;,<br>MASTER_PASSWORD=&#x27;123456&#x27;,<br>MASTER_PORT=3306,<br>  MASTER_LOG_FILE=&#x27;mariadb-bin.000001&#x27;,<br>MASTER_LOG_POS=1127;<br><br>MariaDB [mysql]&gt; start slave;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">两个节点上分别插入数据</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在第一个节点上执行</span><br>MariaDB [db1]&gt; create table  db1.t1(id int auto_increment primary key,name char(10));<br>Query OK, 0 rows affected (0.004 sec)<br><br>MariaDB [db1]&gt; insert t1 (name) values(&#x27;xiaohexie1&#x27;);<br>Query OK, 1 row affected (0.003 sec)<br><span class="hljs-meta prompt_">#</span><span class="language-bash">在第二个节点上执行</span><br>MariaDB [db1]&gt; insert t1 (name) values(&#x27;xiaohexie2&#x27;);<br>Query OK, 1 row affected (0.002 sec)<br><br>MariaDB [db1]&gt; select * from t1;<br>+----+------------+<br>| id | name       |<br>+----+------------+<br>|  2 | xiaohexie1 |<br>|  3 | xiaohexie2 |<br>+----+------------+<br>2 rows in set (0.000 sec)<br><br></code></pre></td></tr></table></figure><h2 id="4-3-半同步复制"><a href="#4-3-半同步复制" class="headerlink" title="4.3 半同步复制"></a>4.3 半同步复制</h2><p>示例：在mariadb上实现半同步复制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看插件文件</span><br>[16:33:20 root@rocky8 ~]#rpm -ql mysql-server | grep semisync<br>/usr/lib64/mysql/plugin/semisync_master.so<br>/usr/lib64/mysql/plugin/semisync_replica.so<br>/usr/lib64/mysql/plugin/semisync_slave.so<br>/usr/lib64/mysql/plugin/semisync_source.so<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">master服务器10.0.0.4上配置</span><br>[20:18:48 root@rocky ~]#vim /etc/my.cnf.d/mariadb-server.cnf<br>[mysqld]<br>server-id=4<br>log-bin<br>plugin-load-add=semisync_master<br>rpl_semi_sync_master_enabled=ON#修改此行，需要先安装semisync_master.so插件后，再重启，否则无法启动<br>rpl_semi_sync_master_timeout=30000#设置3s内无法同步，也将返回成功的信息给客户端<br>[20:23:26 root@rocky ~]#systemctl restart mariadb.service<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建复制用户</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">grant replication slave on *.* to repluser@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">MySQL8.0需要分成下面两步实现</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">create user repluser@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>;</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">grant replication slave on *.* to repluser@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span>;</span><br><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">备份数据</span><br>[20:23:58 root@rocky ~]#mysqldump -A -F --single-transaction --master-data=2 &gt;/data/all.sql<br><span class="hljs-meta prompt_">#</span><span class="language-bash">复制到从服务器上</span><br>[20:38:51 root@rocky ~]#vim  /data/all.sql <br>CHANGE MASTER TO<br>        MASTER_HOST=&#x27;10.0.0.4&#x27;,<br>        MASTER_USER=&#x27;repluser&#x27;,<br>        MASTER_PASSWORD=&#x27;123456&#x27;,<br>        MASTER_PORT=3306,<br>MASTER_LOG_FILE=&#x27;mariadb-bin.000003&#x27;, MASTER_LOG_POS=389;<br>[20:46:02 root@rocky ~]#scp /data/all.sql 10.0.0.128:<br>[20:46:02 root@rocky ~]#scp /data/all.sql 10.0.0.3:<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">slave1服务器配置</span><br>[20:18:48 root@rocky ~]#vim /etc/my.cnf.d/mariadb-server.cnf<br>[mysqld]<br>server-id=3<br>plugin-load-add=semisync_slave<br>rpl_semi_sync_slave_enabled=ON#修改此行，需要先安装semisync_slave.so插件后，再重启，否则无法启动<br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启服务</span><br>[20:23:26 root@rocky ~]#systemctl restart mariadb.service<br><span class="hljs-meta prompt_">#</span><span class="language-bash">将恢复主服务器上备份的数据恢复进行恢复</span><br>[20:36:50 root@ORG-DNS ~]#mysql &lt; all.sql <br>[20:36:50 root@ORG-DNS ~]#mysql<br>MariaDB [(none)]&gt; start slave;<br>MariaDB [(none)]&gt; show slave status \G;<br>MariaDB [(none)]&gt; show global variables like &#x27;%semi%&#x27;;<br>+---------------------------------------+--------------+<br>| Variable_name                         | Value        |<br>+---------------------------------------+--------------+<br>| rpl_semi_sync_master_enabled          | OFF          |<br>| rpl_semi_sync_master_timeout          | 10000        |<br>| rpl_semi_sync_master_trace_level      | 32           |<br>| rpl_semi_sync_master_wait_no_slave    | ON           |<br>| rpl_semi_sync_master_wait_point       | AFTER_COMMIT |<br>| rpl_semi_sync_slave_delay_master      | OFF          |<br>| rpl_semi_sync_slave_enabled           | ON           |<br>| rpl_semi_sync_slave_kill_conn_timeout | 5            |<br>| rpl_semi_sync_slave_trace_level       | 32           |<br>+---------------------------------------+--------------+<br>9 rows in set (0.010 sec)<br><br>MariaDB [(none)]&gt; show global status  like &#x27;%semi%&#x27;;<br>+--------------------------------------------+-------+<br>| Variable_name                              | Value |<br>+--------------------------------------------+-------+<br>| Rpl_semi_sync_master_clients               | 0     |<br>| Rpl_semi_sync_master_get_ack               | 0     |<br>| Rpl_semi_sync_master_net_avg_wait_time     | 0     |<br>| Rpl_semi_sync_master_net_wait_time         | 0     |<br>| Rpl_semi_sync_master_net_waits             | 0     |<br>| Rpl_semi_sync_master_no_times              | 0     |<br>| Rpl_semi_sync_master_no_tx                 | 0     |<br>| Rpl_semi_sync_master_request_ack           | 0     |<br>| Rpl_semi_sync_master_status                | OFF   |<br>| Rpl_semi_sync_master_timefunc_failures     | 0     |<br>| Rpl_semi_sync_master_tx_avg_wait_time      | 0     |<br>| Rpl_semi_sync_master_tx_wait_time          | 0     |<br>| Rpl_semi_sync_master_tx_waits              | 0     |<br>| Rpl_semi_sync_master_wait_pos_backtraverse | 0     |<br>| Rpl_semi_sync_master_wait_sessions         | 0     |<br>| Rpl_semi_sync_master_yes_tx                | 0     |<br>| Rpl_semi_sync_slave_send_ack               | 0     |<br>| Rpl_semi_sync_slave_status                 | ON    |<br>+--------------------------------------------+-------+<br>18 rows in set (0.004 sec)<br><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">slave2服务器10.0.0.128配置</span><br>[20:18:48 root@rocky ~]#vim /etc/my.cnf.d/mariadb-server.cnf<br>[mysqld]<br>server-id=128<br>plugin-load-add=semisync_slave<br>rpl_semi_sync_slave_enabled=ON#修改此行，需要先安装semisync_slave.so插件后，再重启，否则无法启动<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启服务</span><br>[20:23:26 root@rocky ~]#systemctl restart mariadb.service<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">将恢复主服务器上备份的数据恢复进行恢复</span><br>[20:36:50 root@ORG-DNS ~]#mysql &lt; all.sql <br>[20:36:50 root@ORG-DNS ~]#mysql<br>MariaDB [(none)]&gt; start slave;<br>MariaDB [(none)]&gt; show slave status \G;<br>MariaDB [(none)]&gt; show global variables like &#x27;%semi%&#x27;;<br>+---------------------------------------+--------------+<br>| Variable_name                         | Value        |<br>+---------------------------------------+--------------+<br>| rpl_semi_sync_master_enabled          | OFF          |<br>| rpl_semi_sync_master_timeout          | 10000        |<br>| rpl_semi_sync_master_trace_level      | 32           |<br>| rpl_semi_sync_master_wait_no_slave    | ON           |<br>| rpl_semi_sync_master_wait_point       | AFTER_COMMIT |<br>| rpl_semi_sync_slave_delay_master      | OFF          |<br>| rpl_semi_sync_slave_enabled           | ON           |<br>| rpl_semi_sync_slave_kill_conn_timeout | 5            |<br>| rpl_semi_sync_slave_trace_level       | 32           |<br>+---------------------------------------+--------------+<br>9 rows in set (0.002 sec)<br>MariaDB [(none)]&gt; show global status  like &#x27;%semi%&#x27;;<br>+--------------------------------------------+-------+<br>| Variable_name                              | Value |<br>+--------------------------------------------+-------+<br>| Rpl_semi_sync_master_clients               | 0     |<br>| Rpl_semi_sync_master_get_ack               | 0     |<br>| Rpl_semi_sync_master_net_avg_wait_time     | 0     |<br>| Rpl_semi_sync_master_net_wait_time         | 0     |<br>| Rpl_semi_sync_master_net_waits             | 0     |<br>| Rpl_semi_sync_master_no_times              | 0     |<br>| Rpl_semi_sync_master_no_tx                 | 0     |<br>| Rpl_semi_sync_master_request_ack           | 0     |<br>| Rpl_semi_sync_master_status                | OFF   |<br>| Rpl_semi_sync_master_timefunc_failures     | 0     |<br>| Rpl_semi_sync_master_tx_avg_wait_time      | 0     |<br>| Rpl_semi_sync_master_tx_wait_time          | 0     |<br>| Rpl_semi_sync_master_tx_waits              | 0     |<br>| Rpl_semi_sync_master_wait_pos_backtraverse | 0     |<br>| Rpl_semi_sync_master_wait_sessions         | 0     |<br>| Rpl_semi_sync_master_yes_tx                | 0     |<br>| Rpl_semi_sync_slave_send_ack               | 0     |<br>| Rpl_semi_sync_slave_status                 | ON    |<br>+--------------------------------------------+-------+<br>18 rows in set (0.001 sec)<br><br><br><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">主服务器</span><br>MariaDB [(none)]&gt; show global variables like &#x27;%semi%&#x27;;<br>+---------------------------------------+--------------+<br>| Variable_name                         | Value        |<br>+---------------------------------------+--------------+<br>| rpl_semi_sync_master_enabled          | ON           |<br>| rpl_semi_sync_master_timeout          | 30000        |<br>| rpl_semi_sync_master_trace_level      | 32           |<br>| rpl_semi_sync_master_wait_no_slave    | ON           |<br>| rpl_semi_sync_master_wait_point       | AFTER_COMMIT |<br>| rpl_semi_sync_slave_delay_master      | OFF          |<br>| rpl_semi_sync_slave_enabled           | OFF          |<br>| rpl_semi_sync_slave_kill_conn_timeout | 5            |<br>| rpl_semi_sync_slave_trace_level       | 32           |<br>+---------------------------------------+--------------+<br>9 rows in set (0.001 sec)<br><br>MariaDB [(none)]&gt; show global status  like &#x27;%semi%&#x27;;<br>+--------------------------------------------+-------+<br>| Variable_name                              | Value |<br>+--------------------------------------------+-------+<br>| Rpl_semi_sync_master_clients               | 2     |<br>| Rpl_semi_sync_master_get_ack               | 0     |<br>| Rpl_semi_sync_master_net_avg_wait_time     | 0     |<br>| Rpl_semi_sync_master_net_wait_time         | 0     |<br>| Rpl_semi_sync_master_net_waits             | 0     |<br>| Rpl_semi_sync_master_no_times              | 0     |<br>| Rpl_semi_sync_master_no_tx                 | 0     |<br>| Rpl_semi_sync_master_request_ack           | 0     |<br>| Rpl_semi_sync_master_status                | ON    |<br>| Rpl_semi_sync_master_timefunc_failures     | 0     |<br>| Rpl_semi_sync_master_tx_avg_wait_time      | 0     |<br>| Rpl_semi_sync_master_tx_wait_time          | 0     |<br>| Rpl_semi_sync_master_tx_waits              | 0     |<br>| Rpl_semi_sync_master_wait_pos_backtraverse | 0     |<br>| Rpl_semi_sync_master_wait_sessions         | 0     |<br>| Rpl_semi_sync_master_yes_tx                | 0     |<br>| Rpl_semi_sync_slave_send_ack               | 0     |<br>| Rpl_semi_sync_slave_status                 | OFF   |<br>+--------------------------------------------+-------+<br>18 rows in set (0.001 sec)<br><br><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">测试</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在master实现，创建数据库，立即成功</span><br>MariaDB [(none)]&gt; create database db11;<br>Query OK, 1 row affected (0.001 sec)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在所有salve节点实现，停止复制线程</span><br>MariaDB [(none)]&gt; stop slave;<br>Query OK, 0 rows affected (0.004 sec)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在master实现，创建数据库，等待3S成功</span><br>MariaDB [(none)]&gt; create database db12;<br>Query OK, 1 row affected (3.006 sec)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在任意一个salve节点实现，恢复复制线程</span><br>MariaDB [(none)]&gt; start slave;<br>Query OK, 0 rows affected (0.001 sec)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在master实现，创建数据库，立即成功</span><br>MariaDB [(none)]&gt; create database db13;<br>Query OK, 1 row affected (0.001 sec)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在所有从节点停止同步线程，在主节点可以看到以下日志信息</span><br>MariaDB [(none)]&gt; stop slave;<br>[21:22:06 root@rocky ~]#tail  /var/log/mariadb/mariadb.log <br>2023-09-06 21:14:57 11 [Note] Stop semi-sync binlog_dump to slave (server_id: 128)<br>2023-09-06 21:15:05 12 [Note] Stop semi-sync binlog_dump to slave (server_id: 3)<br>2023-09-06 21:15:13 10 [Warning] Timeout waiting for reply of binlog (file: mariadb-bin.000004, pos: 856), semi-sync up to file mariadb-bin.000004, position 727.<br>2023-09-06 21:15:13 10 [Note] Semi-sync replication switched OFF.<br>2023-09-06 21:15:20 15 [Note] Start binlog_dump to slave_server(128), pos(mariadb-bin.000004, 727), using_gtid(0), gtid(&#x27;&#x27;)<br>2023-09-06 21:15:20 15 [Note] Start semi-sync binlog_dump to slave (server_id: 128), pos(./mariadb-bin.000004, 727)<br>2023-09-06 21:15:20 6 [Note] Semi-sync replication switched ON with slave (server_id: 128) at (mariadb-bin.000004, 856)<br>2023-09-06 21:19:58 15 [Note] Stop semi-sync binlog_dump to slave (server_id: 128)<br>2023-09-06 21:20:41 10 [Warning] Timeout waiting for reply of binlog (file: mariadb-bin.000004, pos: 1114), semi-sync up to file mariadb-bin.000004, position 985.<br>2023-09-06 21:20:41 10 [Note] Semi-sync replication switched OFF.<br><br><br></code></pre></td></tr></table></figure><h1 id="5-用mycat实现mysql的读写分离"><a href="#5-用mycat实现mysql的读写分离" class="headerlink" title="5.用mycat实现mysql的读写分离"></a>5.用mycat实现mysql的读写分离</h1><p><img src="image-20230906214723545.png" alt="image-20230906214723545"></p><h2 id="5-1-主机环境："><a href="#5-1-主机环境：" class="headerlink" title="5.1 主机环境："></a>5.1 主机环境：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mycat-server 10.0.0.128  CentOS8.5<br>mysql-master 10.0.0.4   rocky8.5 , mariadb10.3.35<br>mysql-slave 10.0.0.3  rocky8.5 , mariadb10.3.35<br></code></pre></td></tr></table></figure><p><strong>关闭selinux和防火墙</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[21:37:52 root@rocky ~]#systemctl stop firewalld<br>[21:53:06 root@rocky ~]#setenforce 0<br>setenforce: SELinux is disabled<br><br></code></pre></td></tr></table></figure><h2 id="5-2-创建MySQL主从数据库"><a href="#5-2-创建MySQL主从数据库" class="headerlink" title="5.2 创建MySQL主从数据库"></a>5.2 创建MySQL主从数据库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">##在mysql-master 10.0.0.4 上:</span></span><br>1 #在master上安装mariadb，并修改配置文件<br>[22:12:20 root@mysql-master ~]#yum install -y mariadb-server<br>[22:12:20 root@mysql-master ~]#vim /etc/my.cnf.d/mariadb-server.cnf<br>[mysqld]<br>log_bin   #启用二进制日志，mysql8.0之后版本默认开启<br>server-id=4#设置全局唯一的ID号<br><br>[22:12:20 root@mysql-master ~]#systemctl restart mariadb.service<br><br>2 #在master上创建复制用户<br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">grant replication slave on *.* to repluser@<span class="hljs-string">&#x27;10.0.0.%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>;</span><br><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">##在mysql-slave 10.0.0.3上:</span></span><br>1 #在slave上安装mariadb，并修改配置文件<br>[22:12:45 root@mysql-slave ~]#yum install -y mariadb-server<br>[22:12:45 root@mysql-slave ~]#vim /etc/my.cnf.d/mariadb-server.cnf<br>[mysqld]<br>server-id=3#设置全局唯一的ID号<br><br>[22:12:45 root@mysql-slave ~]#systemctl restart mariadb.service<br><br>2 #在slave配置<br>[22:12:45 root@mysql-slave ~]#mysql<br>MariaDB [(none)]&gt; CHANGE MASTER TO<br>MASTER_HOST=&#x27;10.0.0.4&#x27;,<br>MASTER_USER=&#x27;repluser&#x27;,<br>MASTER_PASSWORD=&#x27;123456&#x27;,<br>MASTER_PORT=3306,<br>MASTER_LOG_FILE=&#x27;mariadb-bin.000001&#x27;,<br>MASTER_LOG_POS=9176;<br>MariaDB [mysql]&gt; start slave;<br>MariaDB [(none)]&gt; show slave status \G;<br>*************************** 1. row ***************************<br>                Slave_IO_State: Waiting for master to send event<br>                   Master_Host: 10.0.0.4<br>                   Master_User: repluser<br>                   Master_Port: 3306<br>                 Connect_Retry: 60<br>               Master_Log_File: mariadb-bin.000001<br>           Read_Master_Log_Pos: 9176<br>                Relay_Log_File: mariadb-relay-bin.000003<br>                 Relay_Log_Pos: 557<br>         Relay_Master_Log_File: mariadb-bin.000001<br>              Slave_IO_Running: Yes<br>             Slave_SQL_Running: Yes<br>               Replicate_Do_DB: <br>           Replicate_Ignore_DB: <br>            Replicate_Do_Table: <br>        Replicate_Ignore_Table: <br>       Replicate_Wild_Do_Table: <br>   Replicate_Wild_Ignore_Table: <br>                    Last_Errno: 0<br>                    Last_Error: <br>                  Skip_Counter: 0<br>           Exec_Master_Log_Pos: 9176<br>               Relay_Log_Space: 10015<br>               Until_Condition: None<br>                Until_Log_File: <br>                 Until_Log_Pos: 0<br>            Master_SSL_Allowed: No<br>            Master_SSL_CA_File: <br>            Master_SSL_CA_Path: <br>               Master_SSL_Cert: <br>             Master_SSL_Cipher: <br>                Master_SSL_Key: <br>         Seconds_Behind_Master: 0<br> Master_SSL_Verify_Server_Cert: No<br>                 Last_IO_Errno: 0<br>                 Last_IO_Error: <br>                Last_SQL_Errno: 0<br>                Last_SQL_Error: <br>   Replicate_Ignore_Server_Ids: <br>              Master_Server_Id: 4<br>                Master_SSL_Crl: <br>            Master_SSL_Crlpath: <br>                    Using_Gtid: No<br>                   Gtid_IO_Pos: <br>       Replicate_Do_Domain_Ids: <br>   Replicate_Ignore_Domain_Ids: <br>                 Parallel_Mode: conservative<br>                     SQL_Delay: 0<br>           SQL_Remaining_Delay: NULL<br>       Slave_SQL_Running_State: Slave has read all relay log; waiting for the slave I/O thread to update it<br>              Slave_DDL_Groups: 29<br>Slave_Non_Transactional_Groups: 0<br>    Slave_Transactional_Groups: 7<br>1 row in set (0.002 sec)<br></code></pre></td></tr></table></figure><h2 id="5-3-在MySQL代理服务器上10-0-0-128上安装mycat并启动"><a href="#5-3-在MySQL代理服务器上10-0-0-128上安装mycat并启动" class="headerlink" title="5.3 在MySQL代理服务器上10.0.0.128上安装mycat并启动"></a>5.3 在MySQL代理服务器上10.0.0.128上安装mycat并启动</h2><p>mycat下载地址：</p><p><a href="http://dl.mycat.org.cn/">http://dl.mycat.org.cn/</a></p><p><a href="http://mycatone.top/">http://mycatone.top/</a></p><p><a href="https://github.com/MyCATApache/Mycat-Server">https://github.com/MyCATApache/Mycat-Server</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">安装java环境</span><br>[22:17:59 root@Mycat-server ~]#yum install -y java<br>[22:18:31 root@Mycat-server ~]#java -version<br>openjdk version &quot;1.8.0_312&quot;<br>OpenJDK Runtime Environment (build 1.8.0_312-b07)<br>OpenJDK 64-Bit Server VM (build 25.312-b07, mixed mode)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">下载并安装</span><br>[22:18:37 root@Mycat-server ~]#wget http://dl.mycat.org.cn/1.6.7.6/20220524101549/Mycat-server-1.6.7.6-release-20220524173810-linux.tar.gz<br><br>[22:27:00 root@Mycat-server ~]#mkdir /apps<br>[22:29:37 root@Mycat-server ~]#tar xvf Mycat-server-1.6.7.6-release-20220524173810-linux.tar.gz -C /apps/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置环境变量</span><br>[22:31:29 root@Mycat-server ~]#echo &#x27;PATH=/apps/mycat/bin:$PATH&#x27; &gt; /etc/profile.d/mycat.sh<br>[22:32:21 root@Mycat-server ~]#source /etc/profile.d/mycat.sh <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动mycat</span>                          <br>[22:33:52 root@Mycat-server ~]#file /apps/mycat/bin/mycat <br>/apps/mycat/bin/mycat: a /usr/bin/env sh script, ASCII text executable<br>[22:34:17 root@Mycat-server ~]#mycat <br>Usage: /apps/mycat/bin/mycat &#123; console | start | stop | restart | status | dump &#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">注意：此步骤启动较慢，需要等一会儿，另外如果内存太小会导致无法启动</span><br>[22:34:26 root@Mycat-server ~]#mycat start<br>Starting Mycat-server...<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">可以看到打开多个端口，其中8066端口用于连接mycat</span><br>[11:31:09 root@localhost ~]#ss -ntlp<br>State       Recv-Q      Send-Q           Local Address:Port            Peer Address:Port     Process                              <br>LISTEN      0           128                    0.0.0.0:22                   0.0.0.0:*         users:((&quot;sshd&quot;,pid=903,fd=4))       <br>LISTEN      0           1                    127.0.0.1:32000                0.0.0.0:*         users:((&quot;java&quot;,pid=2616,fd=4))      <br>LISTEN      0           100                          *:9066                       *:*         users:((&quot;java&quot;,pid=2616,fd=84))     <br>LISTEN      0           50                           *:42157                      *:*         users:((&quot;java&quot;,pid=2616,fd=68))     <br>LISTEN      0           50                           *:39027                      *:*         users:((&quot;java&quot;,pid=2616,fd=66))     <br>LISTEN      0           128                       [::]:22                      [::]:*         users:((&quot;sshd&quot;,pid=903,fd=6))       <br>LISTEN      0           50                           *:1984                       *:*         users:((&quot;java&quot;,pid=2616,fd=67))     <br>LISTEN      0           100                          *:8066                       *:*         users:((&quot;java&quot;,pid=2616,fd=88)) <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看日志，确认成功，可能需要等一会才能拿看到成功的提示</span><br>[11:31:03 root@localhost ~]#tail -f /apps/mycat/logs/wrapper.log <br>STATUS | wrapper  | 2023/09/06 11:31:02 | --&gt; Wrapper Started as Daemon<br>STATUS | wrapper  | 2023/09/06 11:31:02 | Launching a JVM...<br>INFO   | jvm 1    | 2023/09/06 11:31:03 | Wrapper (Version 3.2.3) http://wrapper.tanukisoftware.org<br>INFO   | jvm 1    | 2023/09/06 11:31:03 |   Copyright 1999-2006 Tanuki Software, Inc.  All Rights Reserved.<br>INFO   | jvm 1    | 2023/09/06 11:31:03 | <br>INFO   | jvm 1    | 2023/09/06 11:31:03 | MyCAT Server startup successfully. see logs in logs/mycat.log<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">用默认密码123456来连接mycat</span><br>[23:22:57 root@mysql-master ~]#mysql -uroot -p123456 -h 10.0.0.128 -P8066<br>Welcome to the MariaDB monitor.  Commands end with ; or \g.<br>Your MySQL connection id is 1<br>Server version: 5.6.29-mycat-1.6.7.4-release-20200105164103 MyCat Server (OpenCloudDB)<br><br>Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.<br><br>Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.<br><br>MySQL [(none)]&gt; show databases;<br>+----------+<br>| DATABASE |<br>+----------+<br>| TESTDB   |<br>+----------+<br>1 row in set (0.002 sec)<br><br>MySQL [(none)]&gt; use TESTDB;<br>Reading table information for completion of table and column names<br>You can turn off this feature to get a quicker startup with -A<br><br>Database changed<br>MySQL [TESTDB]&gt; show tables;<br>+------------------+<br>| Tables in TESTDB |<br>+------------------+<br>| address          |<br>| travelrecord     |<br>+------------------+<br>2 rows in set (0.001 sec)<br><br>MySQL [TESTDB]&gt; select *from tavelrecord;<br>ERROR 1064 (HY000): can&#x27;t find table define in schema TAVELRECORD schema:TESTDB<br>MySQL [TESTDB]&gt; select * from tavelrecord;<br>ERROR 1064 (HY000): can&#x27;t find table define in schema TAVELRECORD schema:TESTDB<br>MySQL [TESTDB]&gt; select * from address;<br>ERROR 1105 (HY000): backend connect: java.lang.IllegalArgumentException: Invalid DataSource:0<br></code></pre></td></tr></table></figure><h2 id="5-4-在mycat服务器上修改server-xml文件配置mycat的连接信息"><a href="#5-4-在mycat服务器上修改server-xml文件配置mycat的连接信息" class="headerlink" title="5.4 在mycat服务器上修改server.xml文件配置mycat的连接信息"></a>5.4 在mycat服务器上修改server.xml文件配置mycat的连接信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[11:38:48 root@localhost ~]#vim /apps/mycat/conf/server.xml <br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除注释，并修改下面行的8066为3306</span><br> &lt;!--<br>                        &lt;property name=&quot;serverPort&quot;&gt;3306&lt;/property&gt; &lt;property name=&quot;managerPort&quot;&gt;9066&lt;/property&gt; <br>                        &lt;property name=&quot;idleTimeout&quot;&gt;300000&lt;/property&gt; &lt;property name=&quot;bindIp&quot;&gt;0.0.0.0&lt;/property&gt;<br>                        &lt;property name=&quot;dataNodeIdleCheckPeriod&quot;&gt;300000&lt;/property&gt; #5 * 60 * 1000L; //连接空闲检查 删除#后面部分<br>                        &lt;property name=&quot;frontWriteQueueSize&quot;&gt;4096&lt;/property&gt; &lt;property name=&quot;processors&quot;&gt;32&lt;/property&gt;# --&gt; 删除#后面部分<br><br><br>&lt;user name=&quot;user&quot;&gt;<br>&lt;property name=&quot;password&quot;&gt;user&lt;/property&gt;#连接<br>&lt;property name=&quot;schemas&quot;&gt;TESTDB&lt;/property&gt;<br><br>        &lt;/user&gt;<br><br></code></pre></td></tr></table></figure><h2 id="5-5-修改schema-xml实现读写分离策略"><a href="#5-5-修改schema-xml实现读写分离策略" class="headerlink" title="5.5 修改schema.xml实现读写分离策略"></a>5.5 修改schema.xml实现读写分离策略</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs shell">[07:58:27 root@localhost ~]#vim /apps/mycat/conf/schema.xml<br>&lt;?xml version=&quot;1.0&quot;?&gt;<br>  2 &lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;<br>  3 &lt;mycat:schema xmlns:mycat=&quot;http://io.mycat/&quot;&gt;<br>  4 <br>  5         &lt;schema name=&quot;TESTDB&quot; checkSQLschema=&quot;****false***&quot; sqlMaxLimit=&quot;100&quot; randomDataNode=&quot;dn1&quot; dataNode=&quot;**dn1**&quot;&gt; ##dataNode=&quot;dn1&quot;是添加的内容<br> 11         &lt;/schema&gt;<br> 14         &lt;dataNode name=&quot;dn1&quot; dataHost=&quot;localhost1&quot; database=&quot;**mycat**&quot; /&gt;<br> 21         &lt;dataHost name=&quot;localhost1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;**1**&quot; ##balance=&quot;1&quot;表示读写分离<br> 22                           writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&gt;<br> 23                 &lt;heartbeat&gt;select user()&lt;/heartbeat&gt;<br> 24                 &lt;!-- can have multi write hosts --&gt;<br> 25  *** &lt;writeHost host=&quot;host1&quot; url=&quot;10.0.0.4:3306&quot; user=&quot;root&quot;                              password=&quot;123456&quot;&gt;****##10.0.0.4为主库<br> <br> 26*** &lt;readHost host=&quot;host2&quot; url=&quot;10.0.0.3:3306&quot; user=&quot;root&quot;                              password=&quot;123456&quot;&gt;***##10.0.0.3为从库<br> 27                 &lt;/writeHost&gt;<br>&lt;/dataHost&gt;<br>&lt;/mycat:schema&gt;<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#以上***部分表示原配置文件中需要修改的内容</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">注意大小写</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">最终文件内容</span><br>[07:58:27 root@localhost ~]#vim /apps/mycat/conf/schema.xml<br>&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;<br>&lt;mycat:schema xmlns:mycat=&quot;http://io.mycat/&quot;&gt;<br>    &lt;schema name=&quot;TESTDB&quot; checkSQLschema=&quot;false&quot; sqlMaxLimit=&quot;100&quot; dataNode=&quot;dn1&quot;&gt;<br>    &lt;/schema&gt;<br>    &lt;dataNode name=&quot;dn1&quot; dataHost=&quot;localhost1&quot; database=&quot;hellodb&quot; /&gt;<br>    &lt;dataHost name=&quot;localhost1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;1&quot;<br>              writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot; switchType=&quot;1&quot;  slaveThreshold=&quot;100&quot;&gt;<br>        &lt;heartbeat&gt;select user()&lt;/heartbeat&gt;<br>        &lt;writeHost host=&quot;host1&quot; url=&quot;10.0.0.4:3306&quot; user=&quot;admin&quot;<br>                   password=&quot;123456&quot;&gt;<br>         &lt;readHost host=&quot;host2&quot; url=&quot;10.0.0.3:3306&quot; user=&quot;admin&quot; password=&quot;123456&quot; /&gt;<br>        &lt;/writeHost&gt;<br>    &lt;/dataHost&gt;<br>&lt;/mycat:schema&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启启动mycat</span><br>[20:51:20 root@localhost ~]#mycat restart<br></code></pre></td></tr></table></figure><p>注意：要保证使用root/123456权限成功登录10.0.0.4和10.0.0.3机器上面的mysql数据库。同时也要授权mycat机器能使用root/123456权限成功登录10.0.0.4和10.0.0.3机器上面的mysql数据库否则会导致登录mycat后，对数据库和表的操作失败。</p><p>示例：schema.xml</p><p><img src="image-20230907205610664.png" alt="image-20230907205610664"></p><h2 id="5-6-在后端主服务器上创建用户并对mycat授权"><a href="#5-6-在后端主服务器上创建用户并对mycat授权" class="headerlink" title="5.6 在后端主服务器上创建用户并对mycat授权"></a>5.6 在后端主服务器上创建用户并对mycat授权</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在master上创建用于mycat连接的admin用户</span><br>MariaDB [(none)]&gt; create user admin@&#x27;10.0.0.%&#x27; identified by &#x27;123456&#x27;;<br>MariaDB [(none)]&gt; grant all on hellodb.* to admin@&#x27;10.0.0.%&#x27;;<br></code></pre></td></tr></table></figure><h2 id="5-7-在主机上连接并测试"><a href="#5-7-在主机上连接并测试" class="headerlink" title="5.7 在主机上连接并测试"></a>5.7 在主机上连接并测试</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">[21:14:39 root@ROOT-DNS ~]#mysql -uroot -p123456 -h 10.0.0.128 TESTDB<br>MySQL [TESTDB]&gt; select * from teachers ;<br>+-----+---------------+-----+--------+<br>| TID | Name          | Age | Gender |<br>+-----+---------------+-----+--------+<br>|   1 | Song Jiang    |  45 | M      |<br>|   2 | Zhang Sanfeng |  94 | M      |<br>|   3 | Miejue Shitai |  77 | F      |<br>|   4 | Lin Chaoying  |  93 | F      |<br>|   5 | aa            |  17 | M      |<br>|   6 | bb            |  22 | M      |<br>|   7 | cc            |  22 | M      |<br>+-----+---------------+-----+--------+<br><br></code></pre></td></tr></table></figure><h2 id="5-8-通过查看通用日志确认实现读写分离"><a href="#5-8-通过查看通用日志确认实现读写分离" class="headerlink" title="5.8 通过查看通用日志确认实现读写分离"></a>5.8 通过查看通用日志确认实现读写分离</h2><p>在mariadb上查看通用日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">MariaDB [(none)]&gt; show  variables like &#x27;general_log&#x27;; #查看日志是否开启<br>MariaDB [(none)]&gt; set global general_log=on;#开启日志功能<br>MariaDB [(none)]&gt; show  variables like &#x27;general_log_file&#x27;; #查看日志保存位置名称<br>MariaDB [(none)]&gt; set global general_log_file=&#x27;rocky.log&#x27;;#设置日志文件名称<br></code></pre></td></tr></table></figure><p>在主和从服务器上分别开启通用日志，查看读写分离</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[21:56:26 root@mysql-master ~]#vim /etc/my.cnf.d/mariadb-server.cnf <br>[mysqld]<br>general_log=ON<br><br>[21:57:03 root@mysql-master ~]#systemctl restart mariadb.service <br>[21:54:07 root@mysql-master ~]#tail -f /var/lib/mysql/rocky.log<br></code></pre></td></tr></table></figure><p>验证结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在客户端上执行下面两条sql语句</span><br>MySQL [TESTDB]&gt; insert teachers (name,age,gender) values(&#x27;hh&#x27;,22,&#x27;M&#x27;);<br>MySQL [TESTDB]&gt; select * from teachers where name = &#x27;bb&#x27; ;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">主节点上10.0.0.4查看通用日志</span><br>[21:57:44 root@mysql-master ~]#tail -f /var/lib/mysql/rocky.log <br>230907 21:59:11    29 Queryselect user()<br>230907 21:59:21    21 Queryselect user()<br>230907 21:59:28    31 QuerySET names utf8<br>insert teachers (name,age,gender) values(&#x27;hh&#x27;,22,&#x27;M&#x27;)<br>230907 21:59:31    33 Connectadmin@10.0.0.128 as anonymous on hellodb<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">从节点上10.0.0.3查看通用日志</span><br>[22:02:17 root@mysql-slave ~]#tail -f /var/lib/mysql/rocky.log <br>230907 22:01:41    44 Queryselect user()<br>230907 22:01:49    45 QuerySET names utf8;show tables<br>    39 Queryselect * from teachers where name = &#x27;bb&#x27;<br>230907 22:01:51    41 Queryselect user()<br><br></code></pre></td></tr></table></figure><h2 id="5-9-停止从节点，mycat自动调度至主节点"><a href="#5-9-停止从节点，mycat自动调度至主节点" class="headerlink" title="5.9 停止从节点，mycat自动调度至主节点"></a>5.9 停止从节点，mycat自动调度至主节点</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[22:11:01 root@mysql-slave ~]#systemctl stop mariadb<br>MySQL [TESTDB]&gt; show variables like &#x27;server_id&#x27;;<br>+---------------+-------+<br>| Variable_name | Value |<br>+---------------+-------+<br>| server_id     | 4     |<br>+---------------+-------+<br>1 row in set (0.002 sec)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">停止主节点后，mycat不会自动调度写请求至从节点，查询也不行</span><br>MySQL [TESTDB]&gt; insert teachers (name,age,gender) values(&#x27;jj&#x27;,22,&#x27;M&#x27;);<br>ERROR 1184 (HY000): java.net.ConnectException: Connection refused<br>MySQL [TESTDB]&gt; show variables like &#x27;server_id&#x27;;<br>ERROR 1184 (HY000): java.net.ConnectException: Connection refused<br></code></pre></td></tr></table></figure><h1 id="6-实现openvpn部署，并且测试通过，输出博客或者自己的文档存档。"><a href="#6-实现openvpn部署，并且测试通过，输出博客或者自己的文档存档。" class="headerlink" title="6.实现openvpn部署，并且测试通过，输出博客或者自己的文档存档。"></a>6.实现openvpn部署，并且测试通过，输出博客或者自己的文档存档。</h1><h2 id="6-1-准备阿里云网络实验环境"><a href="#6-1-准备阿里云网络实验环境" class="headerlink" title="6.1 准备阿里云网络实验环境"></a>6.1 准备阿里云网络实验环境</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1 阿里云创建专有网络<br>指定城市和可用区：华北3（张家口）可用区A<br>网段名xiaohexie-net1和地址段172.16.0.0/12，默认资源组<br>交换机名xiaohexie-net1-sw1 可用区A IPV4地址段172.30.0.0/24<br>安全组开放端口22，3389，1194/tcp/udp<br><br><br>2 创建VPN服务器有公网IP地址的实例1个<br>指定城市和可用区：华北3（张家口）可用区A<br>计算型 2核(vCPU) 4GiB<br>网络：xiaohexie-net1 交换机：xiaohexie-net1-sw1 <br>公网IP   按量收费 5M<br>默认安全组默认配置开放端口22，3389，1194/tcp/udp，icmp<br>rocky8.5<br>系统盘 存储默认高校云盘40G<br><br><br>3 创建VPN服务器有公网IP地址的实例第2个<br>按量付费<br>指定城市和可用区：华北3（张家口）可用区A<br>计算型 1核(vCPU) 2GiB<br>网络：xiaohexie-net1 交换机：xiaohexie-net1-sw1 <br>默认安全组默认配置开放端口22，3389，1194/tcp/udp，icmp<br>rocky8.5<br>系统盘 存储默认高校云盘40G<br><br>4 打开安全组端口  1194/tcp/udp<br></code></pre></td></tr></table></figure><p><img src="image-20230904164206456.png" alt="image-20230904164206456"></p><p>修改安全组规则：</p><p><img src="image-20230904164639710.png" alt="image-20230904164639710"></p><h2 id="6-2-环境：局域网OpenVPN实战环境"><a href="#6-2-环境：局域网OpenVPN实战环境" class="headerlink" title="6.2 环境：局域网OpenVPN实战环境"></a>6.2 环境：局域网OpenVPN实战环境</h2><p><img src="image-20230906214103238.png" alt="image-20230906214103238"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs http">共四台主机<br>1 openvpn server;<br>rocky8.5<br>eth0:10.0.0.8  NAT模式，模拟公网IP<br>eth1:172.30.0.228  NAT模式，模拟公网IP<br><br><br>2 内网主机两台<br>第1台主机<br>eth0:172.30.0.229  仅主机模式，私网IP<br>第2台主机<br>eth0:172.30.0.230  仅主机模式，私网IP<br><br><br>3 Windows 客户端<br></code></pre></td></tr></table></figure><h2 id="6-2-安装OpenVPN软件包"><a href="#6-2-安装OpenVPN软件包" class="headerlink" title="6.2 安装OpenVPN软件包"></a>6.2 安装OpenVPN软件包</h2><h3 id="6-2-1-查看版本"><a href="#6-2-1-查看版本" class="headerlink" title="6.2.1 查看版本"></a>6.2.1 查看版本</h3><h4 id="6-2-1-1-查看官网版本OpenVPN版本"><a href="#6-2-1-1-查看官网版本OpenVPN版本" class="headerlink" title="6.2.1.1 查看官网版本OpenVPN版本"></a>6.2.1.1 查看官网版本OpenVPN版本</h4><p><a href="https://openvpn.net/community-downloads/">https://openvpn.net/community-downloads/</a></p><p><img src="image-20230904174321716.png" alt="image-20230904174321716"></p><h4 id="6-2-1-2-在不同OS上查看"><a href="#6-2-1-2-在不同OS上查看" class="headerlink" title="6.2.1.2 在不同OS上查看"></a>6.2.1.2 在不同OS上查看</h4><p>范例：rocky8.5查看OpenVPN版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@openvpn-server yum.repos.d]# yum list openvpn<br>Last metadata expiration check: 0:07:01 ago on Mon 04 Sep 2023 05:33:46 PM CST.<br>Installed Packages<br>openvpn.x86_64                                                 2.4.12-1.el8     <br><br><br>[root@openvpn-server yum.repos.d]# yum list easy-rsa<br>Last metadata expiration check: 0:10:32 ago on Mon 04 Sep 2023 05:33:46 PM CST.<br>Installed Packages<br>easy-rsa.noarch                                                 3.0.8-1.el8                               <br></code></pre></td></tr></table></figure><h3 id="6-2-2-安装OpenVPN"><a href="#6-2-2-安装OpenVPN" class="headerlink" title="6.2.2 安装OpenVPN"></a>6.2.2 安装OpenVPN</h3><p>后面环境以Rocky8.5上基于EPEL源安装OpenVPN</p><h4 id="6-2-2-1-安装OpenVPN和证书工具"><a href="#6-2-2-1-安装OpenVPN和证书工具" class="headerlink" title="6.2.2.1 安装OpenVPN和证书工具"></a>6.2.2.1 安装OpenVPN和证书工具</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">安装OpenVPN服务器端</span><br>[root@openvpn-server ~]# yum install -y openvpn<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装证书管理工具</span><br>[root@openvpn-server ~]# yum -y install easy-rsa<br></code></pre></td></tr></table></figure><h4 id="6-2-2-2-准备相关配置文件"><a href="#6-2-2-2-准备相关配置文件" class="headerlink" title="6.2.2.2 准备相关配置文件"></a>6.2.2.2 准备相关配置文件</h4><p>#生成服务器配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">生成服务器配置文件</span><br>[root@openvpn-server ~]# cp /usr/share/doc/openvpn/sample/sample-config-files/server.conf  /etc/openvpn/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">准备证书颁发相关文件</span><br>[root@openvpn-server ~]# cp -r /usr/share/easy-rsa/ /etc/openvpn/easy-rsa-server<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">准备证书颁发相关变量的配置文件</span><br>[root@openvpn-server ~]# cp /usr/share/doc/easy-rsa/vars.example /etc/openvpn/easy-rsa-server/3/vars<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">建议修改给CA和OpenVPN服务器颁发的证书的有效期，可适当加长</span><br>[root@openvpn-server ~]# vim /etc/openvpn/easy-rsa-server/3/vars <br><span class="hljs-meta prompt_">#</span><span class="language-bash">CA的证书默认有效期为10年，可以适当延长，比如：36500天</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">set_var EASYRSA_CA_EXPIRE      3650</span><br>set_var EASYRSA_CA_EXPIRE       36500<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">服务器证书默认有效期为825天，可以适当延长，比如：3650天</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">set_var EASYRSA_CERT_EXPIRE    825</span><br>set_var EASYRSA_CERT_EXPIRE     3650<br><br>[root@openvpn-server ~]# tree /etc/openvpn<br>/etc/openvpn<br>├── client<br>├── easy-rsa-server<br>│   ├── 3 -&gt; 3.0.8<br>│   ├── 3.0 -&gt; 3.0.8<br>│   └── 3.0.8<br>│       ├── easyrsa<br>│       ├── openssl-easyrsa.cnf<br>│       ├── vars<br>│       └── x509-types<br>│           ├── ca<br>│           ├── client<br>│           ├── code-signing<br>│           ├── COMMON<br>│           ├── email<br>│           ├── kdc<br>│           ├── server<br>│           └── serverClient<br>├── server<br>└── server.conf<br><br>7 directories, 12 files<br></code></pre></td></tr></table></figure><h2 id="6-3-准备证书相关文件"><a href="#6-3-准备证书相关文件" class="headerlink" title="6.3 准备证书相关文件"></a>6.3 准备证书相关文件</h2><h3 id="6-3-1-初始化PKI和CA颁发机构环境"><a href="#6-3-1-初始化PKI和CA颁发机构环境" class="headerlink" title="6.3.1 初始化PKI和CA颁发机构环境"></a>6.3.1 初始化PKI和CA颁发机构环境</h3><h4 id="6-3-1-1-脚本easyrsa帮助用法"><a href="#6-3-1-1-脚本easyrsa帮助用法" class="headerlink" title="6.3.1.1 脚本easyrsa帮助用法"></a>6.3.1.1 脚本easyrsa帮助用法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@openvpn-server ~]# cd /etc/openvpn/easy-rsa-server/3/<br>[root@openvpn-server 3]# ls<br>easyrsa  openssl-easyrsa.cnf  vars  x509-types<br>[root@openvpn-server 3]# file easyrsa <br>easyrsa: POSIX shell script, ASCII text executable<br>[root@openvpn-server 3]# ./easyrsa <br><br>Note: using Easy-RSA configuration from: /etc/openvpn/easy-rsa-server/3.0.8/vars<br><br>Easy-RSA 3 usage and overview<br><br>USAGE: easyrsa [options] COMMAND [command-options]<br><br>A list of commands is shown below. To get detailed usage and help for a<br>command, run:<br>  ./easyrsa help COMMAND<br><br>For a listing of options that can be supplied before the command, use:<br>  ./easyrsa help options<br><br>Here is the list of commands available with a short syntax reminder. Use the<br>&#x27;help&#x27; command above to get full usage details.<br><br>  init-pki<br>  build-ca [ cmd-opts ]<br>  gen-dh<br>  gen-req &lt;filename_base&gt; [ cmd-opts ]<br>  sign-req &lt;type&gt; &lt;filename_base&gt;<br>  build-client-full &lt;filename_base&gt; [ cmd-opts ]<br>  build-server-full &lt;filename_base&gt; [ cmd-opts ]<br>  revoke &lt;filename_base&gt; [cmd-opts]<br>  renew &lt;filename_base&gt; [cmd-opts]<br>  build-serverClient-full &lt;filename_base&gt; [ cmd-opts ]<br>  gen-crl<br>  update-db<br>  show-req &lt;filename_base&gt; [ cmd-opts ]<br>  show-cert &lt;filename_base&gt; [ cmd-opts ]<br>  show-ca [ cmd-opts ]<br>  import-req &lt;request_file_path&gt; &lt;short_basename&gt;<br>  export-p7 &lt;filename_base&gt; [ cmd-opts ]<br>  export-p8 &lt;filename_base&gt; [ cmd-opts ]<br>  export-p12 &lt;filename_base&gt; [ cmd-opts ]<br>  set-rsa-pass &lt;filename_base&gt; [ cmd-opts ]<br>  set-ec-pass &lt;filename_base&gt; [ cmd-opts ]<br>  upgrade &lt;type&gt;<br><br>DIRECTORY STATUS (commands would take effect on these locations)<br>  EASYRSA: /etc/openvpn/easy-rsa-server/3.0.8<br>      PKI: /etc/openvpn/easy-rsa-server/3/pki<br><br></code></pre></td></tr></table></figure><h4 id="6-3-1-2-初始化PKI生成PKI相关目录和文件"><a href="#6-3-1-2-初始化PKI生成PKI相关目录和文件" class="headerlink" title="6.3.1.2 初始化PKI生成PKI相关目录和文件"></a>6.3.1.2 初始化PKI生成PKI相关目录和文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@openvpn-server 3]# cd /etc/openvpn/easy-rsa-server/3/<br>[root@openvpn-server 3]# pwd<br>/etc/openvpn/easy-rsa-server/3<br>[root@openvpn-server 3]# ls<br>easyrsa  openssl-easyrsa.cnf  vars  x509-types<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">初始化数据，在当前目录下生成pki目录及相关文件</span><br>[root@openvpn-server 3]# ./easyrsa init-pki<br><br>Note: using Easy-RSA configuration from: /etc/openvpn/easy-rsa-server/3.0.8/vars<br><br>init-pki complete; you may now create a CA or requests.<br>Your newly created PKI dir is: /etc/openvpn/easy-rsa-server/3/pki<br><br>[root@openvpn-server 3]# tree<br>.<br>├── easyrsa<br>├── openssl-easyrsa.cnf<br>├── pki<br>│   ├── openssl-easyrsa.cnf<br>│   ├── private<br>│   ├── reqs<br>│   └── safessl-easyrsa.cnf<br>├── vars<br>└── x509-types<br>    ├── ca<br>    ├── client<br>    ├── code-signing<br>    ├── COMMON<br>    ├── email<br>    ├── kdc<br>    ├── server<br>    └── serverClient<br><br>4 directories, 13 files<br></code></pre></td></tr></table></figure><h3 id="6-3-2-创建CA机构环境"><a href="#6-3-2-创建CA机构环境" class="headerlink" title="6.3.2 创建CA机构环境"></a>6.3.2 创建CA机构环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@openvpn-server 3]# cd /etc/openvpn/easy-rsa-server/3/<br>[root@openvpn-server 3]# tree pki<br>pki<br>├── openssl-easyrsa.cnf<br>├── private<br>├── reqs<br>└── safessl-easyrsa.cnf<br><br>2 directories, 2 files<br><br><br>[root@openvpn-server 3]# ./easyrsa build-ca nopass <br><br>Note: using Easy-RSA configuration from: /etc/openvpn/easy-rsa-server/3.0.8/vars<br>Using SSL: openssl OpenSSL 1.1.1k  FIPS 25 Mar 2021<br>Generating RSA private key, 2048 bit long modulus (2 primes)<br>..................+++++<br>...................................................................................................................................................................+++++<br>e is 65537 (0x010001)<br>You are about to be asked to enter information that will be incorporated<br>into your certificate request.<br>What you are about to enter is what is called a Distinguished Name or a DN.<br>There are quite a few fields but you can leave some blank<br>For some fields there will be a default value,<br>If you enter &#x27;.&#x27;, the field will be left blank.<br>-----<br>Common Name (eg: your user, host, or server name) [Easy-RSA CA]:#回车接受默认值<br><br>CA creation complete and you may now import and sign cert requests.<br>Your new CA certificate file for publishing is at:<br>/etc/openvpn/easy-rsa-server/3/pki/ca.crt #生成自签名的证书文件<br><br>[root@openvpn-server 3]# tree pki<br>pki<br>├── ca.crt#生成的自签名文件<br>├── certs_by_serial<br>├── index.txt<br>├── index.txt.attr<br>├── issued<br>├── openssl-easyrsa.cnf<br>├── private<br>│   └── ca.key#生成的私钥文件<br>├── renewed<br>│   ├── certs_by_serial<br>│   ├── private_by_serial<br>│   └── reqs_by_serial<br>├── reqs<br>├── revoked<br>│   ├── certs_by_serial<br>│   ├── private_by_serial<br>│   └── reqs_by_serial<br>├── safessl-easyrsa.cnf<br>└── serial<br><br>12 directories, 7 files<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看生成CA相关的文件</span><br>[root@openvpn-server 3]# cat pki/serial <br>01<br>[root@openvpn-server 3]# ll pki/index.txt<br>-rw------- 1 root root 0 Sep  4 18:12 pki/index.txt<br>[root@openvpn-server 3]# ll pki/ca.crt pki/private/ca.key <br>-rw------- 1 root root 1204 Sep  4 18:12 pki/ca.crt<br>-rw------- 1 root root 1679 Sep  4 18:12 pki/private/ca.key<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看生成的自签名证书</span><br>[root@openvpn-server 3]# cat pki/ca.crt <br>-----BEGIN CERTIFICATE-----<br>MIIDTTCCAjWgAwIBAgIUOCaT1RijSDoXn2mRgqIKjhJ96eUwDQYJKoZIhvcNAQEL<br>BQAwFjEUMBIGA1UEAwwLRWFzeS1SU0EgQ0EwIBcNMjMwOTA0MTAxMjUwWhgPMjEy<br>MzA4MTExMDEyNTBaMBYxFDASBgNVBAMMC0Vhc3ktUlNBIENBMIIBIjANBgkqhkiG<br>9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvO2NEDFksJ0zZiXv9oZUPL7JNiYhx5f3UixE<br>9RCc+2mJ6B/fluxD5GnSWTbaXHZQ/HREeZ+SQaf4aaw4q4FpjnIOfRhDvA55D2xI<br>jf6tLLZX/SOmxhKEvRZOv7rHPdkjepcwq9Rr1IGFmE/2qE48MQdeveErwYiwruus<br>72nuE7//ZPPtv5VX8Hjz+si4rUcwn0caG5UXiFPdocXPjkQeOubQb73OmyJlvSWF<br>p4GZaya8yW1rcPzynZCdhfnNt9J8CVjLzkoL/jlt1uds2h28OGaMQKQSkny5kA3O<br>leOIvnqFGEqLahhTTeGLYkiNoNLD1KuHnamYp/uKk1a/m6rarwIDAQABo4GQMIGN<br>MB0GA1UdDgQWBBQ7XFYbRvlasglx8Y1P0qjdkGmuTzBRBgNVHSMESjBIgBQ7XFYb<br>Rvlasglx8Y1P0qjdkGmuT6EapBgwFjEUMBIGA1UEAwwLRWFzeS1SU0EgQ0GCFDgm<br>k9UYo0g6F59pkYKiCo4SfenlMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgEGMA0G<br>CSqGSIb3DQEBCwUAA4IBAQAT8I4o+HGU6r+dsErNxPlk0IfHhMcbWtlYfb5ydRj3<br>SfRe2Aa0H3mbSWF5QOckD4pr1rCBWLVFLNN0MV/NjNUefqDIDsO8D2K07CHFnJVB<br>ZGc2Zoo0qNW55HISTpSlbtmjHv4cRgN8C/EI05OUNPkFlarJoHF3iOkJlHH6KzUu<br>HFzPYuA+XgfAS0tezEYs84gGVFEQNe0SJ/ZXMtVK4Pg/6nNqbITLz/nbN5ZmsyQE<br>lyZLaw1AuD9LSmib6hNiNVF4w+HHGor49KptOYxGp3DlzAc8rgfp74lQw1BurWQm<br>8lWvfxusDttvBYbG/QIdogpgFEWx+/4V837nKEbavLv3<br>-----END CERTIFICATE-----<br>[root@openvpn-server 3]# openssl x509 -in pki/ca.crt -noout -text<br>Certificate:<br>    Data:<br>        Version: 3 (0x2)<br>        Serial Number:<br>            38:26:93:d5:18:a3:48:3a:17:9f:69:91:82:a2:0a:8e:12:7d:e9:e5<br>        Signature Algorithm: sha256WithRSAEncryption<br>        Issuer: CN = Easy-RSA CA<br>        Validity<br>            Not Before: Sep  4 10:12:50 2023 GMT<br>            Not After : Aug 11 10:12:50 2123 GMT<br>        Subject: CN = Easy-RSA CA<br>        Subject Public Key Info:<br>            Public Key Algorithm: rsaEncryption<br>                RSA Public-Key: (2048 bit)<br>                Modulus:<br>                    00:bc:ed:8d:10:31:64:b0:9d:33:66:25:ef:f6:86:<br>                    54:3c:be:c9:36:26:21:c7:97:f7:52:2c:44:f5:10:<br>                    9c:fb:69:89:e8:1f:df:96:ec:43:e4:69:d2:59:36:<br>                    da:5c:76:50:fc:74:44:79:9f:92:41:a7:f8:69:ac:<br>                    38:ab:81:69:8e:72:0e:7d:18:43:bc:0e:79:0f:6c:<br>                    48:8d:fe:ad:2c:b6:57:fd:23:a6:c6:12:84:bd:16:<br>                    4e:bf:ba:c7:3d:d9:23:7a:97:30:ab:d4:6b:d4:81:<br>                    85:98:4f:f6:a8:4e:3c:31:07:5e:bd:e1:2b:c1:88:<br>                    b0:ae:eb:ac:ef:69:ee:13:bf:ff:64:f3:ed:bf:95:<br>                    57:f0:78:f3:fa:c8:b8:ad:47:30:9f:47:1a:1b:95:<br>                    17:88:53:dd:a1:c5:cf:8e:44:1e:3a:e6:d0:6f:bd:<br>                    ce:9b:22:65:bd:25:85:a7:81:99:6b:26:bc:c9:6d:<br>                    6b:70:fc:f2:9d:90:9d:85:f9:cd:b7:d2:7c:09:58:<br>                    cb:ce:4a:0b:fe:39:6d:d6:e7:6c:da:1d:bc:38:66:<br>                    8c:40:a4:12:92:7c:b9:90:0d:ce:95:e3:88:be:7a:<br>                    85:18:4a:8b:6a:18:53:4d:e1:8b:62:48:8d:a0:d2:<br>                    c3:d4:ab:87:9d:a9:98:a7:fb:8a:93:56:bf:9b:aa:<br>                    da:af<br>                Exponent: 65537 (0x10001)<br>        X509v3 extensions:<br>            X509v3 Subject Key Identifier: <br>                3B:5C:56:1B:46:F9:5A:B2:09:71:F1:8D:4F:D2:A8:DD:90:69:AE:4F<br>            X509v3 Authority Key Identifier: <br>                keyid:3B:5C:56:1B:46:F9:5A:B2:09:71:F1:8D:4F:D2:A8:DD:90:69:AE:4F<br>                DirName:/CN=Easy-RSA CA<br>                serial:38:26:93:D5:18:A3:48:3A:17:9F:69:91:82:A2:0A:8E:12:7D:E9:E5<br><br>            X509v3 Basic Constraints: <br>                CA:TRUE<br>            X509v3 Key Usage: <br>                Certificate Sign, CRL Sign<br>    Signature Algorithm: sha256WithRSAEncryption<br>         13:f0:8e:28:f8:71:94:ea:bf:9d:b0:4a:cd:c4:f9:64:d0:87:<br>         c7:84:c7:1b:5a:d9:58:7d:be:72:75:18:f7:49:f4:5e:d8:06:<br>         b4:1f:79:9b:49:61:79:40:e7:24:0f:8a:6b:d6:b0:81:58:b5:<br>         45:2c:d3:74:31:5f:cd:8c:d5:1e:7e:a0:c8:0e:c3:bc:0f:62:<br>         b4:ec:21:c5:9c:95:41:64:67:36:66:8a:34:a8:d5:b9:e4:72:<br>         12:4e:94:a5:6e:d9:a3:1e:fe:1c:46:03:7c:0b:f1:08:d3:93:<br>         94:34:f9:05:95:aa:c9:a0:71:77:88:e9:09:94:71:fa:2b:35:<br>         2e:1c:5c:cf:62:e0:3e:5e:07:c0:4b:4b:5e:cc:46:2c:f3:88:<br>         06:54:51:10:35:ed:12:27:f6:57:32:d5:4a:e0:f8:3f:ea:73:<br>         6a:6c:84:cb:cf:f9:db:37:96:66:b3:24:04:97:26:4b:6b:0d:<br>         40:b8:3f:4b:4a:68:9b:ea:13:62:35:51:78:c3:e1:c7:1a:8a:<br>         f8:f4:aa:6d:39:8c:46:a7:70:e5:cc:07:3c:ae:07:e9:ef:89:<br>         50:c3:50:6e:ad:64:26:f2:55:af:7f:1b:ac:0e:db:6f:05:86:<br>         c6:fd:02:1d:a2:0a:60:14:45:b1:fb:fe:15:f3:7e:e7:28:46:<br>         da:bc:bb:f7<br><br><br></code></pre></td></tr></table></figure><h3 id="6-3-3-创建服务端证书申请"><a href="#6-3-3-创建服务端证书申请" class="headerlink" title="6.3.3 创建服务端证书申请"></a>6.3.3 创建服务端证书申请</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@openvpn-server 3]# cd /etc/openvpn/easy-rsa-server/3<br>[root@openvpn-server 3]# pwd<br>/etc/openvpn/easy-rsa-server/3<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建服务器证书申请文件，其中server是文件前缀</span><br>[root@openvpn-server 3]# ./easyrsa gen-req server nopass<br><br>Note: using Easy-RSA configuration from: /etc/openvpn/easy-rsa-server/3.0.8/vars<br>Using SSL: openssl OpenSSL 1.1.1k  FIPS 25 Mar 2021<br>Generating a RSA private key<br>..........................................................................+++++<br>...........................................+++++<br>writing new private key to &#x27;/etc/openvpn/easy-rsa-server/3/pki/easy-rsa-27759.n56kQe/tmp.msQzao&#x27;<br>-----<br>You are about to be asked to enter information that will be incorporated<br>into your certificate request.<br>What you are about to enter is what is called a Distinguished Name or a DN.<br>There are quite a few fields but you can leave some blank<br>For some fields there will be a default value,<br>If you enter &#x27;.&#x27;, the field will be left blank.<br>-----<br>Common Name (eg: your user, host, or server name) [server]:#接受默认值，直接回车<br><br>Keypair and certificate request completed. Your files are:<br>req: /etc/openvpn/easy-rsa-server/3/pki/reqs/server.req#生成请求文件<br>key: /etc/openvpn/easy-rsa-server/3/pki/private/server.key#生成私钥文件<br><br><br>[root@openvpn-server 3]# tree pki<br>pki<br>├── ca.crt<br>├── certs_by_serial<br>├── index.txt<br>├── index.txt.attr<br>├── issued<br>├── openssl-easyrsa.cnf<br>├── private<br>│   ├── ca.key<br>│   └── server.key#生成私钥文件<br>├── renewed<br>│   ├── certs_by_serial<br>│   ├── private_by_serial<br>│   └── reqs_by_serial<br>├── reqs<br>│   └── server.req#生成请求文件<br>├── revoked<br>│   ├── certs_by_serial<br>│   ├── private_by_serial<br>│   └── reqs_by_serial<br>├── safessl-easyrsa.cnf<br>└── serial<br><br>12 directories, 9 files<br><br><br></code></pre></td></tr></table></figure><h3 id="6-3-4-颁发服务器端证书"><a href="#6-3-4-颁发服务器端证书" class="headerlink" title="6.3.4 颁发服务器端证书"></a>6.3.4 颁发服务器端证书</h3><h3 id="6-3-4-查看颁发证书命令用法"><a href="#6-3-4-查看颁发证书命令用法" class="headerlink" title="6.3.4 查看颁发证书命令用法"></a>6.3.4 查看颁发证书命令用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@openvpn-server 3]# cd /etc/openvpn/easy-rsa-server/3/<br>[root@openvpn-server 3]# ./easyrsa help sign<br><br>Note: using Easy-RSA configuration from: /etc/openvpn/easy-rsa-server/3.0.8/vars<br><br>  sign-req &lt;type&gt; &lt;filename_base&gt;<br>      Sign a certificate request of the defined type. &lt;type&gt; must be a known<br>      type such as &#x27;client&#x27;, &#x27;server&#x27;, &#x27;serverClient&#x27;, or &#x27;ca&#x27; (or a user-added type.)<br><br>      This request file must exist in the reqs/ dir and have a .req file<br>      extension. See import-req below for importing reqs from other sources.<br></code></pre></td></tr></table></figure><h4 id="6-3-4-2-颁发服务器端证书"><a href="#6-3-4-2-颁发服务器端证书" class="headerlink" title="6.3.4.2 颁发服务器端证书"></a>6.3.4.2 颁发服务器端证书</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">将上面server.req的申请，颁发server类型的证书</span><br>[root@openvpn-server 3]# cd /etc/openvpn/easy-rsa-server/3/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第一个server表示证书的类型，第二个server表示请求文件名的前缀</span><br>[root@openvpn-server 3]# ./easyrsa help sign<br><br>Note: using Easy-RSA configuration from: /etc/openvpn/easy-rsa-server/3.0.8/vars<br><br>  sign-req &lt;type&gt; &lt;filename_base&gt;<br>      Sign a certificate request of the defined type. &lt;type&gt; must be a known<br>      type such as &#x27;client&#x27;, &#x27;server&#x27;, &#x27;serverClient&#x27;, or &#x27;ca&#x27; (or a user-added type.)<br><br>      This request file must exist in the reqs/ dir and have a .req file<br>      extension. See import-req below for importing reqs from other sources.<br><br>[root@openvpn-server 3]# cd /etc/openvpn/easy-rsa-server/3/<br>[root@openvpn-server 3]# ./easyrsa sign server server<br><br>Note: using Easy-RSA configuration from: /etc/openvpn/easy-rsa-server/3.0.8/vars<br>Using SSL: openssl OpenSSL 1.1.1k  FIPS 25 Mar 2021<br><br><br>You are about to sign the following certificate.<br>Please check over the details shown below for accuracy. Note that this request<br>has not been cryptographically verified. Please be sure it came from a trusted<br>source or that you have verified the request checksum with the sender.<br><br>Request subject, to be signed as a server certificate for 3650 days:#可以看到vars文件指定的有效期<br><br>subject=<br>    commonName                = server<br><br><br>Type the word &#x27;yes&#x27; to continue, or any other input to abort.<br>  Confirm request details: yes #输入yes回车<br>Using configuration from /etc/openvpn/easy-rsa-server/3/pki/easy-rsa-27817.CoQzG6/tmp.AdoNNL<br>Check that the request matches the signature<br>Signature ok<br>The Subject&#x27;s Distinguished Name is as follows<br>commonName            :ASN.1 12:&#x27;server&#x27;<br>Certificate is to be certified until Sep  1 10:34:57 2033 GMT (3650 days)<br><br>Write out database with 1 new entries<br>Data Base Updated<br><br>Certificate created at: /etc/openvpn/easy-rsa-server/3/pki/issued/server.crt#生成服务器证书文件<br><br><br></code></pre></td></tr></table></figure><h4 id="6-3-4-3-验证结果"><a href="#6-3-4-3-验证结果" class="headerlink" title="6.3.4.3 验证结果"></a>6.3.4.3 验证结果</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>[root@openvpn-server 3]# cd /etc/openvpn/easy-rsa-server/3/<br>[root@openvpn-server 3]# tree pki<br>pki<br>├── ca.crt<br>├── certs_by_serial<br>│   └── B4E4DEFE67EDAB91F2133984E939A6BD.pem  #生成服务器证书文件<br>├── index.txt<br>├── index.txt.attr<br>├── index.txt.attr.old<br>├── index.txt.old<br>├── issued<br>│   └── server.crt#生成服务器证书文件<br>├── openssl-easyrsa.cnf<br>├── private<br>│   ├── ca.key<br>│   └── server.key<br>├── renewed<br>│   ├── certs_by_serial<br>│   ├── private_by_serial<br>│   └── reqs_by_serial<br>├── reqs<br>│   └── server.req<br>├── revoked<br>│   ├── certs_by_serial<br>│   ├── private_by_serial<br>│   └── reqs_by_serial<br>├── safessl-easyrsa.cnf<br>├── serial<br>└── serial.old<br><br>12 directories, 14 files<br><br><br>[root@openvpn-server 3]# diff pki/certs_by_serial/B4E4DEFE67EDAB91F2133984E939A6BD.pem pki/issued/server.crt <br>[root@openvpn-server 3]# ll !*<br>ll pki/certs_by_serial/B4E4DEFE67EDAB91F2133984E939A6BD.pem pki/issued/server.crt<br>-rw------- 1 root root 4608 Sep  4 18:34 pki/certs_by_serial/B4E4DEFE67EDAB91F2133984E939A6BD.pem<br>-rw------- 1 root root 4608 Sep  4 18:34 pki/issued/server.crt<br><br>[root@openvpn-server 3]# cat pki/issued/server.crt <br>Certificate:<br>    Data:<br>        Version: 3 (0x2)<br>        Serial Number:<br>            b4:e4:de:fe:67:ed:ab:91:f2:13:39:84:e9:39:a6:bd<br>        Signature Algorithm: sha256WithRSAEncryption<br>        Issuer: CN=Easy-RSA CA<br>        Validity<br>            Not Before: Sep  4 10:34:57 2023 GMT<br>            Not After : Sep  1 10:34:57 2033 GMT<br>        Subject: CN=server<br>        Subject Public Key Info:<br>            Public Key Algorithm: rsaEncryption<br>                RSA Public-Key: (2048 bit)<br>                Modulus:<br>                    00:df:27:8e:88:3d:91:df:98:2a:e4:c3:02:88:ef:<br>                    61:32:cf:ac:6d:13:ab:69:7c:f6:9f:78:e0:23:9b:<br>                    43:04:f6:32:f5:61:75:d0:3f:9d:fb:a9:a0:ab:ba:<br>                    c7:d3:f7:28:68:13:68:ab:e9:0c:ca:a6:a4:83:08:<br>                    c7:8a:53:87:d4:af:af:42:32:46:9f:7c:4a:b2:e6:<br>                    c2:ec:8f:90:c1:2a:22:d4:33:45:67:8f:51:9a:cd:<br>                    81:9b:9f:96:92:d1:00:67:5e:a7:11:ca:43:8a:d4:<br>                    a4:4b:f6:71:c1:47:0f:58:5c:a2:6b:c5:43:d4:4d:<br>                    71:bd:a8:c3:40:b6:03:d6:ec:0f:ae:09:e1:15:8d:<br>                    04:c7:06:e3:de:b5:f6:1a:d3:ab:ba:70:6a:e0:16:<br>                    a2:2d:7f:fe:fe:87:00:9d:af:4d:a8:0f:fe:23:8f:<br>                    29:ff:a5:42:e4:cf:b7:f5:2b:a6:b0:42:19:de:85:<br>                    45:6e:67:c7:e5:b9:47:2f:f4:5a:1a:48:b9:ab:fe:<br>                    a1:c0:0a:6b:b9:13:85:b2:95:35:c8:9c:2a:27:cc:<br>                    c5:0a:62:68:c3:f7:c6:c3:53:e2:d4:05:8d:b1:16:<br>                    eb:6c:52:73:a9:5a:7b:af:1c:5b:ec:2c:8d:aa:32:<br>                    cb:33:38:db:78:f1:9a:93:11:92:07:fa:f1:0e:a1:<br>                    2b:af<br>                Exponent: 65537 (0x10001)<br>        X509v3 extensions:<br>            X509v3 Basic Constraints: <br>                CA:FALSE<br>            X509v3 Subject Key Identifier: <br>                58:E5:55:6A:4F:DE:64:F4:7A:11:E1:C9:CD:20:E1:95:0B:AB:BC:3A<br>            X509v3 Authority Key Identifier: <br>                keyid:3B:5C:56:1B:46:F9:5A:B2:09:71:F1:8D:4F:D2:A8:DD:90:69:AE:4F<br>                DirName:/CN=Easy-RSA CA<br>                serial:38:26:93:D5:18:A3:48:3A:17:9F:69:91:82:A2:0A:8E:12:7D:E9:E5<br><br>            X509v3 Extended Key Usage: <br>                TLS Web Server Authentication<br>            X509v3 Key Usage: <br>                Digital Signature, Key Encipherment<br>            X509v3 Subject Alternative Name: <br>                DNS:server<br>    Signature Algorithm: sha256WithRSAEncryption<br>         15:e3:96:9c:c6:99:39:89:34:45:bf:f4:6b:b6:24:88:a6:a0:<br>         55:bc:5a:d5:f1:3f:dd:8e:f6:53:2d:42:57:6c:64:61:38:4d:<br>         7a:00:f8:0a:55:15:25:2d:eb:bd:bf:61:31:88:82:51:1e:e7:<br>         15:62:0c:ab:20:b8:2e:29:59:94:3f:cd:bc:a9:8c:7a:c7:fa:<br>         87:a6:3d:40:5c:80:4d:9d:e0:b2:1e:7f:c2:b6:76:5a:7b:10:<br>         ef:84:e1:98:93:85:0b:4a:28:4c:3f:0c:55:45:3f:16:11:e5:<br>         80:6d:07:e0:42:73:b1:17:ee:12:94:53:57:88:b2:d9:04:78:<br>         25:1e:8c:03:6a:3f:08:8a:f1:a6:72:d9:2a:08:f1:b7:d8:1f:<br>         b9:b6:b3:80:e4:4e:69:b9:d7:59:26:c8:3a:21:8b:6c:54:14:<br>         b9:1a:70:05:e0:74:ff:9c:a4:55:8d:93:c3:31:fc:0a:b0:75:<br>         12:2c:80:1d:64:dc:60:44:3a:eb:9e:49:57:75:65:f4:30:7a:<br>         f9:41:c6:5f:ec:05:ae:53:b6:8c:6f:4f:85:f1:dc:16:92:89:<br>         e4:9c:6e:a5:c6:54:ad:11:27:7f:cb:97:43:e5:59:04:ef:a1:<br>         ba:6a:12:c6:af:c1:1f:4e:76:4b:92:4e:d8:fa:4a:61:83:68:<br>         19:ca:f3:01<br>-----BEGIN CERTIFICATE-----<br>MIIDaDCCAlCgAwIBAgIRALTk3v5n7auR8hM5hOk5pr0wDQYJKoZIhvcNAQELBQAw<br>FjEUMBIGA1UEAwwLRWFzeS1SU0EgQ0EwHhcNMjMwOTA0MTAzNDU3WhcNMzMwOTAx<br>MTAzNDU3WjARMQ8wDQYDVQQDDAZzZXJ2ZXIwggEiMA0GCSqGSIb3DQEBAQUAA4IB<br>DwAwggEKAoIBAQDfJ46IPZHfmCrkwwKI72Eyz6xtE6tpfPafeOAjm0ME9jL1YXXQ<br>P537qaCrusfT9yhoE2ir6QzKpqSDCMeKU4fUr69CMkaffEqy5sLsj5DBKiLUM0Vn<br>j1GazYGbn5aS0QBnXqcRykOK1KRL9nHBRw9YXKJrxUPUTXG9qMNAtgPW7A+uCeEV<br>jQTHBuPetfYa06u6cGrgFqItf/7+hwCdr02oD/4jjyn/pULkz7f1K6awQhnehUVu<br>Z8fluUcv9FoaSLmr/qHACmu5E4WylTXInConzMUKYmjD98bDU+LUBY2xFutsUnOp<br>WnuvHFvsLI2qMsszONt48ZqTEZIH+vEOoSuvAgMBAAGjgbUwgbIwCQYDVR0TBAIw<br>ADAdBgNVHQ4EFgQUWOVVak/eZPR6EeHJzSDhlQurvDowUQYDVR0jBEowSIAUO1xW<br>G0b5WrIJcfGNT9Ko3ZBprk+hGqQYMBYxFDASBgNVBAMMC0Vhc3ktUlNBIENBghQ4<br>JpPVGKNIOhefaZGCogqOEn3p5TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8E<br>BAMCBaAwEQYDVR0RBAowCIIGc2VydmVyMA0GCSqGSIb3DQEBCwUAA4IBAQAV45ac<br>xpk5iTRFv/RrtiSIpqBVvFrV8T/djvZTLUJXbGRhOE16APgKVRUlLeu9v2ExiIJR<br>HucVYgyrILguKVmUP828qYx6x/qHpj1AXIBNneCyHn/CtnZaexDvhOGYk4ULSihM<br>PwxVRT8WEeWAbQfgQnOxF+4SlFNXiLLZBHglHowDaj8IivGmctkqCPG32B+5trOA<br>5E5puddZJsg6IYtsVBS5GnAF4HT/nKRVjZPDMfwKsHUSLIAdZNxgRDrrnklXdWX0<br>MHr5QcZf7AWuU7aMb0+F8dwWkonknG6lxlStESd/y5dD5VkE76G6ahLGr8EfTnZL<br>kk7Y+kphg2gZyvMB<br>-----END CERTIFICATE-----<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看证书相关文件</span><br>[root@openvpn-server 3]# cat pki/serial<br>B4E4DEFE67EDAB91F2133984E939A6BE<br>[root@openvpn-server 3]# cat pki/index.txt<br>V330901103457ZB4E4DEFE67EDAB91F2133984E939A6BDunknown/CN=server<br>[root@openvpn-server 3]# cat pki/serial.old <br>b4e4defe67edab91f2133984e939a6bd<br><br></code></pre></td></tr></table></figure><h3 id="6-3-5-创建Diffie-Hellman-密钥"><a href="#6-3-5-创建Diffie-Hellman-密钥" class="headerlink" title="6.3.5 创建Diffie-Hellman 密钥"></a>6.3.5 创建Diffie-Hellman 密钥</h3><h4 id="6-3-5-1-Diffie-Hellman-算法说明"><a href="#6-3-5-1-Diffie-Hellman-算法说明" class="headerlink" title="6.3.5.1 Diffie-Hellman 算法说明"></a>6.3.5.1 Diffie-Hellman 算法说明</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">wiki参考链接：<br>https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange<br></code></pre></td></tr></table></figure><h4 id="6-3-5-2-创建Diffie-Hellman-密钥"><a href="#6-3-5-2-创建Diffie-Hellman-密钥" class="headerlink" title="6.3.5.2 创建Diffie-Hellman 密钥"></a>6.3.5.2 创建Diffie-Hellman 密钥</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@openvpn-server 3]# cd /etc/openvpn/easy-rsa-server/3/<br>[root@openvpn-server 3]# pwd<br>/etc/openvpn/easy-rsa-server/3<br>[root@openvpn-server 3]# ./easyrsa gen-dh<br><br>Note: using Easy-RSA configuration from: /etc/openvpn/easy-rsa-server/3.0.8/vars<br>Using SSL: openssl OpenSSL 1.1.1k  FIPS 25 Mar 2021<br>Generating DH parameters, 2048 bit long safe prime, generator 2<br>This is going to take a long time<br>...........................................+.+...............................................................+...................................................+...................++*++*++*++*<br><br>DH parameters of size 2048 created at /etc/openvpn/easy-rsa-server/3/pki/dh.pem<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看生成的文件</span><br>[root@openvpn-server 3]# ll pki/dh.pem <br>-rw------- 1 root root 424 Sep  4 18:45 pki/dh.pem<br>[root@openvpn-server 3]# cat !*<br>cat pki/dh.pem<br>-----BEGIN DH PARAMETERS-----<br>MIIBCAKCAQEAn3wYaDPpyvNEpGKujpDiCJ3IAIZkATK2Ud76DzXBl4UUYxLBaMGN<br>I9tbdN0gCIIhrhZb4FVZX6wNqg+XSUJUbJCMiBTHVvPOEuS5Gun7fm3iUVmqfd8d<br>xnVxwm/OW5hVLIf9pxZlUtyjPZu+GPDG4r2rH6gPWdw/bBwhHnvBylSwd4d1UxnR<br>LSEjlDgMHk+Nsd0TsXDMeLDDJFRxA76sTwHXNzQqcEl06FQ5d1JWdVpVoDsTaVFq<br>ta+PRKlZWGzdvROG0Jxm/sHMLlP+RXBp9xZxhAMJ8L5Cw4VTm4riujeLTz5Ik0xu<br>bewSuoErPy1AGqzi92dMrkuXrlPcemblowIBAg==<br>-----END DH PARAMETERS-----<br></code></pre></td></tr></table></figure><h3 id="6-3-6-准备客户端证书环境"><a href="#6-3-6-准备客户端证书环境" class="headerlink" title="6.3.6 准备客户端证书环境"></a>6.3.6 准备客户端证书环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@openvpn-server 3]# cp -a /usr/share/easy-rsa/ /etc/openvpn/easy-rsa-client<br><br>[root@openvpn-server 3]# cd /etc/openvpn/easy-rsa-client/3/<br>[root@openvpn-server 3]# pwd<br>/etc/openvpn/easy-rsa-client/3<br>[root@openvpn-server 3]# ls<br>easyrsa  openssl-easyrsa.cnf  x509-types<br>[root@openvpn-server 3]# tree<br>.<br>├── easyrsa<br>├── openssl-easyrsa.cnf<br>└── x509-types<br>    ├── ca<br>    ├── client<br>    ├── code-signing<br>    ├── COMMON<br>    ├── email<br>    ├── kdc<br>    ├── server<br>    └── serverClient<br><br>1 directory, 10 files<br><br>[root@openvpn-server 3]# ./easyrsa init-pki<br><br>init-pki complete; you may now create a CA or requests.<br>Your newly created PKI dir is: /etc/openvpn/easy-rsa-client/3/pki#生成新目录<br><br><br>[root@openvpn-server 3]# ls<br>easyrsa  openssl-easyrsa.cnf  pki  x509-types<br>[root@openvpn-server 3]# tree<br>.<br>├── easyrsa<br>├── openssl-easyrsa.cnf<br>├── pki#生成新目录<br>│   ├── openssl-easyrsa.cnf<br>│   ├── private<br>│   ├── reqs<br>│   └── safessl-easyrsa.cnf<br>└── x509-types<br>    ├── ca<br>    ├── client<br>    ├── code-signing<br>    ├── COMMON<br>    ├── email<br>    ├── kdc<br>    ├── server<br>    └── serverClient<br><br>4 directories, 12 files<br><br></code></pre></td></tr></table></figure><h3 id="6-3-7创建客户端证书申请"><a href="#6-3-7创建客户端证书申请" class="headerlink" title="6.3.7创建客户端证书申请"></a>6.3.7创建客户端证书申请</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@openvpn-server 3]# cd /etc/openvpn//easy-rsa-client/3/<br>[root@openvpn-server 3]# pwd<br>/etc/openvpn/easy-rsa-client/3<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">生成客户端的证书申请</span><br>[root@openvpn-server 3]# ./easyrsa gen-req xiaohexie nopass<br>Using SSL: openssl OpenSSL 1.1.1k  FIPS 25 Mar 2021<br>Generating a RSA private key<br>..+++++<br>..+++++<br>writing new private key to &#x27;/etc/openvpn/easy-rsa-client/3/pki/easy-rsa-28110.7vV12J/tmp.PSN65o&#x27;<br>-----<br>You are about to be asked to enter information that will be incorporated<br>into your certificate request.<br>What you are about to enter is what is called a Distinguished Name or a DN.<br>There are quite a few fields but you can leave some blank<br>For some fields there will be a default value,<br>If you enter &#x27;.&#x27;, the field will be left blank.<br>-----<br>Common Name (eg: your user, host, or server name) [xiaohexie]:<br><br>Keypair and certificate request completed. Your files are:#接受默认值，直接回车<br>req: /etc/openvpn/easy-rsa-client/3/pki/reqs/xiaohexie.req#私钥文件<br>key: /etc/openvpn/easy-rsa-client/3/pki/private/xiaohexie.key#证书申请文件<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">生成两个新文件</span><br>[root@openvpn-server 3]# tree<br>.<br>├── easyrsa<br>├── openssl-easyrsa.cnf<br>├── pki<br>│   ├── openssl-easyrsa.cnf<br>│   ├── private<br>│   │   └── xiaohexie.key#证书申请文件<br>│   ├── reqs<br>│   │   └── xiaohexie.req#私钥文件<br>│   └── safessl-easyrsa.cnf<br>└── x509-types<br>    ├── ca<br>    ├── client<br>    ├── code-signing<br>    ├── COMMON<br>    ├── email<br>    ├── kdc<br>    ├── server<br>    └── serverClient<br><br>4 directories, 14 files<br></code></pre></td></tr></table></figure><h3 id="2-3-8-颁发客户端证书"><a href="#2-3-8-颁发客户端证书" class="headerlink" title="2.3.8 颁发客户端证书"></a>2.3.8 颁发客户端证书</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@openvpn-server 3]# cd /etc/openvpn/easy-rsa-server/3/<br>[root@openvpn-server 3]# pwd<br>/etc/openvpn/easy-rsa-server/3<br><br><br>[root@openvpn-server 3]# ./easyrsa import-req /etc/openvpn/easy-rsa-client/3/pki/reqs/xiaohexie.req xiaohexie<br><br>Note: using Easy-RSA configuration from: /etc/openvpn/easy-rsa-server/3.0.8/vars<br>Using SSL: openssl OpenSSL 1.1.1k  FIPS 25 Mar 2021<br><br>The request has been successfully imported with a short name of: xiaohexie<br>You may now use this name to perform signing operations on this request.<br><br><br>[root@openvpn-server 3]# tree pki<br>pki<br>├── ca.crt<br>├── certs_by_serial<br>│   └── B4E4DEFE67EDAB91F2133984E939A6BD.pem<br>├── dh.pem<br>├── index.txt<br>├── index.txt.attr<br>├── index.txt.attr.old<br>├── index.txt.old<br>├── issued<br>│   └── server.crt<br>├── openssl-easyrsa.cnf<br>├── private<br>│   ├── ca.key<br>│   └── server.key<br>├── renewed<br>│   ├── certs_by_serial<br>│   ├── private_by_serial<br>│   └── reqs_by_serial<br>├── reqs<br>│   ├── server.req<br>│   └── xiaohexie.req<br>├── revoked<br>│   ├── certs_by_serial<br>│   ├── private_by_serial<br>│   └── reqs_by_serial<br>├── safessl-easyrsa.cnf<br>├── serial<br>└── serial.old<br><br>12 directories, 16 files<br><br><br>[root@openvpn-server 3]# ll pki/reqs/xiaohexie.req /etc/openvpn/easy-rsa-client/3/pki/reqs/xiaohexie.req <br>-rw------- 1 root root 891 Sep  4 19:30 /etc/openvpn/easy-rsa-client/3/pki/reqs/xiaohexie.req<br>-rw------- 1 root root 891 Sep  4 19:35 pki/reqs/xiaohexie.req<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改给客户端颁发的证书的有效期</span><br>[root@openvpn-server 3]# vim vars<br><span class="hljs-meta prompt_">#</span><span class="language-bash">建议修改给客户端颁发证书的有效期，可适当减少，比如：90天</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">set_var EASYRSA_CERT_EXPIRE    825</span><br>set_var EASYRSA_CERT_EXPIRE     90<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">颁发客户端证书</span><br>[root@openvpn-server 3]# ./easyrsa sign client xiaohexie<br><br>Note: using Easy-RSA configuration from: /etc/openvpn/easy-rsa-server/3.0.8/vars<br>Using SSL: openssl OpenSSL 1.1.1k  FIPS 25 Mar 2021<br><br><br>You are about to sign the following certificate.<br>Please check over the details shown below for accuracy. Note that this request<br>has not been cryptographically verified. Please be sure it came from a trusted<br>source or that you have verified the request checksum with the sender.<br><br>Request subject, to be signed as a client certificate for 90 days:<br><br>subject=<br>    commonName                = xiaohexie<br><br><br>Type the word &#x27;yes&#x27; to continue, or any other input to abort.<br>  Confirm request details: yes  #输入yes回车<br>Using configuration from /etc/openvpn/easy-rsa-server/3/pki/easy-rsa-28223.M1On8J/tmp.BVobq1<br>Check that the request matches the signature<br>Signature ok<br>The Subject&#x27;s Distinguished Name is as follows<br>commonName            :ASN.1 12:&#x27;xiaohexie&#x27;<br>Certificate is to be certified until Dec  3 11:42:34 2023 GMT (90 days)<br><br>Write out database with 1 new entries<br>Data Base Updated<br><br>Certificate created at: /etc/openvpn/easy-rsa-server/3/pki/issued/xiaohexie.crt  #证书文件<br><br>[root@openvpn-server 3]# tree pki<br>pki<br>├── ca.crt<br>├── certs_by_serial<br>│   ├── 6AAE9FE9052567C602C035116B1764C2.pem<br>│   └── B4E4DEFE67EDAB91F2133984E939A6BD.pem<br>├── dh.pem<br>├── index.txt<br>├── index.txt.attr<br>├── index.txt.attr.old<br>├── index.txt.old<br>├── issued<br>│   ├── server.crt<br>│   └── xiaohexie.crt#证书文件<br>├── openssl-easyrsa.cnf<br>├── private<br>│   ├── ca.key<br>│   └── server.key<br>├── renewed<br>│   ├── certs_by_serial<br>│   ├── private_by_serial<br>│   └── reqs_by_serial<br>├── reqs<br>│   ├── server.req<br>│   └── xiaohexie.req<br>├── revoked<br>│   ├── certs_by_serial<br>│   ├── private_by_serial<br>│   └── reqs_by_serial<br>├── safessl-easyrsa.cnf<br>├── serial<br>└── serial.old<br><br>12 directories, 18 files<br><br><br>[root@openvpn-server 3]# cat pki/index.txt<br>V330901103457ZB4E4DEFE67EDAB91F2133984E939A6BDunknown/CN=server<br>V231203114234Z6AAE9FE9052567C602C035116B1764C2unknown/CN=xiaohexie<br>[root@openvpn-server 3]# ll pki/issued/<br>total 16<br>-rw------- 1 root root 4608 Sep  4 18:34 server.crt<br>-rw------- 1 root root 4499 Sep  4 19:42 xiaohexie.crt<br>[root@openvpn-server 3]# ll pki/certs_by_serial/<br>total 16<br>-rw------- 1 root root 4499 Sep  4 19:42 6AAE9FE9052567C602C035116B1764C2.pem<br>-rw------- 1 root root 4608 Sep  4 18:34 B4E4DEFE67EDAB91F2133984E939A6BD.pem<br>[root@openvpn-server 3]# cat pki/issued/xiaohexie.crt <br>Certificate:<br>    Data:<br>        Version: 3 (0x2)<br>        Serial Number:<br>            6a:ae:9f:e9:05:25:67:c6:02:c0:35:11:6b:17:64:c2<br>        Signature Algorithm: sha256WithRSAEncryption<br>        Issuer: CN=Easy-RSA CA<br>        Validity<br>            Not Before: Sep  4 11:42:34 2023 GMT<br>            Not After : Dec  3 11:42:34 2023 GMT<br>        Subject: CN=xiaohexie<br>        Subject Public Key Info:<br>            Public Key Algorithm: rsaEncryption<br>                RSA Public-Key: (2048 bit)<br>                Modulus:<br>                    00:ae:6e:4b:76:a9:62:45:4d:73:f9:af:b6:f1:e9:<br>                    eb:76:5e:08:f3:59:1d:f4:a6:57:9a:a7:20:13:92:<br>                    36:0a:af:77:b0:e1:d9:00:c0:47:26:bd:67:4c:4a:<br>                    d1:44:ac:e3:e1:3b:3f:d9:de:b5:f6:04:d0:70:93:<br>                    e6:15:1f:76:4b:35:f9:9b:74:81:7b:3a:ef:9f:0c:<br>                    40:cd:4e:f9:9f:7a:0e:9c:79:f8:4f:f9:ed:7b:fd:<br>                    92:df:c6:91:71:fb:5b:87:97:66:16:e0:a1:1e:8a:<br>                    cc:dd:e7:a0:94:85:51:6a:0d:7c:b2:df:df:68:81:<br>                    1a:0d:13:b9:48:53:61:4c:a2:90:9c:15:24:1e:e7:<br>                    9d:ff:54:f4:77:64:4b:48:8c:82:4b:02:33:40:ff:<br>                    35:c3:a1:c3:e2:c3:f0:e0:61:a0:b4:91:d7:88:22:<br>                    3e:29:8b:92:c6:f0:c7:5c:54:88:e7:91:6a:76:27:<br>                    be:2e:ae:64:0b:01:87:23:6b:82:fd:0b:f5:df:47:<br>                    d7:9f:06:3c:7e:d4:e5:d2:e4:cb:0e:58:45:87:ea:<br>                    a8:0d:0d:ac:ee:d8:f3:c9:ae:fa:71:c0:1c:d4:93:<br>                    44:13:3a:b5:07:a2:9b:03:1f:5a:86:ed:31:56:cc:<br>                    5f:bc:b8:86:3e:ef:b7:56:4b:05:f9:f2:99:40:31:<br>                    79:af<br>                Exponent: 65537 (0x10001)<br>        X509v3 extensions:<br>            X509v3 Basic Constraints: <br>                CA:FALSE<br>            X509v3 Subject Key Identifier: <br>                87:59:5C:82:2D:94:52:45:F0:39:5F:FF:19:33:19:1D:07:26:E8:40<br>            X509v3 Authority Key Identifier: <br>                keyid:3B:5C:56:1B:46:F9:5A:B2:09:71:F1:8D:4F:D2:A8:DD:90:69:AE:4F<br>                DirName:/CN=Easy-RSA CA<br>                serial:38:26:93:D5:18:A3:48:3A:17:9F:69:91:82:A2:0A:8E:12:7D:E9:E5<br><br>            X509v3 Extended Key Usage: <br>                TLS Web Client Authentication<br>            X509v3 Key Usage: <br>                Digital Signature<br>    Signature Algorithm: sha256WithRSAEncryption<br>         97:08:7a:15:bc:46:45:1e:5d:ba:9f:3b:ae:01:54:9e:32:1b:<br>         c9:78:58:59:dd:9b:9b:05:fd:96:5f:74:39:9b:55:a7:a2:e5:<br>         0c:a9:1b:cd:85:6a:6c:47:4d:e0:2d:a9:40:02:c4:23:cc:70:<br>         34:cf:6b:f2:1d:33:c5:cf:ae:08:56:0e:d1:6e:ca:ac:90:20:<br>         52:f3:f9:4b:a9:02:f1:bb:51:28:b7:3e:4d:79:6c:cc:92:97:<br>         47:d1:28:e8:5b:6b:92:cf:10:c1:b9:9f:69:e8:c3:20:7a:e7:<br>         61:0b:5b:58:a6:03:c8:9b:4f:24:7e:34:50:35:db:43:60:c5:<br>         4e:21:0f:2e:06:06:29:73:33:eb:f3:68:6a:2e:36:66:2a:65:<br>         86:68:df:2c:92:59:d6:34:eb:da:33:5b:5a:80:4c:73:1a:98:<br>         da:53:56:ea:ca:eb:54:55:33:03:dc:0f:80:ad:e4:c7:b0:1a:<br>         7a:56:e8:f7:03:76:5d:aa:47:1c:f2:72:35:59:da:30:02:a9:<br>         b4:83:c1:1b:71:f6:c4:b6:7c:d4:b7:71:75:97:fb:47:13:31:<br>         fb:29:44:34:b2:56:3b:a1:31:ea:a3:fb:ba:46:c5:09:cb:68:<br>         b3:d2:fb:4a:d1:55:63:0e:23:87:86:07:57:ad:28:25:be:e5:<br>         42:ae:71:21<br>-----BEGIN CERTIFICATE-----<br>MIIDVzCCAj+gAwIBAgIQaq6f6QUlZ8YCwDURaxdkwjANBgkqhkiG9w0BAQsFADAW<br>MRQwEgYDVQQDDAtFYXN5LVJTQSBDQTAeFw0yMzA5MDQxMTQyMzRaFw0yMzEyMDMx<br>MTQyMzRaMBQxEjAQBgNVBAMMCXhpYW9oZXhpZTCCASIwDQYJKoZIhvcNAQEBBQAD<br>ggEPADCCAQoCggEBAK5uS3apYkVNc/mvtvHp63ZeCPNZHfSmV5qnIBOSNgqvd7Dh<br>2QDARya9Z0xK0USs4+E7P9netfYE0HCT5hUfdks1+Zt0gXs6758MQM1O+Z96Dpx5<br>+E/57Xv9kt/GkXH7W4eXZhbgoR6KzN3noJSFUWoNfLLf32iBGg0TuUhTYUyikJwV<br>JB7nnf9U9HdkS0iMgksCM0D/NcOhw+LD8OBhoLSR14giPimLksbwx1xUiOeRanYn<br>vi6uZAsBhyNrgv0L9d9H158GPH7U5dLkyw5YRYfqqA0NrO7Y88mu+nHAHNSTRBM6<br>tQeimwMfWobtMVbMX7y4hj7vt1ZLBfnymUAxea8CAwEAAaOBojCBnzAJBgNVHRME<br>AjAAMB0GA1UdDgQWBBSHWVyCLZRSRfA5X/8ZMxkdByboQDBRBgNVHSMESjBIgBQ7<br>XFYbRvlasglx8Y1P0qjdkGmuT6EapBgwFjEUMBIGA1UEAwwLRWFzeS1SU0EgQ0GC<br>FDgmk9UYo0g6F59pkYKiCo4SfenlMBMGA1UdJQQMMAoGCCsGAQUFBwMCMAsGA1Ud<br>DwQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEAlwh6FbxGRR5dup87rgFUnjIbyXhY<br>Wd2bmwX9ll90OZtVp6LlDKkbzYVqbEdN4C2pQALEI8xwNM9r8h0zxc+uCFYO0W7K<br>rJAgUvP5S6kC8btRKLc+TXlszJKXR9Eo6Ftrks8QwbmfaejDIHrnYQtbWKYDyJtP<br>JH40UDXbQ2DFTiEPLgYGKXMz6/Noai42ZiplhmjfLJJZ1jTr2jNbWoBMcxqY2lNW<br>6srrVFUzA9wPgK3kx7Aaelbo9wN2XapHHPJyNVnaMAKptIPBG3H2xLZ81LdxdZf7<br>RxMx+ylENLJWO6Ex6qP7ukbFCctos9L7StFVYw4jh4YHV60oJb7lQq5xIQ==<br>-----END CERTIFICATE-----<br></code></pre></td></tr></table></figure><h3 id="6-3-8-将CA和服务器证书相关文件复制到服务器相应的目录"><a href="#6-3-8-将CA和服务器证书相关文件复制到服务器相应的目录" class="headerlink" title="6.3.8 将CA和服务器证书相关文件复制到服务器相应的目录"></a>6.3.8 将CA和服务器证书相关文件复制到服务器相应的目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@openvpn-server ~]# mkdir /etc/openvpn/certs<br>[root@openvpn-server ~]# cp /etc/openvpn/easy-rsa-server/3/pki/ca.crt  /etc/openvpn/certs/<br>[root@openvpn-server ~]# cp /etc/openvpn/easy-rsa-server/3/pki/issued/server.crt  /etc/openvpn/certs/<br>[root@openvpn-server ~]# cp /etc/openvpn/easy-rsa-server/3/pki/private/server.key  /etc/openvpn/certs/<br>[root@openvpn-server ~]# cp /etc/openvpn/easy-rsa-server/3/pki/dh.pem  /etc/openvpn/certs/<br>[root@openvpn-server ~]# ll /etc/openvpn/certs/<br>total 20<br>-rw------- 1 root root 1204 Sep  4 19:48 ca.crt<br>-rw------- 1 root root  424 Sep  4 19:49 dh.pem<br>-rw------- 1 root root 4608 Sep  4 19:49 server.crt<br>-rw------- 1 root root 1704 Sep  4 19:49 server.key<br><br></code></pre></td></tr></table></figure><p>6.3.9 将客户端私钥和证书相关文件复制到服务器相应的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@openvpn-server ~]# find /etc/openvpn/ -name &quot;xiaohexie.key&quot; -o -name &quot;xiaohexie.crt&quot; -o -name ca.crt<br>/etc/openvpn/easy-rsa-server/3.0.8/pki/issued/xiaohexie.crt<br>/etc/openvpn/easy-rsa-server/3.0.8/pki/ca.crt<br>/etc/openvpn/easy-rsa-client/3.0.8/pki/private/xiaohexie.key<br>/etc/openvpn/certs/ca.crt<br><br><br>[root@openvpn-server ~]# find /etc/openvpn/ \( -name &quot;xiaohexie.key&quot; -o -name &quot;xiaohexie.crt&quot; -o -name ca.crt \) -exec cp &#123;&#125; /etc/openvpn/client/xiaohexie \;<br>[root@openvpn-server ~]# ll /etc/openvpn/client/xiaohexie/<br>total 16<br>-rw------- 1 root root 1204 Sep  4 19:54 ca.crt<br>-rw------- 1 root root 4499 Sep  4 19:54 xiaohexie.crt<br>-rw------- 1 root root 1704 Sep  4 19:54 xiaohexie.key<br><br></code></pre></td></tr></table></figure><h2 id="6-4-准备OpenVPN服务器配置文件"><a href="#6-4-准备OpenVPN服务器配置文件" class="headerlink" title="6.4 准备OpenVPN服务器配置文件"></a>6.4 准备OpenVPN服务器配置文件</h2><h3 id="6-4-1-OpenVPN服务器配置文件说明"><a href="#6-4-1-OpenVPN服务器配置文件说明" class="headerlink" title="6.4 .1 OpenVPN服务器配置文件说明"></a>6.4 .1 OpenVPN服务器配置文件说明</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">服务器配置文件server.conf文件中以<span class="hljs-comment">#或；开头的行都为注释</span></span><br>[root@openvpn-server ~]# grep -Ev &quot;^#|^$&quot; /etc/openvpn/server.conf <br>;local a.b.c.d#本机监听IP，默认为本机所有IP<br>port 1194#端口<br>;proto tcp#推荐使用生产TCP<br>proto udp#默认为UDP<br>;dev tap#创建以太网隧道设备，tap设备实现以太网帧通过openvpn隧道，可提供非IP协议如IPX和AppleTalk等的支持，tap等当于一个以太网设备，它操作第二层数据包如以太网数据帧。<br>dev tun#创建IP路由隧道，生产推存使用tun.互联网使用tun，一个tun设备大多时候被用于基于IP协议的通讯。tun模拟了网络层设备，操作第三层数据包比如IP数据封包。<br>;dev-node MyTap#TAP-Win32的设备驱动。非windows系统不需要<br>ca ca.crt#ca证书文件<br>cert server.crt#服务器证书文件<br>key server.key  #服务器私钥文件<br>dh dh2048.pem#dh参数文件<br>;topology subnet<br>server 10.8.0.0 255.255.255.0#客户端连接后自动分配的IP网段，默认会给服务器分配此网段的第一个IP将做为客户端的网关，注意不要和内网网段相同<br>ifconfig-pool-persist ipp.txt#记录客户端和虚拟ip地址分配的文件；<br>;server-bridge 10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100#配置网桥模式,无需配置,建议注释<br>;server-bridge<br>;push &quot;route 192.168.10.0 255.255.255.0&quot;#推送给客户端的到达服务器后面网段的静态路由，网关是服务器地址10.8.0.1<br>;push &quot;route 192.168.20.0 255.255.255.0&quot;#推送路由信息到客户端，以允许客户端能够连接到服务器背后的其它私有网络<br>;client-config-dir ccd#为特定客户端添加路由信息，此路由是客户端后面的网段而非服务端的网段，无需设置<br>;route 192.168.40.128 255.255.255.248<br>;client-config-dir ccd<br>;route 10.9.0.0 255.255.255.252<br>;learn-address ./script#指定外部脚本文件，实现创建不同组的iptables规则，无需配置<br>;push &quot;redirect-gateway def1 bypass-dhcp&quot;#启用此配置后客户端所有流量都将通过VpN服务器进行转发，因此生产一般无需配置此项<br>;push &quot;dhcp-option DNS 208.67.222.222&quot;#推送DNS服务器地址，无需配置<br>;push &quot;dhcp-option DNS 208.67.220.220&quot;<br>;client-to-client#允许不同的客户端直接通信，不安全，生产环境一般无需配置#多个用户共用一个证书，一般用于测试环境，生产环境建议一个用户一个证<br>;duplicate-cn#多个用户共用一个证书，一般用于测试环境，生产环境建议一个用户一个证书，无需开启<br>keepalive 10 120#设置服务端活动的检测的间隔和超时时间，每隔10秒ping一次，120秒没有回应则认为已经断线<br>tls-auth ta.key 0 #访止DoS等攻击的安全增强配置，服务器和每个客户端都需要拥有此密钥文件。第二个参数在服务器端为0，客户端为1<br>cipher AES-256-CBC#加密算法<br>;compress lz4-v2#启用openvpn2.4.x新版压缩算法<br>;push &quot;compress lz4-v2&quot;#推送客户端使用新版压缩算法，和下面的comp-lzo不要同时使用<br>;comp-lzo#旧户端兼容的压缩配置，需要客户端配置开启压缩，openvpn2.4.x等新版可以不用开启<br>;max-clients 100#最多支持的客户端数量<br>;user nobody#指定openvpn服务的用户<br>;group nobody#指定openvpn服务的组<br>persist-key#重启服务时默认会重新读取key文件，开启此配置后保持使用第一次的key文件，生产环境无需开启<br>persist-tun#Don&#x27;t close and reopen TUN/TAP device or run up/downscripts across SIGuSR1 or--ping-restart restarts,生产环境建议无需开启<br>status openvpn-status.log#服务器状态记录文件，每分钟记录一次相关信息<br>;log         openvpn.log#第一种日志记录方式，并指定日志路径，log会在openvpn启动的时候清空日志文件，不建议使用<br>;log-append  openvpn.log#第二种日志记录方式，并指定日志路径，重启openvpn后在之前的日志后面追加新的日志，生产环境建议使用<br>verb 3#设置日志级别，0-9，级别越高记录的内容越详细，0表示静默运行，只记录致命错误，4表示合理的常规用法，5和6可以帮助调试连接错误。9表示极度冗余，输出非常详细的日志信息<br>;mute 20#对相同类别的信息只记录前20条到日志文件中;<br>explicit-exit-notify 1#当服务端重启后通知客户端自动重新连接服务器，此项配置仅能用于udp模式，tcp模式无需配置即能实现重新连接功能，且开启此项后tcp配置后将导致openvpn服务无法启动，所以tcp时必须不能开启此项<br><br></code></pre></td></tr></table></figure><h3 id="6-4-2-修改服务器端配置文件"><a href="#6-4-2-修改服务器端配置文件" class="headerlink" title="6.4.2 修改服务器端配置文件"></a>6.4.2 修改服务器端配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@openvpn-server ~]# vim /etc/openvpn/server.conf <br>[root@openvpn-server ~]# grep &#x27;^[a-Z].*&#x27; /etc/openvpn/server.conf <br>port 1194<br>proto tcp<br>dev tun<br>ca /etc/openvpn/certs/ca.crt<br>cert /etc/openvpn/certs/server.crt<br>key /etc/openvpn/certs/server.key  # This file should be kept secret<br>dh /etc/openvpn/certs/dh.pem<br>server 10.8.0.0 255.255.255.0  #VPN分配的虚拟地址段<br>push &quot;route 172.30.0.0 255.255.255.0&quot;<br>keepalive 10 120<br>cipher AES-256-CBC<br>compress lz4-v2<br>push &quot;compress lz4-v2&quot;<br>max-clients 2048<br>user openvpn<br>group openvpn<br>status /var/log/openvpn/openvpn-status.log<br>log-append  /var/log/openvpn/openvpn.log<br>verb 3<br>mute 20<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">准备日志相关目录</span><br>[root@openvpn-server ~]# getent passwd openvpn<br>openvpn:x:990:986:OpenVPN:/etc/openvpn:/sbin/nologin<br>[root@openvpn-server ~]# mkdir /var/log/openvpn<br>[root@openvpn-server ~]# chown openvpn.openvpn  /var/log/openvpn<br>[root@openvpn-server ~]# ll -d /var/log/openvpn/<br>drwxr-xr-x 2 openvpn openvpn 6 Sep  4 20:47 /var/log/openvpn/<br></code></pre></td></tr></table></figure><h2 id="2-5-启动Openvpn服务"><a href="#2-5-启动Openvpn服务" class="headerlink" title="2.5 启动Openvpn服务"></a>2.5 启动Openvpn服务</h2><h3 id="2-5-1启动Openvpn服务"><a href="#2-5-1启动Openvpn服务" class="headerlink" title="2.5.1启动Openvpn服务"></a>2.5.1启动Openvpn服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#centos8缺失unit文件从centos7复制文件/usr/lib/systemd/system/openvpn@.service</span></span><br><br>[root@localhost ~]#rpm -ql openvpn | grep systemd<br>/usr/lib/systemd/system/openvpn-client@.service<br>/usr/lib/systemd/system/openvpn-server@.service<br>/usr/lib/systemd/system/openvpn@.service<br>/usr/share/doc/openvpn-2.4.12/README.systemd<br>[root@localhost ~]# vim /usr/lib/systemd/system/openvpn@.service<br><br>[Unit]<br>Description=OpenVPN Robust And Highly Flexible Tunneling Application On %I<br>After=network.target<br><br>[Service]<br>Type=notify<br>PrivateTmp=true<br>ExecStart=/usr/sbin/openvpn --cd /etc/openvpn/ --config %i.conf<br><br>[Install]<br>WantedBy=multi-user.target<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动openvpn服务，注意service名称和文件名不一致</span><br>[root@openvpn-server ~]# systemctl daemon-reload<br>[root@openvpn-server ~]# systemctl enable --now openvpn@server<br>[root@openvpn-server ~]# systemctl status openvpn@server<br><br></code></pre></td></tr></table></figure><h3 id="6-5-2-查看服务状态"><a href="#6-5-2-查看服务状态" class="headerlink" title="6.5.2 查看服务状态"></a>6.5.2 查看服务状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@openvpn-server ~]# systemctl status openvpn@server<br>● openvpn@server.service - OpenVPN Robust And Highly Flexible Tunneling Application On server<br>   Loaded: loaded (/usr/lib/systemd/system/openvpn@.service; enabled; vendor preset: disabled)<br>   Active: active (running) since Mon 2023-09-04 20:58:44 CST; 7s ago<br> Main PID: 28604 (openvpn)<br>   Status: &quot;Initialization Sequence Completed&quot;<br>    Tasks: 1 (limit: 22976)<br>   Memory: 1.2M<br>   CGroup: /system.slice/system-openvpn.slice/openvpn@server.service<br>           └─28604 /usr/sbin/openvpn --cd /etc/openvpn/ --config server.conf<br><br>Sep 04 20:58:44 openvpn-server systemd[1]: Starting OpenVPN Robust And Highly Flexible Tunneling Application On server...<br>Sep 04 20:58:44 openvpn-server systemd[1]: Started OpenVPN Robust And Highly Flexible Tunneling Application On server.<br>root@openvpn-server ~]# ss -nltp<br>State      Recv-Q     Send-Q           Local Address:Port           Peer Address:Port     Process                                 <br>LISTEN     0          32                     0.0.0.0:1194                0.0.0.0:*         users:((&quot;openvpn&quot;,pid=28604,fd=8))     <br>LISTEN     0          128                    0.0.0.0:22                  0.0.0.0:*  <br><br><br>[root@openvpn-server ~]# cat /var/log/openvpn/openvpn<br>cat: /var/log/openvpn/openvpn: No such file or directory<br>[root@openvpn-server ~]# cat /var/log/openvpn/openvpn.log <br>Mon Sep  4 20:58:44 2023 OpenVPN 2.4.12 x86_64-redhat-linux-gnu [SSL (OpenSSL)] [LZO] [LZ4] [EPOLL] [PKCS11] [MH/PKTINFO] [AEAD] built on Mar 17 2022<br>Mon Sep  4 20:58:44 2023 library versions: OpenSSL 1.1.1k  FIPS 25 Mar 2021, LZO 2.08<br>Mon Sep  4 20:58:44 2023 WARNING: you are using user/group/chroot/setcon without persist-tun -- this may cause restarts to fail<br>Mon Sep  4 20:58:44 2023 WARNING: you are using user/group/chroot/setcon without persist-key -- this may cause restarts to fail<br>Mon Sep  4 20:58:44 2023 Diffie-Hellman initialized with 2048 bit key<br>Mon Sep  4 20:58:44 2023 ROUTE_GATEWAY 172.30.0.253/255.255.255.0 IFACE=eth0 HWADDR=00:16:3e:10:1c:c0<br>Mon Sep  4 20:58:44 2023 TUN/TAP device tun0 opened<br>Mon Sep  4 20:58:44 2023 TUN/TAP TX queue length set to 100<br>Mon Sep  4 20:58:44 2023 /sbin/ip link set dev tun0 up mtu 1500<br>Mon Sep  4 20:58:44 2023 /sbin/ip addr add dev tun0 local 10.8.0.1 peer 10.8.0.2<br>Mon Sep  4 20:58:44 2023 /sbin/ip route add 10.8.0.0/24 via 10.8.0.2<br>Mon Sep  4 20:58:44 2023 Could not determine IPv4/IPv6 protocol. Using AF_INET<br>Mon Sep  4 20:58:44 2023 Socket Buffers: R=[87380-&gt;87380] S=[16384-&gt;16384]<br>Mon Sep  4 20:58:44 2023 Listening for incoming TCP connection on [AF_INET][undef]:1194<br>Mon Sep  4 20:58:44 2023 TCPv4_SERVER link local (bound): [AF_INET][undef]:1194<br>Mon Sep  4 20:58:44 2023 TCPv4_SERVER link remote: [AF_UNSPEC]<br>Mon Sep  4 20:58:44 2023 GID set to openvpn<br>Mon Sep  4 20:58:44 2023 UID set to openvpn<br>Mon Sep  4 20:58:44 2023 MULTI: multi_init called, r=256 v=256<br>Mon Sep  4 20:58:44 2023 IFCONFIG POOL: base=10.8.0.4 size=62, ipv6=0<br>Mon Sep  4 20:58:44 2023 MULTI: TCP INIT maxclients=2048 maxevents=2052<br>Mon Sep  4 20:58:44 2023 Initialization Sequence Completed<br><br><br>[root@openvpn-server ~]# ip a<br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000<br>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>    inet 127.0.0.1/8 scope host lo<br>       valid_lft forever preferred_lft forever<br>    inet6 ::1/128 scope host <br>       valid_lft forever preferred_lft forever<br>2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000<br>    link/ether 00:16:3e:10:1c:c0 brd ff:ff:ff:ff:ff:ff<br>    inet 172.30.0.228/24 brd 172.30.0.255 scope global dynamic noprefixroute eth0<br>       valid_lft 315342050sec preferred_lft 315342050sec<br>    inet6 fe80::216:3eff:fe10:1cc0/64 scope link <br>       valid_lft forever preferred_lft forever<br>3: tun0: &lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UNKNOWN group default qlen 100<br>    link/none <br>    inet 10.8.0.1 peer 10.8.0.2/32 scope global tun0<br>       valid_lft forever preferred_lft forever<br>    inet6 fe80::721f:1358:937e:8c14/64 scope link stable-privacy <br>       valid_lft forever preferred_lft forever<br><br>[root@openvpn-server ~]# route -n<br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>0.0.0.0         172.30.0.253    0.0.0.0         UG    100    0        0 eth0<br>10.8.0.0        10.8.0.2        255.255.255.0   UG    0      0        0 tun0<br>10.8.0.2        0.0.0.0         255.255.255.255 UH    0      0        0 tun0<br>172.30.0.0      0.0.0.0         255.255.255.0   U     100    0        0 eth0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">验证tun网卡设备：</span><br>[root@openvpn-server ~]# ifconfig tun0<br>tun0: flags=4305&lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt;  mtu 1500<br>        inet 10.8.0.1  netmask 255.255.255.255  destination 10.8.0.2<br>        inet6 fe80::721f:1358:937e:8c14  prefixlen 64  scopeid 0x20&lt;link&gt;<br>        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 100  (UNSPEC)<br>        RX packets 0  bytes 0 (0.0 B)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 7  bytes 336 (336.0 B)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><br></code></pre></td></tr></table></figure><h2 id="6-6-准备OpenVPN客户端配置文件"><a href="#6-6-准备OpenVPN客户端配置文件" class="headerlink" title="6.6 准备OpenVPN客户端配置文件"></a>6.6 准备OpenVPN客户端配置文件</h2><h3 id="6-6-1-客户端默认范例配置文件说明"><a href="#6-6-1-客户端默认范例配置文件说明" class="headerlink" title="6.6.1 客户端默认范例配置文件说明"></a>6.6.1 客户端默认范例配置文件说明</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@openvpn-server ~]# grep &#x27;^[[:alpha:]].*&#x27; /usr/share/doc/openvpn/sample/sample-config-files/client.conf <br>client#指明客户端<br>dev tun#指定和服务端一致的接口类型<br>proto udp#指定和服务端一致的协议类型<br>remote my-server-1 1194#服务器端的ip或FQDN及端口<br>resolv-retry infinite#指定服务器端FQDN而非IP时，当客户端重新连接后会重新解FQDN对应的IP<br>nobind#客户端不绑定监听端口，随机打开端口连接到服务端的端口<br>persist-key<br>persist-tun<br>ca ca.crt<br>cert client.crt<br>key client.key<br>remote-cert-tls server#使用服务器证书校验方式<br>tls-auth ta.key 1#安全加强<br>cipher AES-256-CBC<br>verb 3<br><br></code></pre></td></tr></table></figure><h3 id="6-6-2-生成客户端用户的配置文件"><a href="#6-6-2-生成客户端用户的配置文件" class="headerlink" title="6.6.2 生成客户端用户的配置文件"></a>6.6.2 生成客户端用户的配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">生成客户端用户的配置文件，文件后缀必须为.ovpn</span><br>[root@openvpn-server ~]# grep &#x27;^[[:alpha:]].*&#x27; /usr/share/doc/openvpn/sample/sample-config-files/client.conf &gt; /etc/openvpn/client/xiaohexie/client.ovpn<br>[root@openvpn-server ~]# vim /etc/openvpn/client/xiaohexie/client.ovpn <br>[root@openvpn-server ~]# cat  /etc/openvpn/client/xiaohexie/client.ovpn <br>client<br>dev tun<br>proto tcp<br>remote 47.92.6.54 1194#生产中为OpenVPN公网IP或者FQDN<br>resolv-retry infinite<br>nobind<br><span class="hljs-meta prompt_">#</span><span class="language-bash">persist-key</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">persist-tun</span><br>ca ca.crt<br>cert xiaohexie.crt<br>key xiaohexie.key<br>remote-cert-tls server<br><span class="hljs-meta prompt_">#</span><span class="language-bash">tls-auth ta.key 1</span><br>cipher AES-256-CBC<br>verb 3<br>compress lz4-v2#压缩模式，需要与服务端保持一致，默认使用comp-lz压缩<br><br><br></code></pre></td></tr></table></figure><h2 id="6-7-实现OpenVPN客户端"><a href="#6-7-实现OpenVPN客户端" class="headerlink" title="6.7 实现OpenVPN客户端"></a>6.7 实现OpenVPN客户端</h2><h3 id="6-7-1-Windows配置部署OpenVPN客户端"><a href="#6-7-1-Windows配置部署OpenVPN客户端" class="headerlink" title="6.7.1 Windows配置部署OpenVPN客户端"></a>6.7.1 Windows配置部署OpenVPN客户端</h3><h3 id="6-7-1-1Windows安装OpenVPN客户端"><a href="#6-7-1-1Windows安装OpenVPN客户端" class="headerlink" title="6.7.1.1Windows安装OpenVPN客户端"></a>6.7.1.1Windows安装OpenVPN客户端</h3><p>官方客户端下载地址：</p><p><a href="https://openvpn.net/community-downloads/">https://openvpn.net/community-downloads/</a></p><p><img src="image-20230904212604430.png" alt="image-20230904212604430"></p><p><img src="image-20230904212455979.png" alt="image-20230904212455979"></p><h4 id="6-7-1-2-Windows客户端配置准备"><a href="#6-7-1-2-Windows客户端配置准备" class="headerlink" title="6.7.1.2 Windows客户端配置准备"></a>6.7.1.2 Windows客户端配置准备</h4><p>保持证书到openvpn客户端安装目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在服务器打包证书并下载发送给Windows客户端</span><br>[root@openvpn-server ~]# cd /etc/openvpn/client/xiaohexie/<br>[root@openvpn-server xiaohexie]# ls<br>ca.crt  client.ovpn  xiaohexie.crt  xiaohexie.key<br>[root@openvpn-server xiaohexie]# tar cf xiaohexie.tar ./<br>tar: ./xiaohexie.tar: file is the archive; not dumped<br>[root@openvpn-server xiaohexie]# ls<br>ca.crt  client.ovpn  xiaohexie.crt  xiaohexie.key  xiaohexie.tar<br></code></pre></td></tr></table></figure><p>放到Windows客户端默认安装目录下C:\Program Files\OpenVPN\config目录</p><p><img src="image-20230904221013868.png" alt="image-20230904221013868"></p><h4 id="6-7-1-3-Windows客户端运行openVPN客户端进行连接"><a href="#6-7-1-3-Windows客户端运行openVPN客户端进行连接" class="headerlink" title="6.7.1.3 Windows客户端运行openVPN客户端进行连接"></a>6.7.1.3 Windows客户端运行openVPN客户端进行连接</h4><p><img src="image-20230904221143994.png" alt="image-20230904221143994"></p><h4 id="6-7-1-4Windows客户端验证通信"><a href="#6-7-1-4Windows客户端验证通信" class="headerlink" title="6.7.1.4Windows客户端验证通信"></a>6.7.1.4Windows客户端验证通信</h4><h5 id="6-7-1-4-1Windows客户端测试访问OpenVPN服务器"><a href="#6-7-1-4-1Windows客户端测试访问OpenVPN服务器" class="headerlink" title="6.7.1.4.1Windows客户端测试访问OpenVPN服务器"></a>6.7.1.4.1Windows客户端测试访问OpenVPN服务器</h5><p>Windows服务器到到OpenVPN服务器的连接：</p><p><img src="image-20230904221315766.png" alt="image-20230904221315766"></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@openvpn</span>-server xiaohexie]<span class="hljs-meta"># echo net.ipv4.ip_forword = 1 &gt;&gt; /etc/sysctl.conf </span><br>[root<span class="hljs-symbol">@openvpn</span>-server xiaohexie]<span class="hljs-meta"># sysctl -p</span><br></code></pre></td></tr></table></figure><h5 id="6-7-1-4-2-观察OpenVPN服务器日志"><a href="#6-7-1-4-2-观察OpenVPN服务器日志" class="headerlink" title="6.7.1.4.2 观察OpenVPN服务器日志"></a>6.7.1.4.2 观察OpenVPN服务器日志</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@openvpn-server xiaohexie]# tail -f /var/log/openvpn/openvpn.log <br>Mon Sep  4 21:29:00 2023 182.150.134.136:21440 Control Channel: TLSv1.3, cipher TLSv1.3 TLS_AES_256_GCM_SHA384, 2048 bit RSA<br>Mon Sep  4 21:29:00 2023 182.150.134.136:21440 [xiaohexie] Peer Connection Initiated with [AF_INET]182.150.134.136:21440<br>Mon Sep  4 21:29:00 2023 xiaohexie/182.150.134.136:21440 MULTI_sva: pool returned IPv4=10.8.0.6, IPv6=(Not enabled)<br>Mon Sep  4 21:29:00 2023 xiaohexie/182.150.134.136:21440 MULTI: Learn: 10.8.0.6 -&gt; xiaohexie/182.150.134.136:21440<br>Mon Sep  4 21:29:00 2023 xiaohexie/182.150.134.136:21440 MULTI: primary virtual IP for xiaohexie/182.150.134.136:21440: 10.8.0.6<br>Mon Sep  4 21:29:01 2023 xiaohexie/182.150.134.136:21440 PUSH: Received control message: &#x27;PUSH_REQUEST&#x27;<br>Mon Sep  4 21:29:01 2023 xiaohexie/182.150.134.136:21440 SENT CONTROL [xiaohexie]: &#x27;PUSH_REPLY,route 172.30.0.0 255.255.255.0,compress lz4-v2,route 10.8.0.1,topology net30,ping 10,ping-restart 120,ifconfig 10.8.0.6 10.8.0.5,peer-id 0,cipher AES-256-GCM&#x27; (status=1)<br>Mon Sep  4 21:29:01 2023 xiaohexie/182.150.134.136:21440 Data Channel: using negotiated cipher &#x27;AES-256-GCM&#x27;<br>Mon Sep  4 21:29:01 2023 xiaohexie/182.150.134.136:21440 Outgoing Data Channel: Cipher &#x27;AES-256-GCM&#x27; initialized with 256 bit key<br>Mon Sep  4 21:29:01 2023 xiaohexie/182.150.134.136:21440 Incoming Data Channel: Cipher &#x27;AES-256-GCM&#x27; initialized with 256 bit key<br><br><br>[root@openvpn-server xiaohexie]# cat /var/log/openvpn/openvpn-status.log <br>OpenVPN CLIENT LIST<br>Updated,Mon Sep  4 22:19:40 2023<br>Common Name,Real Address,Bytes Received,Bytes Sent,Connected Since<br>xiaohexie,182.150.134.136:21440,117932,57841,Mon Sep  4 21:28:58 2023<br>ROUTING TABLE<br>Virtual Address,Common Name,Real Address,Last Ref<br>10.8.0.6,xiaohexie,182.150.134.136:21440,Mon Sep  4 22:16:49 2023<br>GLOBAL STATS<br>Max bcast/mcast queue length,1<br>END<br><br></code></pre></td></tr></table></figure><h5 id="6-7-1-4-3-验证OpenVPN服务器连接状态"><a href="#6-7-1-4-3-验证OpenVPN服务器连接状态" class="headerlink" title="6.7.1.4.3 验证OpenVPN服务器连接状态"></a>6.7.1.4.3 验证OpenVPN服务器连接状态</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@openvpn-server xiaohexie]# ss -nt<br>State        Recv-Q        Send-Q                 Local Address:Port                     Peer Address:Port         Process        <br>ESTAB        0             0                       172.30.0.228:1194                  182.150.134.136:21440                       <br>ESTAB        0             0                       172.30.0.228:22                    182.150.134.136:21378                       <br>ESTAB        0             52                      172.30.0.228:22                    182.150.134.136:21312                       <br>ESTAB        0             0                       172.30.0.228:22                    182.150.134.136:22848                       <br>ESTAB        0             0                       172.30.0.228:36690                    172.30.0.230:22                          <br>ESTAB        0             0                       172.30.0.228:55192                    172.30.0.229:22                          <br>ESTAB        0             0                       172.30.0.228:45160                   100.100.30.25:80    <br></code></pre></td></tr></table></figure><h5 id="6-7-1-4-4-验证Windows客户端的IP状态"><a href="#6-7-1-4-4-验证Windows客户端的IP状态" class="headerlink" title="6.7.1.4.4 验证Windows客户端的IP状态"></a>6.7.1.4.4 验证Windows客户端的IP状态</h5><p><img src="image-20230904222355073.png" alt="image-20230904222355073"></p><h5 id="6-7-1-4-5验证Windows客户端的路由表"><a href="#6-7-1-4-5验证Windows客户端的路由表" class="headerlink" title="6.7.1.4.5验证Windows客户端的路由表"></a>6.7.1.4.5验证Windows客户端的路由表</h5><p><img src="image-20230904222532863.png" alt="image-20230904222532863"></p><h2 id="6-8-实现访问VPN服务器内网主机"><a href="#6-8-实现访问VPN服务器内网主机" class="headerlink" title="6.8 实现访问VPN服务器内网主机"></a>6.8 实现访问VPN服务器内网主机</h2><h3 id="6-8-1-OpenVPN服务器打开ip-forward功能"><a href="#6-8-1-OpenVPN服务器打开ip-forward功能" class="headerlink" title="6.8.1 OpenVPN服务器打开ip_forward功能"></a>6.8.1 OpenVPN服务器打开ip_forward功能</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在服务器开启ip_forward转发功能</span><br>[root@openvpn-server xiaohexie]# echo net.ipv4.ip_forward=1 &gt;&gt; /etc/sysctl.conf<br>[root@openvpn-server xiaohexie]# /etc/sysctl.conf<br>-bash: /etc/sysctl.conf: Permission denied<br>[root@openvpn-server xiaohexie]# sysctl -p<br>vm.swappiness = 0<br>kernel.sysrq = 1<br>net.ipv4.neigh.default.gc_stale_time = 120<br>net.ipv4.conf.all.rp_filter = 0<br>net.ipv4.conf.default.rp_filter = 0<br>net.ipv4.conf.default.arp_announce = 2<br>net.ipv4.conf.lo.arp_announce = 2<br>net.ipv4.conf.all.arp_announce = 2<br>net.ipv4.tcp_max_tw_buckets = 5000<br>net.ipv4.tcp_syncookies = 1<br>net.ipv4.tcp_max_syn_backlog = 1024<br>net.ipv4.tcp_synack_retries = 2<br>net.ipv4.tcp_slow_start_after_idle = 0<br>net.ipv4.ip_forward = 1<br><br></code></pre></td></tr></table></figure><h3 id="6-8-2-配置实现内网服务器回应外网的请求的路由"><a href="#6-8-2-配置实现内网服务器回应外网的请求的路由" class="headerlink" title="6.8.2 配置实现内网服务器回应外网的请求的路由"></a>6.8.2 配置实现内网服务器回应外网的请求的路由</h3><h4 id="6-8-2-1-在每个主机上添加路由"><a href="#6-8-2-1-在每个主机上添加路由" class="headerlink" title="6.8.2.1 在每个主机上添加路由"></a>6.8.2.1 在每个主机上添加路由</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">阿里云服务器不支持修改路由</span><br>[root@web-server ~]# route add -net 10.8.0.0/24 gw 172.30.0.228<br></code></pre></td></tr></table></figure><h4 id="6-8-2-2-在OpenVPN服务器上配置IPtables规则"><a href="#6-8-2-2-在OpenVPN服务器上配置IPtables规则" class="headerlink" title="6.8.2.2 在OpenVPN服务器上配置IPtables规则"></a>6.8.2.2 在OpenVPN服务器上配置IPtables规则</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">添加SNAT规则</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash">[root@openvpn-server xiaohexie]<span class="hljs-comment"># iptables -t nat -A POSTROUTING -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j SNAT --to 172.30.0.228</span></span><br><br>[root@openvpn-server xiaohexie]# iptables -vnL -t nat<br>Chain PREROUTING (policy ACCEPT 0 packets, 0 bytes)<br> pkts bytes target     prot opt in     out     source               destination         <br><br>Chain INPUT (policy ACCEPT 0 packets, 0 bytes)<br> pkts bytes target     prot opt in     out     source               destination         <br><br>Chain POSTROUTING (policy ACCEPT 0 packets, 0 bytes)<br> pkts bytes target     prot opt in     out     source               destination         <br>    0     0 SNAT       all  --  *      *       10.8.0.0/24         !10.8.0.0/24          to:172.30.0.228<br><br>Chain OUTPUT (policy ACCEPT 0 packets, 0 bytes)<br> pkts bytes target     prot opt in     out     source               destination       <br></code></pre></td></tr></table></figure><h4 id="6-8-2-3-测试-VPN访问内网主机"><a href="#6-8-2-3-测试-VPN访问内网主机" class="headerlink" title="6.8.2.3 测试 VPN访问内网主机"></a>6.8.2.3 测试 VPN访问内网主机</h4><p><img src="image-20230904223446322.png" alt="image-20230904223446322"></p><p><img src="image-20230904223734992.png" alt="image-20230904223734992"></p><h1 id="7-mysql如何实现崩溃后恢复？"><a href="#7-mysql如何实现崩溃后恢复？" class="headerlink" title="7.mysql如何实现崩溃后恢复？"></a>7.mysql如何实现崩溃后恢复？</h1><p>1、如果有从节点，可以将从节点提升为主节点</p><p>2、可以通过备份数据和二进制日志在新建的数据库上恢复</p><h1 id="8-myisam和innodb各自在什么场景使用？"><a href="#8-myisam和innodb各自在什么场景使用？" class="headerlink" title="8.myisam和innodb各自在什么场景使用？"></a>8.myisam和innodb各自在什么场景使用？</h1><h2 id="8-1-myisam存储引擎"><a href="#8-1-myisam存储引擎" class="headerlink" title="8.1 myisam存储引擎"></a>8.1 myisam存储引擎</h2><p><strong>myisam存储引擎特点：</strong></p><ul><li>不支持事务</li><li>表级锁定</li><li>读写相互阻塞，写入时不能读，读时不能写</li><li>只缓存索引</li><li>不支持外键约束</li><li>不支持聚簇索引</li><li>读取数据较快，占用资源较少</li><li>不支持MVCC（多版本并发控制机制）高并发</li><li>崩溃恢复性较差</li><li>MySQL5.5.5前默认的数据库引擎</li></ul><p><strong>myisam存储引擎适用场景：</strong></p><ul><li>只读（或者写较少）</li><li>表较小（可以接受长时间进行修复操作）</li></ul><h2 id="8-2-innodb存储引擎"><a href="#8-2-innodb存储引擎" class="headerlink" title="8.2 innodb存储引擎"></a>8.2 innodb存储引擎</h2><p><strong>innodb存储引擎特点：</strong></p><ul><li>行级锁</li><li>支持事务，适合处理大量短期事务</li><li>读写阻塞与事务隔离级别相关</li><li>可缓存数据和索引</li><li>支持聚簇索引</li><li>崩溃恢复性更好</li><li>支持MVCC高并发</li><li>从MySQL5.5后支持全文索引</li><li>从MySQL5.5开始为默认的数据库引擎</li></ul><p><strong>innodb存储引擎适用场景：</strong></p><ul><li><p>高并发性</p></li><li><p>有事务处理需求</p></li><li><p>对数据完整性和可靠性要求较高</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>14.域名系统dns解析服务</title>
    <link href="/2023/08/23/14-%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9Fdns%E8%A7%A3%E6%9E%90%E6%9C%8D%E5%8A%A1/"/>
    <url>/2023/08/23/14-%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9Fdns%E8%A7%A3%E6%9E%90%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p><strong>域名系统DNS服务</strong></p><h1 id="1-名字解析介绍和DNS"><a href="#1-名字解析介绍和DNS" class="headerlink" title="1.名字解析介绍和DNS"></a>1.名字解析介绍和DNS</h1><p>当前TCP/IP网络中的设备之间进行通信，是利用和依赖于IP地址实现的，但IP地址是很难记忆的。当网络设备众多，想要记住每个设备对应的IP，可以说是“不可能完成的任务”。那么如何解决这个问题？我们可以给每个网络设备起一个友好的名称，如：<a href="http://www.baidu.com，这种由文字组成的名称，显而易见要更容易记忆。但是计算机不认识这种名称，我们可以利用一种名字解析服务将名称转化成IP地址。从而我们就可以利用名称来直接访问网络中设备了。除此之外还有一个重要功能，利用名称解析服务可以实现主机和IP的解耦（解除绑定），即：当主机IP变化时，只需要修改名称服务即可，用户仍然可以通过原有的名称进行访问而不受影响。">www.baidu.com，这种由文字组成的名称，显而易见要更容易记忆。但是计算机不认识这种名称，我们可以利用一种名字解析服务将名称转化成IP地址。从而我们就可以利用名称来直接访问网络中设备了。除此之外还有一个重要功能，利用名称解析服务可以实现主机和IP的解耦（解除绑定），即：当主机IP变化时，只需要修改名称服务即可，用户仍然可以通过原有的名称进行访问而不受影响。</a></p><p>如下面所述：</p><p>本地名称解析配置文件：hosts</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">Linux：/etc/hosts<br>Windwos：%WINDIR%/system32/drivers/etc/hosts<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">格式</span><br><br>112.114.112.3      www.baidu.com.     www  <br>93.46.8.89         www.google.com     google<br><br></code></pre></td></tr></table></figure><p>​    DNS：Domain Name System 域名系统应用层协议，是互联网的一项服务。他作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网，基于C/S架构，服务端：53/udp，53/tcp</p><p>BIND：Bekerly Internet Name Domain，由ISC （<a href="http://www.isc.org)提供的dns软件实现dns域名结构/">www.isc.org）提供的DNS软件实现DNS域名结构</a></p><p><img src="image-20230810202706342-1692783730239.png" alt="image-20230810202706342"></p><ul><li><p>根域：全球根服务器节点只有13个，10在美国，1个在荷兰，一个瑞典，一个日本</p></li><li><p>一级域名：Top Level Domain：tld</p><p>三类：组织域、国家域（.cn, .ca, gk, .tw）、反向域</p><p>com，edu，mil，gov，net，org，int，arpa</p></li><li><p>二级域名：magedu.com</p></li><li><p>三级域名：study.magedu.com</p></li><li><p>最多可达到127级域名</p></li></ul><h2 id="1-2-DNS服务工作原理"><a href="#1-2-DNS服务工作原理" class="headerlink" title="1.2 DNS服务工作原理"></a>1.2 DNS服务工作原理</h2><p><img src="image-20230810203252024-1692783730239.png" alt="image-20230810203252024"></p><h2 id="1-3-DNS查询类型"><a href="#1-3-DNS查询类型" class="headerlink" title="1.3 DNS查询类型"></a>1.3 DNS查询类型</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">https://help.aliyun.com/document_detail/102237.html<br></code></pre></td></tr></table></figure><p><img src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/2984663361/p336439.png" alt="img"></p><ul><li><p>递归查询：</p><p>是指DNS服务器在收到用户发起的请求时，必须向用户返回一个准确的查询结果。如果DNS服务器本地没有存储与之对应的信息，则该服务器需要询问其他服务器，并将返回的查询结果提交给用户。</p><p>一般来说，由客户机发起的和本地DNS服务器之间属于递归查询，即当客户机向DNS服务器发出请求后，若DNS服务器本身不能解析，则会向其他的DNS服务器发出查询请求，得到最终的肯定或否定的结果后转交给客户机。此查询的源和目标保持不变，为了查询结果客户机只需要发起一次查询。</p><p>递归算法：客户端向LocalDNS发起域名查询–&gt;localDNS不知道对应域名的IP–&gt;但他知道谁知道–&gt;他代为帮客户端去询问其他DNS服务器–&gt;最后返回最终结果</p></li><li><p>迭代查询：</p><p>是指DNS服务器在收到用户发起的请求时，并不直接回复查询结果，而是返回给用户另一台DNS服务器的地址，用户再向这台DNS服务器提交请求，这样依次反复，直到返回查询结果。</p><p>一般情况下，本地的DNS服务器向其他DNS服务器的查询属于迭代查询，如：若对方不能放回权威的结果，则会向下一个DNS服务器（参考前一个DNS服务器返回的结果）再次发起进行查询，直到返回查询的结果为止。此查询的源不变，但查询的目标不断变化，为了查询到结果一般需要发起多次查询</p><p>迭代算法：客户端向LocalDNS发起域名查询–&gt;localDNS不知道对应域名的IP–&gt;但他知道谁知道并推荐客户端应该找谁–&gt;客户端自己去找它</p></li><li><p>DNS缓存</p><p>DNS缓存是将解析数据存储在靠近发起请求的客户端的位置，也可以说DNS数据是可以缓存在任意位置，最终目的是以此减少递归查询过程，可以更快的让用户获得请求结果。</p></li></ul><h2 id="1-4-名称服务器"><a href="#1-4-名称服务器" class="headerlink" title="1.4 名称服务器"></a>1.4 名称服务器</h2><p>Name Server，域内负责解析本域内的名称的DNS服务器</p><h2 id="1-5-解析类型"><a href="#1-5-解析类型" class="headerlink" title="1.5 解析类型"></a>1.5 解析类型</h2><ul><li><p>FQDN–&gt;IP 正向解析</p></li><li><p>IP–&gt;FQDN 反向解析</p><p>注意：正反向解析是两个不同的名称空间，是两棵不同的解析树</p></li></ul><h2 id="1-6-完整的查询请求经过的流程"><a href="#1-6-完整的查询请求经过的流程" class="headerlink" title="1.6 完整的查询请求经过的流程"></a>1.6 完整的查询请求经过的流程</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">client --&gt;hosts文件--&gt; client DNS service local cache --&gt; DNS server (recursion递归) --&gt; DNS Server cache --&gt;DNS iteration(迭代) --&gt; 根 --&gt;顶级域名DNS --&gt; 二级域名DNS<br></code></pre></td></tr></table></figure><h1 id="2-DNS服务相关概念和技术"><a href="#2-DNS服务相关概念和技术" class="headerlink" title="2 DNS服务相关概念和技术"></a>2 DNS服务相关概念和技术</h1><h2 id="2-1-DNS服务器的类型"><a href="#2-1-DNS服务器的类型" class="headerlink" title="2.1 DNS服务器的类型"></a>2.1 DNS服务器的类型</h2><ul><li>主DNS服务器</li><li>从DNS服务器</li><li>缓存DNS服务器</li></ul><h3 id="2-1-1-主DNS服务器"><a href="#2-1-1-主DNS服务器" class="headerlink" title="2.1.1 主DNS服务器"></a>2.1.1 主DNS服务器</h3><p>管理和维护所负责解析的域内解析库的服务器</p><h3 id="2-1-2-从DNS服务器"><a href="#2-1-2-从DNS服务器" class="headerlink" title="2.1.2 从DNS服务器"></a>2.1.2 从DNS服务器</h3><p>从主服务器或从服务器“复制” （区域传输）解析库副本</p><ul><li>序列号：解析库版本号，主服务器解析库变化时，其序列号递增</li><li>刷新时间间隔：从服务器从主服务器请求同步解析的时间间隔</li><li>重试时间间隔：从服务器请求同步失败时，再次尝试时间间隔</li><li>过期时长：从服务器练习不到主服务器时，多久后停止服务</li><li>通知机制：主服务器解析库发生变化时，会主动通知从服务器</li></ul><h2 id="2-2-区域传输"><a href="#2-2-区域传输" class="headerlink" title="2.2 区域传输"></a>2.2 区域传输</h2><ul><li>完全传输：传送整个解析库</li><li>增量传输：传递解析库变化的那部分内容</li></ul><h2 id="2-3-解析形式"><a href="#2-3-解析形式" class="headerlink" title="2.3 解析形式"></a>2.3 解析形式</h2><ul><li><p>FQDN–&gt;IP 正向解析</p></li><li><p>IP–&gt;FQDN 反向解析</p><p>注意：正反向解析是两个不同的名称空间，是两棵不同的解析树</p></li></ul><h2 id="2-4-负责本地域名的正向和反向解析库"><a href="#2-4-负责本地域名的正向和反向解析库" class="headerlink" title="2.4 负责本地域名的正向和反向解析库"></a>2.4 负责本地域名的正向和反向解析库</h2><ul><li>正向区域</li><li>反向区域</li></ul><h2 id="2-5-解析答案"><a href="#2-5-解析答案" class="headerlink" title="2.5 解析答案"></a>2.5 解析答案</h2><ul><li>肯定答案：存在对应的查询结果</li><li>否定答案：请求的条目不存在等原因导致无法返回结果</li><li>权威答案：直接由存有此查询结果的DNS服务器（权威 服务器）返回的答案</li><li>非权威答案：由其他非权威服务器返回的查询答案</li></ul><h2 id="2-6-各种资源记录"><a href="#2-6-各种资源记录" class="headerlink" title="2.6 各种资源记录"></a>2.6 各种资源记录</h2><p>区域解析库：由众多资源记录RP（resource record）组成</p><p>记录类型：A ，AAAA, PTR, SOA, NS, CNAME,MX</p><ul><li>SOA：Start of authority，起始授权记录；一个区域解析库有且仅能有一个SOA记录，必须位于解析库的第一条记录</li><li>A：IPv4地址，作用FQDN –&gt;IP</li><li>AAAA：FQDN –&gt;IPv6</li><li>PTR：poinTeR ，IP –&gt;FQDN</li><li>NS:  Name Server，专用于标明当前区域的DNS服务器</li><li>CNAME：Canonical Name，别名记录</li><li>MX，mail exchanger，邮件交换服务器</li><li>TXT：对域名进行标识和说明的一种方式，一般做验证记录时会使用此项，如：SPF（反垃圾邮件）记录，https验证等</li></ul><h3 id="2-6-1-资源记录定义"><a href="#2-6-1-资源记录定义" class="headerlink" title="2.6.1 资源记录定义"></a>2.6.1 资源记录定义</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">name    [TTL]    IN   rr_type   value<br></code></pre></td></tr></table></figure><p>注意：</p><ol><li>TTL可以全局继承，写在首行即可</li><li>使用”@“符号可用于引用当前区域的域名</li><li>同一个名字可以通过多条记录定义多个不同的值；此时DNS服务器会以轮询方式响应</li><li>同一个值也可能有多个不同的定义名字；通过多个不同的名字指向同一个值进行定义；此仅表示通过多个不同的名字可以找到同一个主机</li></ol><p>面试题：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http">1. 我的网站域名需要更改，如何使其更快的生效？<br>答：修改之后在主DNS服务器上主动推送给从服务器进行更新，并清除DNS服务器缓存<br>.<br>2. 更改TTL值为多少比较合适呢？ 是如何生效的？<br></code></pre></td></tr></table></figure><h3 id="2-6-2-SOA记录"><a href="#2-6-2-SOA记录" class="headerlink" title="2.6.2 SOA记录"></a>2.6.2 SOA记录</h3><p>name: 当前区域的名字，例如”magedu.org“</p><p>value：由多部分组成</p><p>注意：</p><ol><li>当前区域的主DNS服务器和FQDN，也可以使用当前区域的名字，只是注释功能，可以不需要配置对应的NS记录和A记录</li><li>当前区域管理员的邮箱地址；但地址中不能使用@符号，一般可以用.替换，例如：admin.magedu.org</li><li>主从服务区域传输相关定义以及否定的答案的统一TTL</li></ol><p>范例：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs http">magedu.org.    86400    IN    SOA    ns.magedu.org.  nsadmin.magedu.org.    (<br>20230810 ;序列号<br>10M;刷新时间<br>10M;重试时间<br>1W;过期时间<br>1D;否定答案的TTL值<br>）<br></code></pre></td></tr></table></figure><h3 id="2-6-3-NS记录"><a href="#2-6-3-NS记录" class="headerlink" title="2.6.3 NS记录"></a>2.6.3 NS记录</h3><p>name：当前区域的名字</p><p>value：当前区域的某个DNS服务器的名字，例如：ns.magedu.org.</p><p>注意：</p><ol><li>相邻的两个资源记录的name相同时，后续的可省略</li><li>对NS记录而言，任何一个ns记录后面的服务器名字，都应该在后续有一个A记录</li><li>一个区域可以有多个NS记录</li></ol><p>范例：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">magedu.org    IN   NS     ns1.magedu.org.<br>magedu.org    IN   NS     ns2.magedu.org.<br></code></pre></td></tr></table></figure><h3 id="2-6-4-MX记录"><a href="#2-6-4-MX记录" class="headerlink" title="2.6.4 MX记录"></a>2.6.4 MX记录</h3><p>name：当前区域的名字</p><p>value：当前区域的某邮件服务器（smtp）的主机名</p><p>注意：</p><ol><li>一个区域内，MX记录可以有多个；但每个记录的value之前应该有一个数字（0-99），表示此服务器的优先级；数字越小优先级越高</li><li>对MX记录而言，任何一个MX记录后面的服务器名字，都应该在后续有一个A记录</li></ol><p>范例：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTTP">magedu.org.   IN    MX    10   mx1.magedu.org.<br>  IN    MX    20   mx1.magedu.org.<br>mx1A10.0.0.100<br>mx2A       10.0.0.200<br></code></pre></td></tr></table></figure><h3 id="2-6-5-A记录"><a href="#2-6-5-A记录" class="headerlink" title="2.6.5  A记录"></a>2.6.5  A记录</h3><p>name:    某主机的FQDN，例如：<a href="http://www.magedu.org/">www.magedu.org</a>.</p><p>value:    主机名对应主机的IP地址</p><p>避免用户写错名称时给错误答案，可以通过泛域名解析至某特定地址</p><p>范例：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs http">www.magedu.org.   IN     A  1.11.1.1<br>www.magedu.org.   IN     A  2.2.2.2<br>mx1.magedu.org.   IN     A  3.3.3.3<br>mx2.magedu.org.   IN      A  4.4.4.4<br>$GENERATE 1-254 HOST$INA  5.5.5.$<br>*.magedu.org.IN A  6.6.6.6<br>magedu.org.INA  7.7.7.7<br><br>#注意：如果有和DNS的IP的相同多个的多个同名的A记录，优先返回DNS的本机IP<br></code></pre></td></tr></table></figure><h3 id="2-6-6-AAAA"><a href="#2-6-6-AAAA" class="headerlink" title="2.6.6  AAAA"></a>2.6.6  AAAA</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">name ：FQDN<br>value ：IPv6<br></code></pre></td></tr></table></figure><h3 id="2-6-7-PTR"><a href="#2-6-7-PTR" class="headerlink" title="2.6.7 PTR"></a>2.6.7 PTR</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">name： IP， 有特定格式，把IP地址反过来写，1.2.3.4，要写4.3.2.1:而有特定后缀：in-addr.arpa.,所以完整写法为：4.3.2.1.in-addr.arpa.<br></code></pre></td></tr></table></figure><p>注意：网络地址及后缀可省略；主机地址依然需要反着写</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">4.3.2.1.in-addr.arpa. IN PTR  www.magedu.org.<br><span class="hljs-meta prompt_">#</span><span class="language-bash">如1.2.3为网络地址，可简写成：</span><br>4INPTRwww.magedu.org.<br></code></pre></td></tr></table></figure><h3 id="2-6-8-CNAME别名记录"><a href="#2-6-8-CNAME别名记录" class="headerlink" title="2.6.8 CNAME别名记录"></a>2.6.8 CNAME别名记录</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">name；别名的FQDN<br>value：真正名字的FQDN<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">www.magedu.org.    IN   CNAME    websrv.magedu.org.<br></code></pre></td></tr></table></figure><h2 id="2-7-子域名授权"><a href="#2-7-子域名授权" class="headerlink" title="2.7 子域名授权"></a>2.7 子域名授权</h2><p>每个域的名称服务器，都是通过其上级名称服务器在解析库进行授权，类似根域授权tld</p><p>glue record：粘合记录，父域授权子域的记录</p><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">.com.     IN      NS     ns1.com.<br>.com.     IN  NS  ns2.com.<br>ns1.com.    IN      NS    1.1.1.1<br>ns2.com.    IN  NS   2.2.2.2<br><span class="hljs-meta prompt_">#</span><span class="language-bash">magedu.org.   在.com的名称服务器上，解析库中添加资源记录</span><br>magedu.org.   IN     NS    ns1.magedu.org.<br>magedu.org.   IN     NS    ns2.magedu.org.<br>magedu.org.   IN     NS    ns3.magedu.org.<br>ns1.magedu.org.   IN     A  2.2.2.2<br>ns2.magedu.org.   IN     A  1.11.1.1<br>ns3.magedu.org.   IN     A  2.2.2.2<br></code></pre></td></tr></table></figure><h2 id="2-8-互联网域名"><a href="#2-8-互联网域名" class="headerlink" title="2.8 互联网域名"></a>2.8 互联网域名</h2><p>注册之后，用自己专用的服务来解析</p><p>管理后台：把NS记录指向的服务器名称，和A记录指向的服务器地址</p><p><img src="image-20230817200609641-1692783730240.png" alt="image-20230817200609641"></p><h2 id="2-9-whois"><a href="#2-9-whois" class="headerlink" title="2.9 whois"></a>2.9 whois</h2><p>范例：whois查询域名信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">[20:08:03 root@localhost ~]#yum -y install whois<br>[20:09:36 root@localhost ~]#whois magedu.com<br>   Domain Name: MAGEDU.COM<br>   Registry Domain ID: 1683438754_DOMAIN_COM-VRSN<br>   Registrar WHOIS Server: grs-whois.hichina.com<br>   Registrar URL: http://www.net.cn<br>   Updated Date: 2022-06-18T03:13:34Z<br>   Creation Date: 2011-10-22T03:22:03Z<br>   Registry Expiry Date: 2023-10-22T03:22:03Z<br>   Registrar: Alibaba Cloud Computing (Beijing) Co., Ltd.<br>   Registrar IANA ID: 420<br>   Registrar Abuse Contact Email: DomainAbuse@service.aliyun.com<br>   Registrar Abuse Contact Phone: +86.95187<br>   Domain Status: ok https://icann.org/epp#ok<br>   Name Server: NS1.ALIDNS.COM<br>   Name Server: NS2.ALIDNS.COM<br>   DNSSEC: unsigned<br><br></code></pre></td></tr></table></figure><p>从网站查询，连接：</p><p><a href="https://www.toolnb.com/domaininfo/wangxiaochun.com.html">https://www.toolnb.com/domaininfo/wangxiaochun.com.html</a></p><p><img src="image-20230817201224924-1692783730240.png" alt="image-20230817201224924"></p><h2 id="2-10-HttpDNS"><a href="#2-10-HttpDNS" class="headerlink" title="2.10 HttpDNS"></a>2.10 HttpDNS</h2><p>略</p><h1 id="3-DNS软件bind"><a href="#3-DNS软件bind" class="headerlink" title="3 DNS软件bind"></a>3 DNS软件bind</h1><p>DNS服务器软件：bind，powerdns，dnsmasq，unbound，coredns</p><h2 id="3-1-BIND"><a href="#3-1-BIND" class="headerlink" title="3.1 BIND"></a>3.1 BIND</h2><p>yum list all bind*</p><ul><li>bind：服务器</li><li>bind-utils：客户端</li><li>bind-libs：相关库，依赖关系自动安装</li><li>bind-chroot：安全包</li></ul><p>范例：安装bind软件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[20:24:45 root@localhost ~]#yum -y install bind bind-utils<br><br></code></pre></td></tr></table></figure><h1 id="4-实现主DNS服务器"><a href="#4-实现主DNS服务器" class="headerlink" title="4 实现主DNS服务器"></a>4 实现主DNS服务器</h1><h2 id="4-1-主DNS服务器配置"><a href="#4-1-主DNS服务器配置" class="headerlink" title="4.1 主DNS服务器配置"></a>4.1 主DNS服务器配置</h2><ol><li><p>在主配置文件中定义区域</p><p><img src="image-20230818212031094-1692783730240.png" alt="image-20230818212031094"></p></li><li><p>定义区域解析库文件</p><p>内容包括：</p><ul><li>宏定义</li><li>资源记录</li></ul><p>范例：区域数据库</p><p><img src="image-20230818212147468-1692783730240.png" alt="image-20230818212147468"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">   <br></code></pre></td></tr></table></figure></li></ol><h2 id="4-2-主配置文件语法检查"><a href="#4-2-主配置文件语法检查" class="headerlink" title="4.2 主配置文件语法检查"></a>4.2 主配置文件语法检查</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">[21:05:35 root@localhost ~]#named-checkconf <br></code></pre></td></tr></table></figure><h2 id="4-3-解析库文件语法检查"><a href="#4-3-解析库文件语法检查" class="headerlink" title="4.3 解析库文件语法检查"></a>4.3 解析库文件语法检查</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">[21:05:44 root@localhost ~]#named-checkzone xiaohexie.org /var/named/xiaohexie.org.zone <br></code></pre></td></tr></table></figure><h2 id="4-4-配置生效"><a href="#4-4-配置生效" class="headerlink" title="4.4 配置生效"></a>4.4 配置生效</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">三种方式</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">rndc reload</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">systemctl reload named</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">service named reload</span><br></code></pre></td></tr></table></figure><h2 id="4-5-DNS测试和管理工具"><a href="#4-5-DNS测试和管理工具" class="headerlink" title="4.5 DNS测试和管理工具"></a>4.5 DNS测试和管理工具</h2><h3 id="4-5-1-dig命令"><a href="#4-5-1-dig命令" class="headerlink" title="4.5.1 dig命令"></a>4.5.1 dig命令</h3><p><img src="image-20230818212613119-1692783730240.png" alt="image-20230818212613119"></p><p><img src="image-20230818212632902-1692783730240.png" alt="image-20230818212632902"></p><h3 id="4-5-2-host命令"><a href="#4-5-2-host命令" class="headerlink" title="4.5.2 host命令"></a>4.5.2 host命令</h3><p><img src="image-20230818212654248-1692783730240.png" alt="image-20230818212654248"></p><h3 id="4-5-3-nslookup命令"><a href="#4-5-3-nslookup命令" class="headerlink" title="4.5.3 nslookup命令"></a>4.5.3 nslookup命令</h3><p><img src="image-20230818212725002-1692783730240.png" alt="image-20230818212725002"></p><h3 id="4-5-3-rndc命令"><a href="#4-5-3-rndc命令" class="headerlink" title="4.5.3 rndc命令"></a>4.5.3 rndc命令</h3><p><img src="image-20230818212824986-1692783730240.png" alt="image-20230818212824986"></p><p><img src="image-20230818212836745-1692783730240.png" alt="image-20230818212836745"></p><h2 id="4-6-实战案例：实现DNS正向主服务器"><a href="#4-6-实战案例：实现DNS正向主服务器" class="headerlink" title="4.6 实战案例：实现DNS正向主服务器"></a>4.6 实战案例：实现DNS正向主服务器</h2><h3 id="4-6-1-实验目的"><a href="#4-6-1-实验目的" class="headerlink" title="4.6.1 实验目的"></a>4.6.1 实验目的</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">搭建DNS正向主服务器，实现web服务器基于FQDN的访问<br></code></pre></td></tr></table></figure><h3 id="4-6-2-环境要求"><a href="#4-6-2-环境要求" class="headerlink" title="4.6.2 环境要求"></a>4.6.2 环境要求</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http">需要三台主机<br>DNS服务器：192.168.157.153<br>web服务器：192.168.157.155<br>DNS客户端：192.168.157.152<br><br></code></pre></td></tr></table></figure><h3 id="4-6-3-前提准备"><a href="#4-6-3-前提准备" class="headerlink" title="4.6.3 前提准备"></a>4.6.3 前提准备</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http">关闭selinux<br>关闭防火墙<br>时间同步<br></code></pre></td></tr></table></figure><h3 id="4-6-4-实现步骤"><a href="#4-6-4-实现步骤" class="headerlink" title="4.6.4 实现步骤"></a>4.6.4 实现步骤</h3><h4 id="4-6-4-1-在DNS服务器上安装bind"><a href="#4-6-4-1-在DNS服务器上安装bind" class="headerlink" title="4.6.4.1 在DNS服务器上安装bind"></a>4.6.4.1 在DNS服务器上安装bind</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[20:18:48 root@localhost ~]#yum -y install bind bind-utils<br></code></pre></td></tr></table></figure><h4 id="4-6-4-1-修改bind配置文件"><a href="#4-6-4-1-修改bind配置文件" class="headerlink" title="4.6.4.1 修改bind配置文件"></a>4.6.4.1 修改bind配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">[21:06:56 root@localhost ~]#vim /etc/named.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">注释掉下面两行</span><br>options &#123;<br>//      listen-on port 53 &#123; 127.0.0.1; &#125;;<br>        listen-on-v6 port 53 &#123; ::1; &#125;;<br>        directory       &quot;/var/named&quot;;<br>        dump-file       &quot;/var/named/data/cache_dump.db&quot;;<br>        statistics-file &quot;/var/named/data/named_stats.txt&quot;;<br>        memstatistics-file &quot;/var/named/data/named_mem_stats.txt&quot;;<br>        secroots-file   &quot;/var/named/data/named.secroots&quot;;<br>        recursing-file  &quot;/var/named/data/named.recursing&quot;;<br>//      allow-query     &#123; localhost; &#125;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">添加以下内容</span><br>zone &quot;xiaohexie.org&quot; IN &#123;<br>        type master;<br>        file &quot;xiaohexie.org.zone&quot;;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h4 id="4-6-4-3-DNS区域数据库文件"><a href="#4-6-4-3-DNS区域数据库文件" class="headerlink" title="4.6.4.3 DNS区域数据库文件"></a>4.6.4.3 DNS区域数据库文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">[20:52:28 root@localhost ~]#cp -p /var/named/named.localhost /var/named/xiaohexie.org.zone<br><br>[20:53:28 root@localhost ~]#vim /var/named/xiaohexie.org.zone <br><span class="hljs-meta prompt_">$</span><span class="language-bash">TTL 1D</span><br>@       IN SOA  master admin.xiaohexie.org. (<br>                                        20230818        ; serial<br>                                        1D      ; refresh<br>                                        1H      ; retry<br>                                        1W      ; expire<br>                                        3H )    ; minimum<br>                NS      master<br>master          A       192.168.157.153<br>www             A       192.168.157.155<br></code></pre></td></tr></table></figure><h4 id="4-6-4-4-检查配置文件和数据库文件格式，并启动服务"><a href="#4-6-4-4-检查配置文件和数据库文件格式，并启动服务" class="headerlink" title="4.6.4.4 检查配置文件和数据库文件格式，并启动服务"></a>4.6.4.4 检查配置文件和数据库文件格式，并启动服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[21:05:35 root@ ~]#named-checkconf <br>[21:05:44 root@ ~]#named-checkzone xiaohexie.org /var/named/xiaohexie.org.zone <br><br><br>systemctl start  named   #第一次启动服务<br>rndc  reload             #不是第一次启动服务<br><br></code></pre></td></tr></table></figure><h4 id="4-6-4-5-实现web服务"><a href="#4-6-4-5-实现web服务" class="headerlink" title="4.6.4.5 实现web服务"></a>4.6.4.5 实现web服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">安装http服务</span><br>yum install -y httpd<br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置主页</span><br>echo xiaohexie.org &gt; /var/www/html/index.html<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动服务</span><br>systemctl enable --now httpd<br></code></pre></td></tr></table></figure><h4 id="4-6-4-6-在客户端实现测试"><a href="#4-6-4-6-在客户端实现测试" class="headerlink" title="4.6.4.6 在客户端实现测试"></a>4.6.4.6 在客户端实现测试</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/sysconfig/network-scripts/ifcfg-ens33 <br>DNS1=192.168.157.153<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">centos7 以上版本执行现下面命令生效</span><br>nmcli con rel<br>nmcli con up ens33<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">有以下记录，即为成功</span><br>cat /etc/resolv.conf <br><span class="hljs-meta prompt_"># </span><span class="language-bash">Generated by NetworkManager</span><br>nameserver 192.168.157.153<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">测试网页，能显示则成功</span><br>curl www.xiaohexie.org<br>xiaohexie.org<br></code></pre></td></tr></table></figure><h1 id="5-实现反向解析区域"><a href="#5-实现反向解析区域" class="headerlink" title="5 实现反向解析区域"></a>5 实现反向解析区域</h1><p>略</p><h1 id="6-实现从服务器"><a href="#6-实现从服务器" class="headerlink" title="6 实现从服务器"></a>6 实现从服务器</h1><p>只有一台主DNS服务器，存在单点失败的问题，可以建立主DNS服务器的备份服务器，即从服务器来实现DNS服务器的容错机制。从服务器可以自动和主服务器进行单向的数据同步，从而和主DNS服务器一样，也可以对外提供查询服务，但从服务器不提供数据更新服务。</p><h2 id="6-1-DNS从服务器"><a href="#6-1-DNS从服务器" class="headerlink" title="6.1 DNS从服务器"></a>6.1 DNS从服务器</h2><ol><li>应该为一台独立的名称服务器</li><li>主服务器的区域解析库文件中必须有一条NS记录指向从服务器</li><li>从服务器只需要定义区域，而无须提供解析库文件；解析库文件应该放置于/var/named/slaves/目录中</li><li>主服务器得允许从服务器作区域传送</li><li>主从服务器时间应该同步，可通过ntp进行</li><li>bind程序得版本应该保持一致；否则，应该从高主低</li></ol><h2 id="6-2-定义从区域"><a href="#6-2-定义从区域" class="headerlink" title="6.2 定义从区域"></a>6.2 定义从区域</h2><p>格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">zone &quot;ZONE_NAME&quot; IN &#123;<br>type slave;<br>masters &#123;master_ip;&#125;;<br>file &quot;slavers/zone_name.zone&quot;;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="6-3-实战案例-：实现DNS从服务器"><a href="#6-3-实战案例-：实现DNS从服务器" class="headerlink" title="6.3 实战案例 ：实现DNS从服务器"></a>6.3 实战案例 ：实现DNS从服务器</h2><h3 id="6-3-1-实验目的"><a href="#6-3-1-实验目的" class="headerlink" title="6.3.1 实验目的"></a>6.3.1 实验目的</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">搭建DNS主从服务器架构实现DNS服务器冗余<br></code></pre></td></tr></table></figure><h3 id="6-3-2-环境要求"><a href="#6-3-2-环境要求" class="headerlink" title="6.3.2 环境要求"></a>6.3.2 环境要求</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http">需要4台主机<br>1、DNS客户端：10.0.0.100<br>2、xiaohexie.org 域主DNS服务器：10.0.0.3<br>3、xiaohexie.org 域从DNS服务器：10.0.0.4<br>4、www.xiaohexie.org   web服务器：10.0.0.5<br></code></pre></td></tr></table></figure><h3 id="6-3-3-提前准备"><a href="#6-3-3-提前准备" class="headerlink" title="6.3.3 提前准备"></a>6.3.3 提前准备</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http">#关闭selinux<br>getenfore<br>#关闭防火墙<br>systemctl disable --now firewalld<br>时间同步<br></code></pre></td></tr></table></figure><h3 id="6-3-4-实现步骤"><a href="#6-3-4-实现步骤" class="headerlink" title="6.3.4 实现步骤"></a>6.3.4 实现步骤</h3><h4 id="6-3-4-1-主DNS服务器配置"><a href="#6-3-4-1-主DNS服务器配置" class="headerlink" title="6.3.4.1 主DNS服务器配置"></a>6.3.4.1 主DNS服务器配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在域主DNS服务器：10.0.0.3上</span><br>yum -y install bind<br><br>vim /etc/named.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">注释掉下面两行</span><br>options &#123;<br>//      listen-on port 53 &#123; 127.0.0.1; &#125;;<br>//      allow-query     &#123; localhost; &#125;;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">只允许这台主机进行区域传输</span><br>allow-transfer &#123; 192.168.157.166;&#125;;<br><br>vim /etc/named.rfc1912.zones<br><span class="hljs-meta prompt_">#</span><span class="language-bash">添加以下内容</span><br>zone &quot;xiaohexie.org&quot; &#123;<br>        type master;<br>        file &quot;xiaohexie.org.zone&quot;;<br>&#125;;<br><br><br>cp -p /var/named/named.localhost /var/named/xiaohexie.org.zone<br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果没有-p，需要改权限<span class="hljs-built_in">chgrp</span> named /var/named/xiaohexie.org.zone</span> <br><br>vim /var/named/xiaohexie.org.zone<br><span class="hljs-meta prompt_">$</span><span class="language-bash">TTL 1D</span><br>@       IN SOA  master admin.xiaohexie.org. (<br>                                        20230818        ; serial<br>                                        1D      ; refresh<br>                                        1H      ; retry<br>                                        1W      ; expire<br>                                        3H )    ; minimum<br>                NS      master<br>                NS      slave<br>master          A       192.168.157.153<br>slave           A       192.168.157.146<br>www             A       192.168.157.155<br><br><br>named-checkconf <br>named-checkzone xiaohexie.org /var/named/xiaohexie.org.zone <br><br><br>systemctl start  named   #第一次启动服务<br>rndc  reload             #不是第一次启动服务<br></code></pre></td></tr></table></figure><h4 id="6-3-4-2-实现从DNS服务端配置"><a href="#6-3-4-2-实现从DNS服务端配置" class="headerlink" title="6.3.4.2 实现从DNS服务端配置"></a>6.3.4.2 实现从DNS服务端配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在域主DNS服务器：10.0.0.4上</span><br>yum -y install bind<br><br>vim /etc/named.conf<br>//  listen-on port 53 &#123; 127.0.0.1; &#125;;<br>//  allow-query     &#123; localhost; &#125;;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">不允许其他主机进行区域传输</span><br>    allow-transfer &#123; none;&#125;;<br><br><br>vim /etc/named.rfc1912.zones<br>zone &quot;xiaohexie.org&quot; &#123;<br>    type slave;<br>    masters &#123; 192.168.157.153;&#125;;<br>    file &quot;slaves/xiaohexie.org.slave&quot;;<br>&#125;;<br><br>systemctl start  named   #第一次启动服务<br>rndc  reload             #不是第一次启动服务<br>ls /var/named/slaves/xiaohexie.org.slave 查看区域数据库文件是否生成<br></code></pre></td></tr></table></figure><h4 id="6-3-4-3-客户端测试主从服务器架构"><a href="#6-3-4-3-客户端测试主从服务器架构" class="headerlink" title="6.3.4.3 客户端测试主从服务器架构"></a>6.3.4.3 客户端测试主从服务器架构</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/sysconfig/network-scripts/ifcfg-ens33<br>DNS1=10.0.0.3<br>DNS2=10.0.0.4<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">验证从DNS服务器是否可以查询</span><br>dig www.xiaohexie.org<br><br>;; ADDITIONAL SECTION:<br>master.xiaohexie.org.86400INA10.0.0.3<br>slave.xiaohexie.org.86400INA10.0.0.4<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在主DNS服务器停止DNS服务</span><br>systemctl stop named<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#验证从DNS服务器仍然可以查询</span></span><br>dig www.xiaohexie.org<br><br>;; Query time: 0 msec<br>;; SERVER: 10.0.0.4#53(10.0.0.4)<br>;; WHEN: Wed Aug 23 23:57:48 CST 2023<br>;; MSG SIZE  rcvd: 151<br><br></code></pre></td></tr></table></figure><h1 id="7-实现子域名"><a href="#7-实现子域名" class="headerlink" title="7 实现子域名"></a>7 实现子域名</h1><h2 id="7-1-子域委派授权"><a href="#7-1-子域委派授权" class="headerlink" title="7.1 子域委派授权"></a>7.1 子域委派授权</h2><p>将子域委派给其他主机管理，实现分布式DNS数据库</p><p>正向解析区域子域方法</p><p>范例：定义两个子域区域</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs http">shanghai.xiaohexie.org.INNSns1.ops.xiaohexie.org<br>shanghai.xiaohexie.org.INNSns2.ops.xiaohexie.org<br>sz.xiaohexie.org.INNSns1.sz.xiaohexie.org<br>bj.xiaohexie.org.INNSns1.bj.xiaohexie.org<br>ns1.ops.xiaohexie.orgIN  NS  1.1.1.1<br>ns2.ops.xiaohexie.orgINNS1.1.1.2<br>ns1.sz.xiaohexie.orgIN NS1.1.1.3<br>ns1.bj.xiaohexie.orgINNS1.1.1.4<br></code></pre></td></tr></table></figure><h2 id="7-2-范例：实现DNS父域和子域服务"><a href="#7-2-范例：实现DNS父域和子域服务" class="headerlink" title="7.2 范例：实现DNS父域和子域服务"></a>7.2 范例：实现DNS父域和子域服务</h2><h3 id="7-2-1-实验目的"><a href="#7-2-1-实验目的" class="headerlink" title="7.2.1 实验目的"></a>7.2.1 实验目的</h3><p><img src="image-20230823160658348.png" alt="image-20230823160658348"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">搭建DNS父域和子域服务<br></code></pre></td></tr></table></figure><h3 id="7-2-2-环境要求"><a href="#7-2-2-环境要求" class="headerlink" title="7.2.2 环境要求"></a>7.2.2 环境要求</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs http">需要5台主机<br>1、DNS父域服务器：10.0.0.3<br>2、DNS子域服务器：10.0.0.4<br>3、父域web服务器：10.0.0.5www.xiaohexie.org<br>4、子域web服务器：10.0.0.15www.shanghai.xiaohexie.org<br>5、DNS客户端：10.0.0.100<br></code></pre></td></tr></table></figure><h3 id="7-2-3-前提准备"><a href="#7-2-3-前提准备" class="headerlink" title="7.2.3 前提准备"></a>7.2.3 前提准备</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http">关闭selinux<br>关闭防火墙<br>时间同步<br></code></pre></td></tr></table></figure><h3 id="7-2-4-实现步骤"><a href="#7-2-4-实现步骤" class="headerlink" title="7.2.4 实现步骤"></a>7.2.4 实现步骤</h3><h4 id="7-2-4-1-在DNS父域服务器上实现xiaohexie-org域的主DNS服务"><a href="#7-2-4-1-在DNS父域服务器上实现xiaohexie-org域的主DNS服务" class="headerlink" title="7.2.4.1 在DNS父域服务器上实现xiaohexie.org域的主DNS服务"></a>7.2.4.1 在DNS父域服务器上实现xiaohexie.org域的主DNS服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在域主DNS服务器：10.0.0.3上</span><br>yum -y install bind<br><br>vim /etc/named.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">注释掉下面两行</span><br>options &#123;<br>//      listen-on port 53 &#123; 127.0.0.1; &#125;;<br>//      allow-query     &#123; localhost; &#125;;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">只允许这台主机进行区域传输</span><br>allow-transfer &#123; 10.0.0.4;&#125;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">建议关闭加密验证</span><br>dnssec-enable no;<br>dnssec-validation no;<br><br><br>vim /etc/named.rfc1912.zones<br><span class="hljs-meta prompt_">#</span><span class="language-bash">添加以下内容</span><br>zone &quot;xiaohexie.org&quot; &#123;<br>        type master;<br>        file &quot;xiaohexie.org.zone&quot;;<br>&#125;;<br><br><br>cp -p /var/named/named.localhost /var/named/xiaohexie.org.zone<br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果没有-p，需要改权限<span class="hljs-built_in">chgrp</span> named /var/named/xiaohexie.org.zone</span> <br><br>vim /var/named/xiaohexie.org.zone<br><span class="hljs-meta prompt_">$</span><span class="language-bash">TTL 1D</span><br>@       IN SOA  master admin.xiaohexie.org. (<br>                                        20230818        ; serial<br>                                        1D      ; refresh<br>                                        1H      ; retry<br>                                        1W      ; expire<br>                                        3H )    ; minimum<br>                NS      master<br>shanghai        NS      shanghains<br>master          A       10.0.0.3<br>shanghains      A       10.0.0.4<br>www             A       10.0.0.5<br>www             A       3.3.3.3<br><br><br><br><br>named-checkconf <br>named-checkzone xiaohexie.org /var/named/xiaohexie.org.zone <br><br><br>systemctl start  named   #第一次启动服务<br>rndc  reload             #不是第一次启动服务<br></code></pre></td></tr></table></figure><h4 id="7-2-3-2-实现子域的DNS服务器"><a href="#7-2-3-2-实现子域的DNS服务器" class="headerlink" title="7.2.3.2 实现子域的DNS服务器"></a>7.2.3.2 实现子域的DNS服务器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在域主DNS服务器：10.0.0.4上</span><br>yum -y install bind<br><br>vim /etc/named.conf<br>//  listen-on port 53 &#123; 127.0.0.1; &#125;;<br>//  allow-query     &#123; localhost; &#125;;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">不允许其他主机进行区域传输</span><br>    allow-transfer &#123; none;&#125;;<br><br><br>vim /etc/named.rfc1912.zones<br>zone &quot;shanghai.xiaohexie.org&quot; &#123;<br>        type master;<br>        file &quot;shanghai.xiaohexie.org.zone&quot;;<br>&#125;;<br><br><br>cp /var/named/named.localhost  /var/named/shanghai.xiaohexie.org.zone<br><br>vim /var/named/shanghai.xiaohexie.org.zone<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">TTL 1D</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">TTL 1D</span><br>@       IN SOA  shanghains admin.xiaohexie.org. (<br>                                        2023    ; serial<br>                                        1D      ; refresh<br>                                        1H      ; retry<br>                                        1W      ; expire<br>                                        3H )    ; minimum<br>        NS      shanghains<br>shanghainsA       10.0.0.4<br>www     A       10.0.0.6<br>www     A       4.4.4.4<br><br><br>systemctl start  named   #第一次启动服务<br>rndc  reload             #不是第一次启动服务<br></code></pre></td></tr></table></figure><h4 id="7-2-3-4-在父域和子域的web服务器上安装httpd服务"><a href="#7-2-3-4-在父域和子域的web服务器上安装httpd服务" class="headerlink" title="7.2.3.4 在父域和子域的web服务器上安装httpd服务"></a>7.2.3.4 在父域和子域的web服务器上安装httpd服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">安装http服务</span><br>yum install -y httpd<br>systemctl start httpd<br></code></pre></td></tr></table></figure><h4 id="7-2-3-5-客户端测试"><a href="#7-2-3-5-客户端测试" class="headerlink" title="7.2.3.5 客户端测试"></a>7.2.3.5 客户端测试</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">客户端DNS指向父域服务器10.0.0.3</span><br><br>[root@localhost ~]# dig www.shanghai.xiaohexie.org<br><br>; &lt;&lt;&gt;&gt; DiG 9.11.4-P2-RedHat-9.11.4-26.P2.el7_9.14 &lt;&lt;&gt;&gt; www.shanghai.xiaohexie.org<br>;; global options: +cmd<br>;; Got answer:<br>;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 6066<br>;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 1, ADDITIONAL: 2<br><br>;; OPT PSEUDOSECTION:<br>; EDNS: version: 0, flags:; udp: 1232<br>;; QUESTION SECTION:<br>;www.shanghai.xiaohexie.org.INA<br><br>;; ANSWER SECTION:<br>www.shanghai.xiaohexie.org. 86400 INA10.0.0.6<br>www.shanghai.xiaohexie.org. 86400 INA4.4.4.4<br><br>;; AUTHORITY SECTION:<br>shanghai.xiaohexie.org.86400INNSshanghains.xiaohexie.org.<br><br>;; ADDITIONAL SECTION:<br>shanghains.xiaohexie.org. 86400INA10.0.0.4<br><br>;; Query time: 2 msec<br>;; SERVER: 10.0.0.3#53(10.0.0.3)<br>;; WHEN: Thu Aug 24 01:34:40 CST 2023<br>;; MSG SIZE  rcvd: 128<br><br></code></pre></td></tr></table></figure><h1 id="8-实现DNS转发（缓存）服务器"><a href="#8-实现DNS转发（缓存）服务器" class="headerlink" title="8 实现DNS转发（缓存）服务器"></a>8 实现DNS转发（缓存）服务器</h1><p>略</p><h1 id="9-实现智能DNS"><a href="#9-实现智能DNS" class="headerlink" title="9 实现智能DNS"></a>9 实现智能DNS</h1><h2 id="9-4-实战案例：利用view实现智能DNS"><a href="#9-4-实战案例：利用view实现智能DNS" class="headerlink" title="9.4 实战案例：利用view实现智能DNS"></a>9.4 实战案例：利用view实现智能DNS</h2><h2 id="9-4-1-环境要求"><a href="#9-4-1-环境要求" class="headerlink" title="9.4.1 环境要求"></a>9.4.1 环境要求</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">需要5台主机<br>DNS主服务器：10.0.0.4, 192.168.0.1<br>web服务器1： 10.0.0.129<br>web服务器2： 192.168.0.2<br>DNS客户端1：192.168.0.100<br>DNS客户端2：10.0.0.200<br></code></pre></td></tr></table></figure><h2 id="9-4-2-准备"><a href="#9-4-2-准备" class="headerlink" title="9.4.2  准备"></a>9.4.2  准备</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">关闭selinux<br>关闭防火墙<br>时间同步<br></code></pre></td></tr></table></figure><h2 id="9-4-3-实现步骤"><a href="#9-4-3-实现步骤" class="headerlink" title="9.4.3 实现步骤"></a>9.4.3 实现步骤</h2><h3 id="9-4-3-1-DNS服务器网卡配置"><a href="#9-4-3-1-DNS服务器网卡配置" class="headerlink" title="9.4.3.1 DNS服务器网卡配置"></a>9.4.3.1 DNS服务器网卡配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#配置两个网卡</span></span><br>eth0：10.0.0.4<br>eth1：192.168.0.1<br>ip a<br>2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000<br>    link/ether 00:0c:29:2c:30:b9 brd ff:ff:ff:ff:ff:ff<br>    altname enp3s0<br>    altname ens160<br>    inet 10.0.0.4/24 brd 10.0.0.255 scope global dynamic noprefixroute eth0<br>       valid_lft 1525sec preferred_lft 1525sec<br>    inet6 fe80::9397:ffd3:db85:7b3a/64 scope link noprefixroute<br>       valid_lft forever preferred_lft forever<br>3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000<br>    link/ether 00:0c:29:2c:30:c3 brd ff:ff:ff:ff:ff:ff<br>    altname enp19s0<br>    altname ens224<br>    inet 192.168.0.1/24 brd 192.168.0.255 scope global dynamic noprefixroute eth1<br>       valid_lft 1488sec preferred_lft 1488sec<br>    inet6 fe80::c2ca:61a7:1c9b:f2b6/64 scope link noprefixroute<br>       valid_lft forever preferred_lft forever<br><br></code></pre></td></tr></table></figure><h3 id="9-4-3-2-主DNS服务端配置文件实现view"><a href="#9-4-3-2-主DNS服务端配置文件实现view" class="headerlink" title="9.4.3.2 主DNS服务端配置文件实现view"></a>9.4.3.2 主DNS服务端配置文件实现view</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">1、安装<span class="hljs-built_in">bind</span></span><br>yum -y install bind<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2、修改文件</span><br>vim /etc/named.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#使用//注释掉下面几行：</span></span><br>//      listen-on port 53 &#123; 127.0.0.1; &#125;;<br>//      allow-query     &#123; localhost; &#125;;<br>//zone &quot;.&quot; IN &#123;<br>//      type hint;<br>//      file &quot;named.ca&quot;;<br>//&#125;;<br>//include &quot;/etc/named.rfc1912.zones&quot;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">3、添加ACL</span><br>vim /etc/named.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#在文件最前面添加下面几行</span></span><br>acl beijingnet &#123;<br>        10.0.0.0/24;<br>&#125;;<br><br>acl shanghainet &#123;<br>        192.168.0.0/24;<br>&#125;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">4、创建view</span><br>vim /etc/named.conf<br><br>view    beijingview &#123;<br>        match-clients &#123; beijingnet;&#125;;<br>        include &quot;/etc/named.rfc1912.zones.bj&quot;;<br>&#125;;<br>view    shanghaiview &#123;<br>        match-clients &#123; shanghainet;&#125;;<br>        include &quot;/etc/named.rfc1912.zones.sh&quot;;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h3 id="9-4-3-3-实现区域配置文件"><a href="#9-4-3-3-实现区域配置文件" class="headerlink" title="9.4.3.3 实现区域配置文件"></a>9.4.3.3 实现区域配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/named.rfc1912.zones.bj<br>zone &quot;.&quot; IN &#123;<br>        type hint;<br>        file &quot;named.ca&quot;;<br>&#125;;<br><br>zone &quot;xiaohexie.org&quot; &#123;<br>        type master;<br>        file &quot;xiaohexie.org.zone.bj&quot;;<br>&#125;;<br><br><br><br><br>vim /etc/named.rfc1912.zones.sh<br>zone &quot;.&quot; IN &#123;<br>        type hint;<br>        file &quot;named.ca&quot;;<br>&#125;;<br><br>zone &quot;xiaohexie.org&quot; &#123;<br>        type master;<br>        file &quot;xiaohexie.org.zone.sh&quot;;<br>&#125;;<br><br><br>chgrp named /etc/named.rfc1912.zones.*<br></code></pre></td></tr></table></figure><h3 id="9-4-3-4-创建区域数据库文件"><a href="#9-4-3-4-创建区域数据库文件" class="headerlink" title="9.4.3.4 创建区域数据库文件"></a>9.4.3.4 创建区域数据库文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /var/named/xiaohexie.org.zone.bj<br><span class="hljs-meta prompt_">$</span><span class="language-bash">TTL 1D</span><br>@       IN SOA  master admin.xiaohexie.org. (<br>                                        20230818        ; serial<br>                                        1D      ; refresh<br>                                        1H      ; retry<br>                                        1W      ; expire<br>                                        3H )    ; minimum<br>                NS      master<br>master          A       10.0.0.4<br>wwwA10.0.0.129<br>www             A       1.1.1.1<br><br><br>vim /var/named/xiaohexie.org.zone.sh<br><span class="hljs-meta prompt_">$</span><span class="language-bash">TTL 1D</span><br>@       IN SOA  master admin.xiaohexie.org. (<br>                                        20230818        ; serial<br>                                        1D      ; refresh<br>                                        1H      ; retry<br>                                        1W      ; expire<br>                                        3H )    ; minimum<br>                NS      master<br>master          A       10.0.0.4<br>wwwA192.168.0.2<br>www             A       2.2.2.2<br><br><br>chgrp named /var/named/xiaohexie.org.zone.*<br><br>systemctl start named    #第一次启动服务<br>rndc reload#不是第一此启动服务<br></code></pre></td></tr></table></figure><h3 id="9-4-3-5-实现位于不同区域的两个web服务器"><a href="#9-4-3-5-实现位于不同区域的两个web服务器" class="headerlink" title="9.4.3.5 实现位于不同区域的两个web服务器"></a>9.4.3.5 实现位于不同区域的两个web服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#分别在两台不同的主机上安装http服务</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在web服务器1： 10.0.0.129实现</span><br>yum install httpd <br>echo xiaohexie.shanghai 10.0.0.129 &gt; /var/www/html/index.html<br>systemctl start httpd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在web服务器2： 192.168.0.2实现</span><br>yum install httpd <br>echo welcome xiaohexie 192.168.0.2 &gt; /var/www/html/index.html<br>systemctl start httpd<br></code></pre></td></tr></table></figure><h3 id="9-4-3-6-客户端测试"><a href="#9-4-3-6-客户端测试" class="headerlink" title="9.4.3.6 客户端测试"></a>9.4.3.6 客户端测试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#分别在两台主机上访问</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">DNS客户端1：192.168.0.100实现，DNS指向192.168.0.1</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">DNS客户端2：10.0.0.200实现，DNS指向10.0.0.4</span><br></code></pre></td></tr></table></figure><p>#DNS客户端1：192.168.0.100验证结果：</p><p><img src="image-20230822010407262-1692783730240.png" alt="image-20230822010407262"></p><p>#DNS客户端2：10.0.0.200主机上验证结果：</p><p><img src="image-20230822010450054-1692783730240.png" alt="image-20230822010450054"></p><h1 id="10-DNS排错"><a href="#10-DNS排错" class="headerlink" title="10 DNS排错"></a>10 DNS排错</h1><p><img src="image-20230823171703595.png" alt="image-20230823171703595"></p><h1 id="11-实战案例：综合案例实现Internet的DNS服务架构"><a href="#11-实战案例：综合案例实现Internet的DNS服务架构" class="headerlink" title="11 实战案例：综合案例实现Internet的DNS服务架构"></a>11 实战案例：综合案例实现Internet的DNS服务架构</h1><h2 id="11-1-实验目的"><a href="#11-1-实验目的" class="headerlink" title="11.1 实验目的"></a>11.1 实验目的</h2><p><img src="image-20230818215004688-1692783730240.png" alt="image-20230818215004688"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">搭建DNS实现internet dns架构<br></code></pre></td></tr></table></figure><h2 id="11-2-环境要求"><a href="#11-2-环境要求" class="headerlink" title="11.2 环境要求"></a>11.2 环境要求</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs http">需要8台主机<br>1、DNS客户端：10.0.0.100<br>2、本地DNS服务器（只缓存）：10.0.0.7<br>3、转发目标DNS服务器：10.0.0.6<br>4、根DNS服务器：10.0.0.129<br>5、org域DNS服务器：10.0.0.128<br>6、xiaohexie.org 域主DNS服务器：10.0.0.3<br>7、xiaohexie.org 域从DNS服务器：10.0.0.4<br>8、www.xiaohexie.org   web服务器：10.0.0.5<br><br></code></pre></td></tr></table></figure><h2 id="11-3-前提准备"><a href="#11-3-前提准备" class="headerlink" title="11.3 前提准备"></a>11.3 前提准备</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http">#关闭selinux<br>getenfore<br>#关闭防火墙<br>systemctl disable --now firewalld<br>时间同步<br></code></pre></td></tr></table></figure><h2 id="11-4-实现步骤"><a href="#11-4-实现步骤" class="headerlink" title="11.4 实现步骤"></a>11.4 实现步骤</h2><h3 id="11-4-1-各种主机的网络配置和初始环境准备"><a href="#11-4-1-各种主机的网络配置和初始环境准备" class="headerlink" title="11.4.1 各种主机的网络配置和初始环境准备"></a>11.4.1 各种主机的网络配置和初始环境准备</h3><p>网络配置：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">略<br></code></pre></td></tr></table></figure><p>初始配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">关闭防火墙</span><br>systemctl status firewalld ;systemctl stop firewalld ;systemctl disable firewalld<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">关闭selinux</span><br>getenforce ; sed -i  &#x27;/^SELINUX=enforcing/c SELINUX=Disabled&#x27;  /etc/selinux/config<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">开启时钟同步</span><br>yum install -y chrony; systemctl enable --now chronyd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装<span class="hljs-built_in">bind</span></span><br>yum -y install bind <br></code></pre></td></tr></table></figure><h3 id="11-4-2-实现web服务"><a href="#11-4-2-实现web服务" class="headerlink" title="11.4.2 实现web服务"></a>11.4.2 实现web服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在web服务器：10.0.0.100实现</span><br>yum install -y httpd<br>echo www.xiaoehxie.org &gt; /var/www/html/index.html<br>systemctl restart httpd<br></code></pre></td></tr></table></figure><h3 id="11-4-3-实现xiaohexie-org域的主DNS服务器"><a href="#11-4-3-实现xiaohexie-org域的主DNS服务器" class="headerlink" title="11.4.3 实现xiaohexie.org域的主DNS服务器"></a>11.4.3 实现xiaohexie.org域的主DNS服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在域主DNS服务器：10.0.0.3上</span><br>yum -y install bind<br><br>vim /etc/named.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">注释掉下面两行</span><br>options &#123;<br>//      listen-on port 53 &#123; 127.0.0.1; &#125;;<br>//      allow-query     &#123; localhost; &#125;;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">只允许这台主机进行区域传输</span><br>allow-transfer &#123; 10.0.0.4;&#125;;<br><br>vim /etc/named.rfc1912.zones<br><span class="hljs-meta prompt_">#</span><span class="language-bash">添加以下内容</span><br>zone &quot;xiaohexie.org&quot; &#123;<br>        type master;<br>        file &quot;xiaohexie.org.zone&quot;;<br>&#125;;<br><br><br><br><br>vim /var/named/xiaohexie.org.zone<br><span class="hljs-meta prompt_">$</span><span class="language-bash">TTL 1D</span><br>@       IN SOA  master admin.xiaohexie.org. (<br>                                        20230818        ; serial<br>                                        1D      ; refresh<br>                                        1H      ; retry<br>                                        1W      ; expire<br>                                        3H )    ; minimum<br>                NS      master<br>                NS      slave<br>master          A       192.168.157.153<br>slave           A       192.168.157.146<br>www             A       192.168.157.155<br><br><br>named-checkconf <br>named-checkzone xiaohexie.org /var/named/xiaohexie.org.zone <br><br><br>systemctl start  named   #第一次启动服务<br>rndc  reload             #不是第一次启动服务<br></code></pre></td></tr></table></figure><h3 id="11-4-4-实现xiaohexie-org域的从DNS服务器配置"><a href="#11-4-4-实现xiaohexie-org域的从DNS服务器配置" class="headerlink" title="11.4.4 实现xiaohexie.org域的从DNS服务器配置"></a>11.4.4 实现xiaohexie.org域的从DNS服务器配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在域主DNS服务器：10.0.0.4上</span><br>yum -y install bind<br><br>vim /etc/named.conf<br>//  listen-on port 53 &#123; 127.0.0.1; &#125;;<br>//  allow-query     &#123; localhost; &#125;;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">不允许其他主机进行区域传输</span><br>    allow-transfer &#123; none;&#125;;<br><br><br>vim /etc/named.rfc1912.zones<br>zone &quot;xiaohexie.org&quot; &#123;<br>    type slave;<br>    masters &#123; 10.0.0.3;&#125;;<br>    file &quot;slaves/xiaohexie.org.slave&quot;;<br>&#125;;<br><br>systemctl start  named   #第一次启动服务<br>rndc  reload             #不是第一次启动服务<br>ls /var/named/slaves/xiaohexie.org.slave 查看区域数据库文件是否生成<br></code></pre></td></tr></table></figure><h3 id="11-4-5-实现org域的主DNS服务器"><a href="#11-4-5-实现org域的主DNS服务器" class="headerlink" title="11.4.5 实现org域的主DNS服务器"></a>11.4.5 实现org域的主DNS服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在org域的主DNS服务器10.0.0.128 上实现</span><br>yum -y install bind <br><br>vim /etc/named.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">注释掉两行</span><br>//  listen-on port 53 &#123; 127.0.0.1; &#125;;<br>//  allow-query     &#123; localhost; &#125;;<br><br><br>vim /etc/named.rfc1912.zones<br>zone &quot;org&quot; &#123;<br>        type master;<br>        file &quot;org.zone&quot;;<br>&#125;;<br><br><br><br>vim /var/named/org.zone<br><span class="hljs-meta prompt_">$</span><span class="language-bash">TTL 1D</span><br>@       IN      SOA     master  admin.xiaohexie.org. (<br>                                20230826        ;       serial<br>                                300     ;       refresh<br>                                10M     ;       retry<br>                                1W      ;       expire<br>                                3H      )       ; minimum<br>                NS      master<br>xiaohexie       NS      xiaohexiens1<br>xiaoheixe       NS      xiaohexiens2<br>master          A       10.0.0.128<br>xiaohexiens1    A       10.0.0.3<br>xiaohexiens2    A       10.0.0.4<br><br>chgrp named /var/named/org.zone <br><br>systemctl start  named   #第一次启动服务<br>rndc  reload             #不是第一次启动服务<br></code></pre></td></tr></table></figure><h3 id="11-4-6-实现根域的主DNS服务器"><a href="#11-4-6-实现根域的主DNS服务器" class="headerlink" title="11.4.6 实现根域的主DNS服务器"></a>11.4.6 实现根域的主DNS服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在org域的主DNS服务器10.0.0.128 上实现</span><br>yum -y install bind <br><br>vim /etc/named.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">注释掉两行</span><br>//  listen-on port 53 &#123; 127.0.0.1; &#125;;<br>//  allow-query     &#123; localhost; &#125;;<br><br><br>vim /etc/named.rfc1912.zones<br>zone &quot;.&quot; IN &#123;<br>        type master;<br>        file &quot;root.zone&quot;;<br>&#125;;<br><br><br><br>vim /var/named/org.zone<br><span class="hljs-meta prompt_">$</span><span class="language-bash">TTL 1D</span><br>@       IN      SOA     master  admin.xiaohexie.org. (<br>                                20230826        ;       serial<br>                                300     ;       refresh<br>                                10M     ;       retry<br>                                1W      ;       expire<br>                                3H      )       ; minimum<br>                NS      master<br>org             NS      orgns<br>master          A       10.0.0.129<br>orgns           A       10.0.0.128<br><br><br>chgrp named /var/named/root.zone<br>chmod 640 /var/named/root.zone<br><br>systemctl start  named   #第一次启动服务<br>rndc  reload             #不是第一次启动服务<br></code></pre></td></tr></table></figure><h3 id="11-4-7-实现转发目标的DNS服务器"><a href="#11-4-7-实现转发目标的DNS服务器" class="headerlink" title="11.4.7 实现转发目标的DNS服务器"></a>11.4.7 实现转发目标的DNS服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在转发目标的DNS服务器10.0.0.6 上实现</span><br>yum -y install bind <br><br>vim /etc/named.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">注释掉两行</span><br>//  listen-on port 53 &#123; 127.0.0.1; &#125;;<br>//  allow-query     &#123; localhost; &#125;;<br><br>vim /etc/named.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改以下两行</span>    <br>    dnssec-enable no;<br>    dnssec-validation no;<br><br><br>vim /var/named/named.ca<br>.           518400  IN  NS  a.root-servers.net.<br>a.root-servers.net. 518400  IN  A   10.0.0.129<br><br><br>systemctl start  named   #第一次启动服务<br>rndc  reload             #不是第一次启动服务<br></code></pre></td></tr></table></figure><h3 id="11-4-8-实现本地只缓存DNS服务器"><a href="#11-4-8-实现本地只缓存DNS服务器" class="headerlink" title="11.4.8 实现本地只缓存DNS服务器"></a>11.4.8 实现本地只缓存DNS服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在本地缓存的DNS服务器10.0.0.10 上实现</span><br>yum -y install bind <br><br>vim /etc/named.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">注释掉两行</span><br>//  listen-on port 53 &#123; 127.0.0.1; &#125;;<br>//  allow-query     &#123; localhost; &#125;;<br><br>vim /etc/named.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改以下两行</span>    <br>    dnssec-enable no;<br>    dnssec-validation no;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">添加以下两行</span><br>    forward only;<br>    forwarders      &#123; 10.0.0.6;&#125;;<br><br><br><br><br>systemctl start  named   #第一次启动服务<br>rndc  reload             #不是第一次启动服务<br></code></pre></td></tr></table></figure><h3 id="11-4-9-客户端测试"><a href="#11-4-9-客户端测试" class="headerlink" title="11.4.9 客户端测试"></a>11.4.9 客户端测试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# cat /etc/resolv.conf <br><span class="hljs-meta prompt_"># </span><span class="language-bash">Generated by NetworkManager</span><br>nameserver 10.0.0.10<br>[root@localhost ~]# dig www.xiaohexie.org<br><br>; &lt;&lt;&gt;&gt; DiG 9.11.4-P2-RedHat-9.11.4-26.P2.el7_9.14 &lt;&lt;&gt;&gt; www.xiaohexie.org<br>;; global options: +cmd<br>;; Got answer:<br>;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 55049<br>;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 1, ADDITIONAL: 2<br><br>;; OPT PSEUDOSECTION:<br>; EDNS: version: 0, flags:; udp: 4096<br>;; QUESTION SECTION:<br>;www.xiaohexie.org.INA<br><br>;; ANSWER SECTION:<br>www.xiaohexie.org.86400INA11.11.2.2<br>www.xiaohexie.org.86400INA10.0.0.5<br><br>;; AUTHORITY SECTION:<br>xiaohexie.org.86400INNSxiaohexiens1.org.<br><br>;; ADDITIONAL SECTION:<br>xiaohexiens1.org.86400INA10.0.0.3<br><br>;; Query time: 935 msec<br>;; SERVER: 10.0.0.10#53(10.0.0.10)<br>;; WHEN: Wed Aug 23 20:46:43 CST 2023<br>;; MSG SIZE  rcvd: 121<br><br></code></pre></td></tr></table></figure><h1 id="12-面试题"><a href="#12-面试题" class="headerlink" title="12 面试题"></a>12 面试题</h1><ol><li>DNS工作原理</li><li>递归和迭代查询的区别</li><li>DNS什么时候使用端口号53/TCP 和53/UDP</li><li>CDN工作原理</li><li>上家公司域名解析是怎么解析的，哪个平台解析的</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第五周作业</title>
    <link href="/2023/08/08/%E7%AC%AC%E4%BA%94%E5%91%A8%E4%BD%9C%E4%B8%9A/"/>
    <url>/2023/08/08/%E7%AC%AC%E4%BA%94%E5%91%A8%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<p>完成作业：</p><h1 id="1-SUDO-PAM配置规范说明"><a href="#1-SUDO-PAM配置规范说明" class="headerlink" title="1.SUDO,PAM配置规范说明"></a>1.SUDO,PAM配置规范说明</h1><p><strong>sudo配置规范</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">sudo：允许管理员让普通用户执行一些或全部的root命令的一个工具<br><br>sodo特性<br><br>sodo能够限制用户只在某台主机上运行某些命令<br><br>sudo提供了丰富的日志，详细地记录了每个用户的操作<br><br>sudo的配置文件是/etc/sudoers，他允许系统管理员集中的管理用户的使用权限和使用的主机，他所在的位置默认是在/etc/sudoers，属性必须为0411<br></code></pre></td></tr></table></figure><p><strong>PAM配置规范</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">PAM：插件式的认证模块<br><br>具体的pam文件夹放在/lib/security目录下，服务文件夹放在/etc/pam.d目录下<br><br>pam——access.so模块的使用，控制访问sshd服务的主机和用户<br><br>1.修改需要使用这个模块的服务文件，如sshd:/etc/pam,d/sshd添加<br><br>acconut.required pam_access.so<br><br>2.修改模块的配置文件<br><br>/etc/security/access.conf<br><br>-:redhat:ALL EXCEPT 192.168.0<br><br>3.测试<br><br>ssh<br><br>ssh<br><br>pam_access.so根据主机、IP\用户\拒绝或允许访问<br></code></pre></td></tr></table></figure><h1 id="2-chrony搭建私有ntp服务"><a href="#2-chrony搭建私有ntp服务" class="headerlink" title="2.chrony搭建私有ntp服务"></a>2.chrony搭建私有ntp服务</h1><p>服务器配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">安装chrony</span><br>[15:35:30 root@centos8 ~]#yum -y install chrony<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改配置文件</span><br>[15:35:46 root@centos8 ~]#vim /etc/chrony.conf <br>server ntp.aliyun.com iburst  #互联网NTP源服务器<br>server ntp1.aliyun.com iburst<br>server ntp2.aliyun.com iburst<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">allow 192.168.0.0/16</span><br>allow 0.0.0.0/0  ##允许所有网段同步<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Serve time even <span class="hljs-keyword">if</span> not synchronized to a time <span class="hljs-built_in">source</span>.</span><br>local stratum 10  #当互联网无法连接时，仍然可以为客户端提供时间同步服务<br><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启chronyd服务</span><br>[15:51:18 root@centos8 ~]#systemctl restart chronyd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">服务器启动会打开123端口</span><br>[15:51:46 root@centos8 ~]#ss -ntlu<br>Netid      State       Recv-Q      Send-Q             Local Address:Port            Peer Address:Port      Process                      <br>udp        UNCONN      0           0                        0.0.0.0:123                  0.0.0.0:*                              <br><br></code></pre></td></tr></table></figure><p>客户端配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">安装chrony</span><br>[15:53:53 root@rocky8 ~]#yum -y install chrony<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改配置文件</span><br>[15:54:38 root@rocky8 ~]#vim /etc/chrony.conf <br>server 192.168.157.166 iburst <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启服务</span><br>[15:57:22 root@rocky8 ~]#systemctl restart chronyd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">确认同步成功</span><br>[15:57:46 root@rocky8 ~]#chronyc sources -v<br><br>  .-- Source mode  &#x27;^&#x27; = server, &#x27;=&#x27; = peer, &#x27;#&#x27; = local clock.<br> / .- Source state &#x27;*&#x27; = current best, &#x27;+&#x27; = combined, &#x27;-&#x27; = not combined,<br>| /             &#x27;x&#x27; = may be in error, &#x27;~&#x27; = too variable, &#x27;?&#x27; = unusable.<br>||                                                 .- xxxx [ yyyy ] +/- zzzz<br>||      Reachability register (octal) -.           |  xxxx = adjusted offset,<br>||      Log2(Polling interval) --.      |          |  yyyy = measured offset,<br>||                                \     |          |  zzzz = estimated error.<br>||                                 |    |           \<br>MS Name/IP address         Stratum Poll Reach LastRx Last sample               <br>===============================================================================<br>^* 192.168.157.166               3   6    17    19   -184ns[  -30us] +/-   40ms<br><br><br></code></pre></td></tr></table></figure><h1 id="3-说明CDN原理"><a href="#3-说明CDN原理" class="headerlink" title="3.说明CDN原理"></a>3.说明CDN原理</h1><ol><li>用户访问网站资源，先经过本地DNS解析，如果有结果直接返回给客户端;</li><li>本地缓存没有则授权dns查询；</li><li>返回域名cname 对应的IP地址；</li><li>域名解析请求dns调度系统，调度系统为其分配最佳ip地址；</li><li>返回缓存cdn服务器ip地址；</li><li>用户向缓存服务器发送请求，cdn将用户的数据返回给用户终端；</li></ol><h1 id="4-搭建智能DNS，实现不同地域客户端解析到不同主机"><a href="#4-搭建智能DNS，实现不同地域客户端解析到不同主机" class="headerlink" title="4.搭建智能DNS，实现不同地域客户端解析到不同主机"></a>4.搭建智能DNS，实现不同地域客户端解析到不同主机</h1><h2 id="4-1-环境要求"><a href="#4-1-环境要求" class="headerlink" title="4.1 环境要求"></a>4.1 环境要求</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">需要5台主机<br>DNS主服务器：10.0.0.4, 192.168.0.1<br>web服务器1： 10.0.0.129<br>web服务器2： 192.168.0.2<br>DNS客户端1：192.168.0.100<br>DNS客户端2：10.0.0.200<br></code></pre></td></tr></table></figure><h2 id="4-2-准备"><a href="#4-2-准备" class="headerlink" title="4.2  准备"></a>4.2  准备</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">关闭selinux<br>关闭防火墙<br>时间同步<br></code></pre></td></tr></table></figure><h2 id="4-3-实现步骤"><a href="#4-3-实现步骤" class="headerlink" title="4.3 实现步骤"></a>4.3 实现步骤</h2><h3 id="4-3-1-DNS服务器网卡配置"><a href="#4-3-1-DNS服务器网卡配置" class="headerlink" title="4.3.1 DNS服务器网卡配置"></a>4.3.1 DNS服务器网卡配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#配置两个网卡</span></span><br>eth0：10.0.0.4<br>eth1：192.168.0.1<br>ip a<br>2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000<br>    link/ether 00:0c:29:2c:30:b9 brd ff:ff:ff:ff:ff:ff<br>    altname enp3s0<br>    altname ens160<br>    inet 10.0.0.4/24 brd 10.0.0.255 scope global dynamic noprefixroute eth0<br>       valid_lft 1525sec preferred_lft 1525sec<br>    inet6 fe80::9397:ffd3:db85:7b3a/64 scope link noprefixroute<br>       valid_lft forever preferred_lft forever<br>3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000<br>    link/ether 00:0c:29:2c:30:c3 brd ff:ff:ff:ff:ff:ff<br>    altname enp19s0<br>    altname ens224<br>    inet 192.168.0.1/24 brd 192.168.0.255 scope global dynamic noprefixroute eth1<br>       valid_lft 1488sec preferred_lft 1488sec<br>    inet6 fe80::c2ca:61a7:1c9b:f2b6/64 scope link noprefixroute<br>       valid_lft forever preferred_lft forever<br><br></code></pre></td></tr></table></figure><h3 id="4-3-2-主DNS服务端配置文件实现view"><a href="#4-3-2-主DNS服务端配置文件实现view" class="headerlink" title="4.3.2 主DNS服务端配置文件实现view"></a>4.3.2 主DNS服务端配置文件实现view</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">1、安装<span class="hljs-built_in">bind</span></span><br>yum -y install bind<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2、修改文件</span><br>vim /etc/named.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#使用//注释掉下面几行：</span></span><br>//      listen-on port 53 &#123; 127.0.0.1; &#125;;<br>//      allow-query     &#123; localhost; &#125;;<br>//zone &quot;.&quot; IN &#123;<br>//      type hint;<br>//      file &quot;named.ca&quot;;<br>//&#125;;<br>//include &quot;/etc/named.rfc1912.zones&quot;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">3、添加ACL</span><br>vim /etc/named.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#在文件最前面添加下面几行</span></span><br>acl beijingnet &#123;<br>        10.0.0.0/24;<br>&#125;;<br><br>acl shanghainet &#123;<br>        192.168.0.0/24;<br>&#125;;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">4、创建view</span><br>vim /etc/named.conf<br><br>view    beijingview &#123;<br>        match-clients &#123; beijingnet;&#125;;<br>        include &quot;/etc/named.rfc1912.zones.bj&quot;;<br>&#125;;<br>view    shanghaiview &#123;<br>        match-clients &#123; shanghainet;&#125;;<br>        include &quot;/etc/named.rfc1912.zones.sh&quot;;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h3 id="4-3-3-实现区域配置文件"><a href="#4-3-3-实现区域配置文件" class="headerlink" title="4.3.3 实现区域配置文件"></a>4.3.3 实现区域配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/named.rfc1912.zones.bj<br>zone &quot;.&quot; IN &#123;<br>        type hint;<br>        file &quot;named.ca&quot;;<br>&#125;;<br><br>zone &quot;xiaohexie.org&quot; &#123;<br>        type master;<br>        file &quot;xiaohexie.org.zone.bj&quot;;<br>&#125;;<br><br><br><br><br>vim /etc/named.rfc1912.zones.sh<br>zone &quot;.&quot; IN &#123;<br>        type hint;<br>        file &quot;named.ca&quot;;<br>&#125;;<br><br>zone &quot;xiaohexie.org&quot; &#123;<br>        type master;<br>        file &quot;xiaohexie.org.zone.sh&quot;;<br>&#125;;<br><br><br>chgrp named /etc/named.rfc1912.zones.*<br></code></pre></td></tr></table></figure><h3 id="4-3-4-创建区域数据库文件"><a href="#4-3-4-创建区域数据库文件" class="headerlink" title="4.3.4 创建区域数据库文件"></a>4.3.4 创建区域数据库文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /var/named/xiaohexie.org.zone.bj<br><span class="hljs-meta prompt_">$</span><span class="language-bash">TTL 1D</span><br>@       IN SOA  master admin.xiaohexie.org. (<br>                                        20230818        ; serial<br>                                        1D      ; refresh<br>                                        1H      ; retry<br>                                        1W      ; expire<br>                                        3H )    ; minimum<br>                NS      master<br>master          A       10.0.0.4<br>wwwA10.0.0.129<br>www             A       1.1.1.1<br><br><br>vim /var/named/xiaohexie.org.zone.sh<br><span class="hljs-meta prompt_">$</span><span class="language-bash">TTL 1D</span><br>@       IN SOA  master admin.xiaohexie.org. (<br>                                        20230818        ; serial<br>                                        1D      ; refresh<br>                                        1H      ; retry<br>                                        1W      ; expire<br>                                        3H )    ; minimum<br>                NS      master<br>master          A       10.0.0.4<br>wwwA192.168.0.2<br>www             A       2.2.2.2<br><br><br>chgrp named /var/named/xiaohexie.org.zone.*<br><br>systemctl start named    #第一次启动服务<br>rndc reload#不是第一此启动服务<br></code></pre></td></tr></table></figure><h3 id="4-3-5-实现位于不同区域的两个web服务器"><a href="#4-3-5-实现位于不同区域的两个web服务器" class="headerlink" title="4.3.5 实现位于不同区域的两个web服务器"></a>4.3.5 实现位于不同区域的两个web服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#分别在两台不同的主机上安装http服务</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在web服务器1： 10.0.0.129实现</span><br>yum install httpd <br>echo xiaohexie.shanghai 10.0.0.129 &gt; /var/www/html/index.html<br>systemctl start httpd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在web服务器2： 192.168.0.2实现</span><br>yum install httpd <br>echo welcome xiaohexie 192.168.0.2 &gt; /var/www/html/index.html<br>systemctl start httpd<br></code></pre></td></tr></table></figure><h3 id="4-3-6-客户端测试"><a href="#4-3-6-客户端测试" class="headerlink" title="4.3.6 客户端测试"></a>4.3.6 客户端测试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#分别在两台主机上访问</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">DNS客户端1：192.168.0.100实现，DNS指向192.168.0.1</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">DNS客户端2：10.0.0.200实现，DNS指向10.0.0.4</span><br></code></pre></td></tr></table></figure><p>#DNS客户端1：192.168.0.100验证结果：</p><p><img src="image-20230822010407262.png" alt="image-20230822010407262"></p><p>#DNS客户端2：10.0.0.200主机上验证结果：</p><p><img src="image-20230822010450054.png" alt="image-20230822010450054"></p><h1 id="5-解释DNS解析流程"><a href="#5-解释DNS解析流程" class="headerlink" title="5.解释DNS解析流程"></a>5.解释DNS解析流程</h1><p><img src="image-20230822011430511.png" alt="image-20230822011430511"></p><ul><li><p>递归查询：</p><p>是指DNS服务器在收到用户发起的请求时，必须向用户返回一个准确的查询结果。如果DNS服务器本地没有存储与之对应的信息，则该服务器需要询问其他服务器，并将返回的查询结果提交给用户。</p><p>一般来说，由客户机发起的和本地DNS服务器之间属于递归查询，即当客户机向DNS服务器发出请求后，若DNS服务器本身不能解析，则会向其他的DNS服务器发出查询请求，得到最终的肯定或否定的结果后转交给客户机。此查询的源和目标保持不变，为了查询结果客户机只需要发起一次查询。</p><p>递归算法：客户端向LocalDNS发起域名查询–&gt;localDNS不知道对应域名的IP–&gt;但他知道谁知道–&gt;他代为帮客户端去询问其他DNS服务器–&gt;最后返回最终结果</p></li><li><p>迭代查询：</p><p>是指DNS服务器在收到用户发起的请求时，并不直接回复查询结果，而是返回给用户另一台DNS服务器的地址，用户再向这台DNS服务器提交请求，这样依次反复，直到返回查询结果。</p><p>一般情况下，本地的DNS服务器向其他DNS服务器的查询属于迭代查询，如：若对方不能放回权威的结果，则会向下一个DNS服务器（参考前一个DNS服务器返回的结果）再次发起进行查询，直到返回查询的结果为止。此查询的源不变，但查询的目标不断变化，为了查询到结果一般需要发起多次查询</p><p>迭代算法：客户端向LocalDNS发起域名查询–&gt;localDNS不知道对应域名的IP–&gt;但他知道谁知道并推荐客户端应该找谁–&gt;客户端自己去找它</p></li><li><p>DNS缓存</p><p>DNS缓存是将解析数据存储在靠近发起请求的客户端的位置，也可以说DNS数据是可以缓存在任意位置，最终目的是以此减少递归查询过程，可以更快的让用户获得请求结果。</p></li></ul><h1 id="6-iptables-5表5链解释"><a href="#6-iptables-5表5链解释" class="headerlink" title="6.iptables 5表5链解释"></a>6.iptables 5表5链解释</h1><p><img src="image-20230822011605953.png" alt="image-20230822011605953"></p><p>五表：</p><ul><li><p>filter:过滤规则表</p></li><li><p>nat：地址规则转换表</p></li><li><p>mangle：修改数据标记位规则表</p></li><li><p>raw： 关闭启动用的连接追踪机制，加快封包穿越速度</p></li><li><p>security:用于强制访问mac网络规则，有selinux实现</p><p><img src="image-20230822011938759.png" alt="image-20230822011938759"></p><p>五链：</p></li><li><p>pre_routing：在对数据包做路由选择之前，将应用此链中的规则</p></li><li><p>input：当收到访问防火墙本机地址的数据包时，将应用此链中的规则</p></li><li><p>output：当防火墙本机向外发送数据包时，将应用此链中的规则</p></li><li><p>forward：当收到需要通过防火中转发给其他地址的数据包时，将应用此链中的规则，注意如果需要实现forward转发需要开启Linux内核中的ip_forward功能</p></li><li><p>post_routing:在对数据包做路由选择之后，将应用此链中的规则</p></li></ul><h1 id="7-iptables-firewalld-nftable-实现主机防火墙。5000-6000端口仅192-168-0-0-24网段内的主机访问"><a href="#7-iptables-firewalld-nftable-实现主机防火墙。5000-6000端口仅192-168-0-0-24网段内的主机访问" class="headerlink" title="7.iptables/firewalld/nftable 实现主机防火墙。5000-6000端口仅192.168.0.0/24网段内的主机访问"></a>7.iptables/firewalld/nftable 实现主机防火墙。5000-6000端口仅192.168.0.0/24网段内的主机访问</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">iptables -I INPUT -s 192.168.0.0/24 -p tcp --dport 5000:6000 -j ACCEPT<br><br><br>firewall-cmd --permanent --zone=public --add-rich-rule=&#x27;rule family=ipv4 source address=192.168.0.0./24 port port=5000-6000 protocol=tcp accept<br><br></code></pre></td></tr></table></figure><h1 id="8-mysql的各发行版有哪些-？"><a href="#8-mysql的各发行版有哪些-？" class="headerlink" title="8.mysql的各发行版有哪些 ？"></a>8.mysql的各发行版有哪些 ？</h1><ol><li>mysql官方版本（企业版和社区版）</li><li>percona mysql</li><li>mariadb 由mysql创始者发起</li></ol><h1 id="9-mysql索引的作用"><a href="#9-mysql索引的作用" class="headerlink" title="9.mysql索引的作用"></a>9.mysql索引的作用</h1><h1 id="10-mysql-btree索引的原理"><a href="#10-mysql-btree索引的原理" class="headerlink" title="10.mysql btree索引的原理"></a>10.mysql btree索引的原理</h1><h1 id="11-mysql安全加固？"><a href="#11-mysql安全加固？" class="headerlink" title="11.mysql安全加固？"></a>11.mysql安全加固？</h1><ul><li>执行mysql_secure_installation 修改mysql密码、删除匿名账户、测试库等。</li><li>限制连入数据库的网段。</li><li>开启二进制日志、慢查询日志。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第四周作业</title>
    <link href="/2023/08/06/%E7%AC%AC%E5%9B%9B%E5%91%A8%E4%BD%9C%E4%B8%9A/"/>
    <url>/2023/08/06/%E7%AC%AC%E5%9B%9B%E5%91%A8%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="1-自定义写出10个定时任务的示例：比如每周三凌晨三点执行date命令"><a href="#1-自定义写出10个定时任务的示例：比如每周三凌晨三点执行date命令" class="headerlink" title="1.自定义写出10个定时任务的示例：比如每周三凌晨三点执行date命令"></a>1.自定义写出10个定时任务的示例：比如每周三凌晨三点执行date命令</h1><p>要求尽量的覆盖各种场景</p><p>示例一：</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">每周日晚上22：25执行data.sh脚本</span><br>[22:26:06 root@localhost data]#crontab -l<br>25 22 * * 7  /data/date.sh<br>[22:26:27 root@localhost data]#ls<br>2023-08-06_22:25:01.txt  date.sh <br></code></pre></td></tr></table></figure><p>示例二：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">每周 一、四、日，9点到23点期间每隔2小时，每间隔10分钟执行一次<span class="hljs-built_in">date</span>命令</span><br>[23:24:23 root@localhost ~]#crontab -l<br>PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin<br>*/10 9-23/2 * * 1,4,7  date &gt;&gt; date.txt<br></code></pre></td></tr></table></figure><p>示例三：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">每月10号、15号的0点30分执行打包操作</span><br>30 0 10，15 * *  tar -zcf /data/http.tar.gz  /apps/http/*<br></code></pre></td></tr></table></figure><p>示例四：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">每隔30分钟重启一下服务</span><br>30 * * * *  systemctl restart httpd<br></code></pre></td></tr></table></figure><p>示例五：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">每小时的第15分钟和第45分钟执行date.sh脚本</span><br>15,45 * * * * /data/date.sh<br></code></pre></td></tr></table></figure><p>示例六：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">每个季度的最后一个月的第一个周日早上9点执行脚本</span><br>0 9 1-6 3,6,9,12 0 /data/date.sh<br></code></pre></td></tr></table></figure><p>示例七：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">每天晚上9点到凌晨2点，每隔30分钟执行一次执行脚本</span><br>*/30 21-23,0-2 * * * /data/date.sh<br></code></pre></td></tr></table></figure><p>示例八：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">每隔5分钟执行任务，但在周六和周日暂停执行</span><br>*/5 * * * 1-5 /data/date.sh<br></code></pre></td></tr></table></figure><p>示例九：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">每个月的第一天早上九点执行<span class="hljs-built_in">date</span>命令</span><br>0 9 1 * * date<br></code></pre></td></tr></table></figure><p>示例十：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">每隔30分钟检查服务器磁盘使用情况</span><br>*/30 * * * * df -h &gt;&gt; /path/to/disk_usage.log<br></code></pre></td></tr></table></figure><h1 id="2-图文并茂说明Linux进程和内存概念"><a href="#2-图文并茂说明Linux进程和内存概念" class="headerlink" title="2.图文并茂说明Linux进程和内存概念"></a>2.图文并茂说明Linux进程和内存概念</h1><p>进程：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html">定义：程序动态运行的过程，应用运行的载体。<br>进程特征：<br>动态性：进程是程序执行的一次过程，是临时的、有生命周期的、是动态产生、动态消亡的<br>并发性：任何进程都可以同其他进程一起并发执行<br>独立性：进程是系统进行资源分配和调度的一个独立单位<br>结构性：进程 由程序、数据和进程控制块三部分组成<br></code></pre></td></tr></table></figure><p>内存：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">内存是计算机用于存储数据和程序的临时存储器。内存是系统的重要组成部分，用于存放正在运行的进程、操作系统和其他系统任务所需的数据和代码。<br></code></pre></td></tr></table></figure><h1 id="3-图文并茂说明Linux启动流程"><a href="#3-图文并茂说明Linux启动流程" class="headerlink" title="3.图文并茂说明Linux启动流程"></a>3.图文并茂说明Linux启动流程</h1><h2 id="3-1-centos-6-启动流程"><a href="#3-1-centos-6-启动流程" class="headerlink" title="3.1 centos 6 启动流程"></a>3.1 centos 6 启动流程</h2><p><img src="3009222-20221203195309893-405735574.png" alt="3009222-20221203195309893-405735574"></p><p>POST加电自建：加载BIOS的硬件信息，获取第一个启动设备</p><ol start="2"><li>读取第一个启动设备MBR的引导加载程序（grub）的启动信息</li><li>加载核心操作系统的核心信息，核心开始解压缩，并尝试驱动所有的硬件设备</li><li>核心执行init程序，并获取默认的运行信息</li><li>init程序执行/etc/rc.d/rc/sysinit文件，重新挂载根文件系统</li><li>启动核心的外挂模块</li><li>init执行运行的各个批处理文件</li><li>init执行/etc/rc.d/rc.local</li><li>执行/bin/login/程序，等待用户登录</li><li>登录之后开始以shell控制主机</li></ol><h2 id="3-2-centos-7-之后版本引导顺序"><a href="#3-2-centos-7-之后版本引导顺序" class="headerlink" title="3.2 centos 7 之后版本引导顺序"></a>3.2 centos 7 之后版本引导顺序</h2><p><img src="3009222-20221204171256468-1759315108.png" alt="3009222-20221204171256468-1759315108"></p><ol><li><p>UEFI或BIOS初始化，运行POST开机自检</p></li><li><p>选择启动设备</p></li><li><p>引导装载程序，centos7是grub2，加载装载程序的配置文件：</p><p>​    /etc/grub.d/</p><p>​    /etc/degfault/grub</p><p>​    /boot/grub2/grub.cfg</p></li><li><p>加载initramfs驱动模块</p></li><li><p>加载内核选项</p></li><li><p>内核初始化</p></li><li><p>执行initrd.target所有单元，包括挂载/etc/fstab</p></li><li><p>从initramfs根文件系统切换到磁盘根目录</p></li><li><p>systemd执行默认target配置，配置文件/etc/systemd/system/default.target</p></li><li><p>systemd执行sysinit.target初始化系统及basic.target准备操作系统</p></li><li><p>systemd启动muti-user.target下的本机于服务器服务</p></li><li><p>systemd执行muti-user.target下的/etc/rc.d/rc/local</p></li><li><p>systemd执行muti-user.target下的ghetty.target及登录服务</p></li><li><p>systemd执行graphical需要的服务</p></li></ol><h1 id="4-自定义一个systemd服务定时去其他服务器上检查-tmp-下文件的个数，如果发现数量有变化就记录变化情况到文件中。"><a href="#4-自定义一个systemd服务定时去其他服务器上检查-tmp-下文件的个数，如果发现数量有变化就记录变化情况到文件中。" class="headerlink" title="4.自定义一个systemd服务定时去其他服务器上检查/tmp/下文件的个数，如果发现数量有变化就记录变化情况到文件中。"></a>4.自定义一个systemd服务定时去其他服务器上检查/tmp/下文件的个数，如果发现数量有变化就记录变化情况到文件中。</h1><ol><li>vim count_file.sh</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment">#***************************************************************************</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Author:        tangbeiting</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">QQ:            306876058</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Date:          2023-08-07</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">FileName:      count_file.sh</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">URL:           https://xiaohexie00.github.io/</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Description:       The <span class="hljs-built_in">test</span> script</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Copyright (C): 2023 ALL rights reserved</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">**************************************************************************</span><br><br>PASSWORD=&quot;123456&quot;<br>REMOTE_IP=&quot;192.168.157.152&quot;<br>TMP_LOG_FILE=&quot;/var/log/count_tmp_file.log&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#COUNT_FILE=$(sshpass -p $PASSWORD ssh root@$REMOTE_IP &quot;ls /tmp/ | wc -l&quot;)</span></span> <br><br>while true<br>do<br>    COUNT_FILE=$(sshpass -p $PASSWORD ssh root@$REMOTE_IP &quot;ls /tmp/ | wc -l&quot;)<br>    COUNT_END=$(cat /var/log/count_tmp_file.log | tail -n1 | awk &#x27;&#123;print $NF&#125;&#x27;)<br>    if [ $COUNT_FILE != $COUNT_END ] ; then<br>        echo &quot; `date +%F_%T` $REMOTE_IP tmp file count : $COUNT_FILE &quot; &gt;&gt; $TMP_LOG_FILE<br>    else<br>        echo &quot; `date +%F_%T` $REMOTE_IP &quot; &gt;&gt; $TMP_LOG_FILE<br>    fi<br>    sleep 60<br><br>done<br><br></code></pre></td></tr></table></figure><ol start="2"><li>vim /lib/systemd/system/count_tmp.service</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Unit]<br>Description=Count Tmp file<br><br>[Service]<br>ExecStart=/bin/bash -c &quot;bash /data/count_file.sh&quot; <br>[Install]<br>WantedBy=multi-user.target<br><br></code></pre></td></tr></table></figure><p>​    3. 重新读取配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[15:46:25 root@ubuntu1804 data]#systemctl daemon-reload <br>[15:47:43 root@ubuntu1804 data]#systemctl enable --now count_tmp<br>Created symlink /etc/systemd/system/multi-user.target.wants/count_tmp.service → /lib/systemd/system/count_tmp.service.<br>[15:48:18 root@ubuntu1804 data]#systemctl status count_tmp<br>● count_tmp.service - Count Tmp file<br>   Loaded: loaded (/lib/systemd/system/count_tmp.service; enabled; vendor preset: enabled)<br>   Active: active (running) since Mon 2023-08-07 15:48:18 CST; 21s ago<br> Main PID: 13934 (bash)<br>    Tasks: 2 (limit: 2290)<br>   CGroup: /system.slice/count_tmp.service<br>           ├─13934 bash /data/count_file.sh<br>           └─13946 sleep 60<br><br>Aug 07 15:48:18 ubuntu1804 systemd[1]: Started Count Tmp file.<br><br></code></pre></td></tr></table></figure><ol start="4"><li>查看/var/log/count_tmp_file.log 日志文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[15:45:00 root@ubuntu1804 data]#tail -f /var/log/count_tmp_file.log <br> 2023-08-07_15:24:52 192.168.157.152 tmp file count : 5 <br> 2023-08-07_15:25:52 192.168.157.152 <br> 2023-08-07_15:28:59 192.168.157.152 tmp file count : 7 <br> 2023-08-07_15:29:59 192.168.157.152 <br> 2023-08-07_15:30:59 192.168.157.152 tmp file count : 7 <br> 2023-08-07_15:32:00 192.168.157.152 tmp file count : 9 <br> 2023-08-07_15:33:00 192.168.157.152 <br> 2023-08-07_15:48:18 192.168.157.152 tmp file count : 9 <br> 2023-08-07_15:49:18 192.168.157.152 <br> 2023-08-07_15:50:18 192.168.157.152 tmp file count : 9 <br><br></code></pre></td></tr></table></figure><h1 id="5-写Linux内核编译安装博客"><a href="#5-写Linux内核编译安装博客" class="headerlink" title="5.写Linux内核编译安装博客"></a>5.写Linux内核编译安装博客</h1><ol><li>下载内核源码包</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jade">https://mirrors.aliyun.com/linux-kernel<br>https://mirrors.edge.kernel.org/pub/linux/kernel/<br></code></pre></td></tr></table></figure><p>​    2. 解压到/usr/local/src/路径下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[16:01:28 root@localhost linux-5.18.9]#tar xf linux-5.18.9.tar.xz -C /usr/local/src/<br></code></pre></td></tr></table></figure><p>​    3. 安装依赖包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[16:01:28 root@localhost linux-5.18.9]#yum -y install gcc make ncurses-devel flex bison openssl-devel elfutils-libelf-devel bc perl<br></code></pre></td></tr></table></figure><ol start="4"><li>cd进入到cd /usr/local/src/linux-5.18.9/下</li></ol><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autoit">  [<span class="hljs-number">16</span>:<span class="hljs-number">01</span>:<span class="hljs-number">28</span> root<span class="hljs-symbol">@localhost</span> linux<span class="hljs-number">-5.18</span><span class="hljs-number">.9</span>]<span class="hljs-meta">#cd /usr/local/src/linux-5.18.9/</span><br>  <br><span class="hljs-meta"># 该命令会将之前进行过的内核功能选择文件同时删除掉</span><br><span class="hljs-meta"># 因此只有第一次内核编译才需要操作</span><br>  [<span class="hljs-number">16</span>:<span class="hljs-number">01</span>:<span class="hljs-number">28</span> root<span class="hljs-symbol">@localhost</span> linux<span class="hljs-number">-5.18</span><span class="hljs-number">.9</span>]<span class="hljs-meta">#make mrproper</span><br>  <br><span class="hljs-meta"># 删除前一次编译过程的残留数据</span><br>  [<span class="hljs-number">16</span>:<span class="hljs-number">01</span>:<span class="hljs-number">28</span> root<span class="hljs-symbol">@localhost</span> linux<span class="hljs-number">-5.18</span><span class="hljs-number">.9</span>]<span class="hljs-meta">#make clean</span><br></code></pre></td></tr></table></figure><ol start="5"><li> 内核选项配置</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">复制原来的配置文件</span><br>[16:01:28 root@localhost linux-5.18.9]#cp /boot/config-5.14.0-162.23.1.el9_1.x86_64 .config<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">执行功能选择，如不需要改动，保持默认退出即可</span><br>[16:01:28 root@localhost linux-5.18.9]#make menuconfig<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">##注意事项</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">以 rocky Linux 为例，在导入原版本配置文件后，需要将以下参数关闭，否则会导致编译错误</span><br>修改之后的参数如下所示：<br>[16:01:28 root@localhost linux-5.18.9]#vim .config<br>CONFIG_DEBUG_INFO=n<br>CONFIG_DEBUG_INFO_BTF=n<br>CONFIG_SYSTEM_TRUSTED_KEYS=&quot;&quot;<br><br></code></pre></td></tr></table></figure><p>​    6.  编译内核与内核模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">生成未经压缩的内核</span><br>[16:01:28 root@localhost linux-5.18.9]#make vmlinux<br><span class="hljs-meta prompt_"># </span><span class="language-bash">仅生成核心模块</span><br>[16:01:28 root@localhost linux-5.18.9]#make modules<br><span class="hljs-meta prompt_"># </span><span class="language-bash">生成经压缩过的核心(默认)</span><br>[16:01:28 root@localhost linux-5.18.9]#ake bzImage<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">以上三步合并执行</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 表示使用16线程同时编译</span></span><br>[16:01:28 root@localhost linux-5.18.9]#make -j 16 all<br></code></pre></td></tr></table></figure><p>​    7. 安装模块和新内核</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[16:01:28 root@localhost linux-5.18.9]#make modules_install<br>[16:01:28 root@localhost linux-5.18.9]#make install<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">编辑grub</span><br>[21:27:40 root@localhost linux-5.18.9]#grub2-mkconfig -o /boot/grub2/grub.cfg <br>Generating grub configuration file ...<br>done<br><br></code></pre></td></tr></table></figure><p>​    8. 重启</p><p><img src="image-20230807213340340.png" alt="image-20230807213340340"></p><h1 id="6-总结5个自我觉得比较有用的awk的使用场景，比如在什么情况下用awk处理文本效率最高，发散题，至少写1个。"><a href="#6-总结5个自我觉得比较有用的awk的使用场景，比如在什么情况下用awk处理文本效率最高，发散题，至少写1个。" class="headerlink" title="6.总结5个自我觉得比较有用的awk的使用场景，比如在什么情况下用awk处理文本效率最高，发散题，至少写1个。"></a>6.总结5个自我觉得比较有用的awk的使用场景，比如在什么情况下用awk处理文本效率最高，发散题，至少写1个。</h1><p>场景一：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">获取本机IP地址</span><br>[03:00:32 root@ubuntu1804 ~]#hostname -I | awk &#x27;&#123;print $1&#125;&#x27; |cat -A<br>192.168.157.141$<br><br></code></pre></td></tr></table></figure><p>场景二：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">指定分隔符</span><br>[15:09:29 root@localhost ~]#awk -v FS=&quot;:&quot; &#x27;&#123;print $1&quot;**&quot;$3&#125;&#x27; /etc/passwd | head -n5<br>root**0<br>bin**1<br>daemon**2<br>adm**3<br>lp**4<br><br></code></pre></td></tr></table></figure><p>场景三：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">显示倒数第三列</span><br>[15:14:57 root@localhost ~]#awk -F: &#x27;&#123;print $(NF-2)&#125;&#x27; /etc/passwd<br>root<br>bin<br>daemon<br>adm<br>lp<br>sync<br>shutdown<br>halt<br>mail<br>operator<br>games<br>......<br><br>Privilege-separated SSH<br><br></code></pre></td></tr></table></figure><p>场景四：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">显示第二行之后的行</span><br>[15:27:57 root@localhost ~]#df -h | awk -F&#x27; +|%&#x27; &#x27;&#123;print $1,$5&#125;&#x27; | awk &#x27;NR&gt;=2&#x27;<br>devtmpfs 0<br>tmpfs 0<br>tmpfs 2<br>tmpfs 0<br>/dev/mapper/cl-root 23<br>/dev/nvme0n1p1 22<br>tmpfs 0<br><br><br></code></pre></td></tr></table></figure><p>场景五：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">计算时处理文本效率高</span><br>[15:47:21 root@localhost ~]#time (awk &#x27;BEGIN&#123;sum=0;for(i=0;i&lt;=10000;i++)&#123;sum+=i;&#125;;print sum&#125;&#x27;)<br>50005000<br><br>real0m0.002s<br>user0m0.002s<br>sys0m0.000s<br>[15:47:31 root@localhost ~]#time (seq -s + 10000|bc)<br>50005000<br><br>real0m0.006s<br>user0m0.001s<br>sys0m0.003s<br>[15:48:06 root@localhost ~]#time (for ((i=0;i&lt;=10000;i++));do let sum+=i;echo $sum)<br>-bash: syntax error near unexpected token `)&#x27;<br>[15:50:57 root@localhost ~]#time (for ((i=0;i&lt;=10000;i++));do let sum+=i;done;echo $sum)<br>50005000<br><br>real0m0.025s<br>user0m0.025s<br>sys0m0.000s<br><br></code></pre></td></tr></table></figure><p>在什么情况下用awk处理文本效率最高？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">计算时处理文本效率最高</span><br>[15:47:21 root@localhost ~]#time (awk &#x27;BEGIN&#123;sum=0;for(i=0;i&lt;=10000;i++)&#123;sum+=i;&#125;;print sum&#125;&#x27;)<br>50005000<br><br>real0m0.002s<br>user0m0.002s<br>sys0m0.000s<br>[15:47:31 root@localhost ~]#time (seq -s + 10000|bc)<br>50005000<br><br>real0m0.006s<br>user0m0.001s<br>sys0m0.003s<br>[15:48:06 root@localhost ~]#time (for ((i=0;i&lt;=10000;i++));do let sum+=i;echo $sum)<br>-bash: syntax error near unexpected token `)&#x27;<br>[15:50:57 root@localhost ~]#time (for ((i=0;i&lt;=10000;i++));do let sum+=i;done;echo $sum)<br>50005000<br><br>real0m0.025s<br>user0m0.025s<br>sys0m0.000s<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>软件管理</title>
    <link href="/2023/07/30/%E8%BD%AF%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    <url>/2023/07/30/%E8%BD%AF%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="1-rpm包管理器"><a href="#1-rpm包管理器" class="headerlink" title="1 rpm包管理器"></a>1 rpm包管理器</h1><p>Centos 系统上使用rpm命令管理程序包，存在包依赖问题</p><p>功能：</p><ul><li>安装</li><li>卸载</li><li>升级</li><li>查询</li><li>校验</li><li>数据库维护</li></ul><h2 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h2><p>格式：</p><figure class="highlight http"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs http">rpm &#123; -i | --install &#125;  ”安装选项“   包名称<br></code></pre></td></tr></table></figure><p>选项：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http">-i: install 安装<br>-v: verbose 安装过程细节显示<br>-h: 以#显示程序包管理执行进度<br></code></pre></td></tr></table></figure><p>常用组合：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">rpm -ivh  PACKAGE_FILE<br></code></pre></td></tr></table></figure><p>rpm包安装[install-options]</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http">--test: 测试安装，不是真正的安装<br>--nodeps: 忽略依赖关系<br><br></code></pre></td></tr></table></figure><h2 id="1-2-升级和降级"><a href="#1-2-升级和降级" class="headerlink" title="1.2 升级和降级"></a>1.2 升级和降级</h2><p>rpm包升级</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">rpm  &#123;-U | --upgrade&#125;  [install-option] PACKAGE-FILE<br>rpm  &#123;-F | --freshen&#125;  [install-option] PACKAGE-FILE<br></code></pre></td></tr></table></figure><p>对应选项：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http">-U | --upgrade :安装有旧包，则升级，不存在旧包，则安装<br>-F | --freshen :安装有旧包，则升级，不存在旧包，则不执行操作<br><br>--oldpackage: 降级<br>--force: 强制安装<br></code></pre></td></tr></table></figure><p>常用组合：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">rpm -Uvh  package_file<br>rpm -Fvh  package_file<br></code></pre></td></tr></table></figure><h2 id="1-3-包查询"><a href="#1-3-包查询" class="headerlink" title="1.3 包查询"></a>1.3 包查询</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">rpm &#123; -q | --query &#125; [select-options] [query-options]<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html">[select-options]<br>-a: 所有包<br>-f: 查看指点的文件由哪个程序包安装生成<br>-p rpmfile: 针对尚未安装的程序包文件做查询操作<br><br>[query-options]<br>--changelog: 查询rpm包的changelog<br>-c: 查询程序的配置文件<br>-d: 查询程序的文档<br>-i: information<br>-l：查看指定的程序包安装后生成的所有文件<br>--scripts：程序包自带的脚本<br>--last：最后安装的包<br>--changelog：安装包的变更历史<br></code></pre></td></tr></table></figure><p>常用查询用法：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-qa</span><br><span class="hljs-deletion">-q PACHAGE</span><br><span class="hljs-deletion">-qi PACHAGE</span><br><span class="hljs-deletion">-qc PACHAGE </span><br><span class="hljs-deletion">-ql PACHAGE</span><br></code></pre></td></tr></table></figure><p> 范例：查看最近安装的包</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html">[10:24:35 root@localhost ~]#rpm -qa --last | head <br>autofs-5.1.4-74.el8.x86_64                    Wed 26 Jul 2023 04:51:17 AM EDT<br>iwl3160-firmware-25.30.13.0-103.el8.1.noarch  Sun 23 Jul 2023 11:30:26 PM EDT<br>iwl2030-firmware-18.168.6.1-103.el8.1.noarch  Sun 23 Jul 2023 11:30:26 PM EDT<br>iwl2000-firmware-18.168.6.1-103.el8.1.noarch  Sun 23 Jul 2023 11:30:26 PM EDT<br>iwl135-firmware-18.168.6.1-103.el8.1.noarch   Sun 23 Jul 2023 11:30:26 PM EDT<br>iwl105-firmware-18.168.6.1-103.el8.1.noarch   Sun 23 Jul 2023 11:30:26 PM EDT<br>iwl100-firmware-39.31.5.1-103.el8.1.noarch    Sun 23 Jul 2023 11:30:26 PM EDT<br>iwl1000-firmware-39.31.5.1-103.el8.1.noarch   Sun 23 Jul 2023 11:30:26 PM EDT<br>iwl7260-firmware-25.30.13.0-103.el8.1.noarch  Sun 23 Jul 2023 11:30:25 PM EDT<br>iwl6050-firmware-41.28.5.1-103.el8.1.noarch   Sun 23 Jul 2023 11:30:25 PM EDT<br><br></code></pre></td></tr></table></figure><h2 id="1-4-包卸载"><a href="#1-4-包卸载" class="headerlink" title="1.4 包卸载"></a>1.4 包卸载</h2><p>格式：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">rpm &#123; -e| --erase &#125; [--allmatches] [--nodeps] [noscripts] [--notriggers] [--test] PACKAGE_NAME <br></code></pre></td></tr></table></figure><h2 id="1-5-包校验"><a href="#1-5-包校验" class="headerlink" title="1.5 包校验"></a>1.5 包校验</h2><p>在安装包时，系统会检查包的来源是否合法</p><p>检查包的完整性和签名</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">rpm -k | --checksig rpmfile<br></code></pre></td></tr></table></figure><p>在检查包的来源和完整性前，必须导入所需要公钥</p><p><img src="image-20230726223314137.png" alt="image-20230726223314137"></p><h2 id="1-6-数据库维护"><a href="#1-6-数据库维护" class="headerlink" title="1.6 数据库维护"></a>1.6 数据库维护</h2><p>rpm包安装时生成的信息，都放在rpm数据库中</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">/var/lib/rpm<br></code></pre></td></tr></table></figure><p>可以重建数据库</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">rpm &#123;--initdb|--rebuiddb&#125;<br>initdb：初始化，如果事先不存在数据库，则新建，否则，不执行任何操作<br>rebuild：重建已经安装的包头的数据库索引文件<br></code></pre></td></tr></table></figure><h1 id="2-yum和dnf"><a href="#2-yum和dnf" class="headerlink" title="2 yum和dnf"></a>2 yum和dnf</h1><p>Centos 系统上使用yum、dnf，解决了rpm包依赖问题</p><h2 id="2-1-yum-dnf工作原理"><a href="#2-1-yum-dnf工作原理" class="headerlink" title="2.1 yum/dnf工作原理"></a>2.1 yum/dnf工作原理</h2><p>yum/dnf 是基于C/S模式</p><ul><li>yum 服务器存放rpm包相关包的元数据</li><li>yum客户端访问yum服务器进行安装或查询等</li></ul><p>yum实现过程</p><p>先在yum服务器上创建yum repository（仓库），在仓库中事先存储了众多rpm包，以及包的相关的元数据文件（放于特定目录repodata下），当yum客户端利用yum/dnf工具进行安装包时，会自动下载repodata中的元数据，查询元数据是否存在相关包以及依赖关系，自动从仓库中找到相关包下载并安装。</p><h2 id="2-2-yum客户端配置"><a href="#2-2-yum客户端配置" class="headerlink" title="2.2 yum客户端配置"></a>2.2 yum客户端配置</h2><p>yum客户端配置文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/yum</span>.conf<span class="hljs-comment">##为所有仓库提供公共配置</span><br><span class="hljs-regexp">/etc/yum</span>.repos.d/*.repo <span class="hljs-comment">##为每个仓库提供配置文件</span><br></code></pre></td></tr></table></figure><p>帮助参考：man 5 yum.conf</p><p>yum服务器的baseurl形式：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">file:<span class="hljs-regexp">//</span> 本地路径<br>http:<span class="hljs-regexp">//</span><br>https:<span class="hljs-regexp">//</span><br>ftp:<span class="hljs-regexp">//</span><br></code></pre></td></tr></table></figure><p>注意：yum仓库指向的路径一定必须是repodata目录所在目录</p><p>相关变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum的repo配置文件中可用的变量：<br><span class="hljs-meta prompt_">$</span><span class="language-bash">releasever：当前OS的发行版的主版本号，如：8，7，6</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"><span class="hljs-built_in">arch</span>：cpu架构，如：aarch64，i586，i686，x86_64等</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">basearch：系统基础平台：如i386，x86_64等</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">contentdir: 表示目录，比如：centos-8,centos-8</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">YUM0-<span class="hljs-variable">$YUM9</span>：自定义变量</span><br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs http">10:51:15 root@localhost ~]#cat /etc/yum.repos.d/centos8.repo <br>[BaseOS]<br>name=BaseOS<br>baseurl=https://mirrors.aliyun.com/centos/$releasever/BaseOS/$basearch/os/<br>        https://mirror.nju.edu.cn/centos/$releasever/BaseOS/$basearch/os/<br>        https://mirror.sjtu.edu.cn/centos/$releasever/BaseOS/$basearch/os/<br><br></code></pre></td></tr></table></figure><p>yum仓库配置脚本：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><code class="hljs http">#!/bin/bash<br><br><br><br>##配置yum源：centos7<br>func_yumcentos7 () &#123;<br>    cd /etc/yum.repos.d/<br>    rm -f ./*<br>    cat &gt; /etc/yum.repos.d/centos7.repo &lt;&lt;EOF<br>[centos7]<br>name=centos7<br>baseurl=file:///mnt/cdrom<br>        https://mirrors.aliyun.com/centos/\$releasever/os/\$basearch/<br>           https://mirrors.cloud.tencent.com/centos/\$releasever/os/\$basearch/<br>gpgcheck=0<br>enabled=1<br><br>##[epel]<br>##name=EPEL<br>##baseurl=https://mirror.tuna.tsinghua.edu.cn/epel/\$releasever/Everything/\$basearch<br>##                https://mirrors.cloud.tencent.com/epel/\$releasever/Everything/\$basearch<br>##        https://mirrors.huaweicloud.com/epel/\$releasever/Everything/\$basearch<br>##        https://mirrors.aliyun.com/epel/\$releasever/Everything/\$basearch<br>##gpgcheck=0<br>##enabled=1<br>##<br>##[extras]<br>##name=extras<br>##baseurl=https://mirror.tuna.tsinghua.edu.cn/centos/\$releasever/extras/\$basearch/os<br>##        https://mirrors.cloud.tencent.com/centos/\$releasever/extras/\$basearch/os<br>##        https://mirrors.huaweicloud.com/centos/\$releasever/extras/\$basearch/os<br>##        https://mirrors.aliyun.com/centos/\$releasever/extras/\$basearch/os<br>##gpgcheck=0<br>##enabled=1<br>##<br>##[PowerTools]<br>##name=CentOS- - PowerTools - mirrors.aliyun.com<br>##baseurl=https://mirror.tuna.tsinghua.edu.cn/centos/\$releasever/PowerTools/\$basearch/os/<br>##        https://mirrors.cloud.tencent.com/centos/\$releasever/PowerTools/\$basearch/os/<br>##        https://mirrors.huaweicloud.com/centos/\$releasever/PowerTools/\$basearch/os/<br>##        https://mirrors.aliyun.com/centos/\$releasever/PowerTools/\$basearch/os/<br>##gpgcheck=0<br>##enabled=1<br>##gpgkey=https://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official<br>EOF<br>&#125;<br><br><br><br><br><br>##配置yum源：centos8<br>func_yumcentos8 () &#123;<br>    cd /etc/yum.repos.d/<br>    rm -f ./*<br>    cat &gt; centos8.repo &lt;&lt;EOF<br>[BaseOS]<br>name=BaseOS<br>baseurl=https://mirrors.aliyun.com/centos/\$releasever/BaseOS/\$basearch/os/<br>        https://mirror.nju.edu.cn/centos/\$releasever/BaseOS/\$basearch/os/<br>        https://mirror.sjtu.edu.cn/centos/\$releasever/BaseOS/\$basearch/os/<br>gpgcheck=0<br>##enabled=1<br><br>[AppStream]<br>name=AppStream<br>baseurl=https://mirrors.aliyun.com/centos/\$releasever/AppStream/\$basearch/os/<br>        https://mirror.nju.edu.cn/centos/\$releasever/AppStream/\$basearch/os/<br>        https://mirror.sjtu.edu.cn/centos/\$releasever/AppStream/\$basearch/os/<br>gpgcheck=0<br>##enabled=<br>[epel]<br>name=EPEL<br>baseurl=https://mirror.tuna.tsinghua.edu.cn/epel/\$releasever/Everything/\$basearch<br>        https://mirrors.cloud.tencent.com/epel/\$releasever/Everything/\$basearch<br>        https://mirrors.huaweicloud.com/epel/\$releasever/Everything/\$basearch<br>        https://mirrors.aliyun.com/epel/\$releasever/Everything/\$basearch<br>gpgcheck=0<br>enabled=1<br><br>[extras]<br>name=extras<br>baseurl=https://mirrors.sdu.edu.cn/centos/\$releasever/extras/\$basearch/os<br>        https://mirror.sjtu.edu.cn/centos/\$releasever/extras/\$basearch/os<br>        https://mirrors.aliyun.com/centos/\$releasever/extras/\$basearch/os<br>gpgcheck=0<br>enabled=1<br><br>[PowerTools]<br>name=Powfunc_yumrockyerTools<br>baseurl=https://mirrors.sdu.edu.cn/centos/\$releasever/PowerTools/\$basearch/os<br>        https://mirror.sjtu.edu.cn/centos/\$releasever/PowerTools/\$basearch/os<br>        https://mirrors.aliyun.com/centos/\$releasever/PowerTools/\$basearch/os<br>gpgcheck=0<br>enabled=1<br>gpgkey=https://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official<br>EOF<br><br>&#125;<br><br><br>##配置yum源：rocky<br>func_yumrocky () &#123; <br>    cd /etc/yum.repos.d/<br>    rm -f ./*    <br>    cat &gt; rocky.repo &lt;&lt;EOF<br>[BaseOS]<br>name=BaseOS<br>baseurl=https://mirrors.aliyun.com/rockylinux/\$releasever/BaseOS/\$basearch/os/<br>        https://mirror.nju.edu.cn/rocky/\$releasever/BaseOS/\$basearch/os/<br>        https://mirror.sjtu.edu.cn/rocky/\$releasever/BaseOS/\$basearch/os/<br>gpgcheck=0<br>##enabled=1<br><br>[AppStream]<br>name=AppStream<br>baseurl=https://mirrors.aliyun.com/rockylinux/\$releasever/AppStream/\$basearch/os/<br>        https://mirror.nju.edu.cn/rocky/\$releasever/AppStream/\$basearch/os/<br>        https://mirror.sjtu.edu.cn/rocky/\$releasever/AppStream/\$basearch/os/<br>gpgcheck=0<br>##enabled=<br>[epel]<br>name=EPEL<br>baseurl=https://mirror.tuna.tsinghua.edu.cn/epel/\$releasever/Everything/\$basearch<br>        https://mirrors.cloud.tencent.com/epel/\$releasever/Everything/\$basearch<br>        https://mirrors.huaweicloud.com/epel/\$releasever/Everything/\$basearch<br>        https://mirrors.aliyun.com/epel/\$releasever/Everything/\$basearch<br>gpgcheck=0<br>enabled=1<br><br>[extras]<br>name=extras<br>baseurl=https://mirrors.sdu.edu.cn/rocky/\$releasever/extras/\$basearch/os<br>        https://mirror.sjtu.edu.cn/rocky/\$releasever/extras/\$basearch/os<br>        https://mirrors.aliyun.com/rockylinux/\$releasever/extras/\$basearch/os<br>gpgcheck=0<br>enabled=1<br><br>[PowerTools]<br>name=PowerTools<br>baseurl=https://mirrors.sdu.edu.cn/rocky/\$releasever/PowerTools/\$basearch/os<br>        https://mirror.sjtu.edu.cn/rocky/\$releasever/PowerTools/\$basearch/os<br>        https://mirrors.aliyun.com/rockylinux/\$releasever/PowerTools/\$basearch/os<br>gpgcheck=0<br>enabled=1<br>gpgkey=https://mirrors.aliyun.com/rockylinux/RPM-GPG-KEY-rockyofficial<br>EOF<br><br>&#125;<br><br><br>##配置apt源：ubuntu<br>func_aptubuntu () &#123;<br>    ##20.04版本apt<br>    cat &gt; /etc/apt/sources.list &lt;&lt;EOF<br>deb https://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse<br>deb-src https://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse<br><br>deb https://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse<br>deb-src https://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse<br><br>deb https://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse<br>deb-src https://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse<br><br># deb https://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse<br># deb-src https://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse<br><br>deb https://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse<br>deb-src https://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse<br>EOF<br><br>&#125;<br><br>##配置yum源,根据不同的操作系统配置yum源<br>func_yum () &#123;<br>    . /etc/os-release<br>    if [ $ID = &#x27;rocky&#x27; ]; then<br>        echo OS version is $ID<br>        func_yumrocky <br>    elif [ $ID = &#x27;centos&#x27; ]; then<br>        if [ $VERSION_ID = &#x27;8&#x27; ]; then<br>            echo OS version is $ID-$VERSION_ID<br>            func_yumcentos8<br>        elif [ $VERSION_ID = &#x27;7&#x27; ]; then<br>            echo OS version is $ID-$VERSION_ID<br>            func_yumcentos7<br>        else<br>            echo &quot;centos 其他版本不支持&quot;<br>        fi<br>    elif [ $ID = &#x27;ubuntu&#x27; ]; then<br>        echo OS version is $ID-$VERSION_ID<br>        func_aptubuntu<br>        apt update<br>        <br>    else<br>        echo &quot;不支持OS&quot;<br>    fi    <br>&#125;<br><br>func_yum<br><br></code></pre></td></tr></table></figure><h2 id="2-3-yum命令"><a href="#2-3-yum命令" class="headerlink" title="2.3 yum命令"></a>2.3 yum命令</h2><p>yum命令语法：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">yum [options] [command] [package ...]<br></code></pre></td></tr></table></figure><p>yum的命令行选项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">-y#自动回答为“yes”<br>-q#静默模式<br>--nogpgcheck#禁止进行gpg check<br>--enablerepo=repoidglob#临时启用此处指定的repo，支持通配符，如：*<br>--disenablerepo=repoidglob#临时禁用此处指定的repo，和上面语句同时使用，放在后面的生效<br></code></pre></td></tr></table></figure><h3 id="2-3-1-显示仓库列表"><a href="#2-3-1-显示仓库列表" class="headerlink" title="2.3.1 显示仓库列表"></a>2.3.1 显示仓库列表</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">yum repolist [all | enabled |disabled]<br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[11:15:13 root@localhost ~]#yum repolist all<br>repo id                                           repo name                                                      status<br>AppStream                                         AppStream                                                      enabled<br>BaseOS                                            BaseOS                                                         enabled<br>PowerTools                                        Powfunc_yumrockyerTools                                        enabled<br>epel                                              EPEL                                                           enabled<br>extras                                            extras                                                         enabled<br></code></pre></td></tr></table></figure><p>范例：显示仓库的详细信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell">[23:29:13 root@localhost data]#yum repolist -v<br>Loaded plugins: builddep, changelog, config-manager, copr, debug, debuginfo-install, download, generate_completion_cache, groups-manager, needs-restarting, playground, repoclosure, repodiff, repograph, repomanage, reposync, system-upgrade<br>YUM version: 4.7.0<br>cachedir: /var/cache/dnf<br>BaseOS                                                                                   17 kB/s | 4.3 kB     00:00    <br>AppStream                                                                                23 kB/s | 4.3 kB     00:00    <br>EPEL                                                                                     11 kB/s | 4.7 kB     00:00    <br>extras                                                                                  9.0 kB/s | 3.1 kB     00:00    <br>PowerTools                                                                               12 kB/s | 4.8 kB     00:00    <br>Repo-id            : AppStream<br>Repo-name          : AppStream<br>Repo-revision      : 8.8<br>Repo-distro-tags      : [cpe:/o:rocky:rocky:8]:  ,  , 8, L, R, c, i, k, n, o, u, x, y<br>Repo-updated       : Fri 21 Jul 2023 11:13:37 AM CST<br>Repo-pkgs          : 7,576<br>Repo-available-pkgs: 6,129<br>Repo-size          : 13 G<br>Repo-baseurl       : https://mirrors.aliyun.com/rockylinux/8/AppStream/x86_64/os/,<br>                   : https://mirror.nju.edu.cn/rocky/8/AppStream/x86_64/os/,<br>                   : https://mirror.sjtu.edu.cn/rocky/8/AppStream/x86_64/os/<br>Repo-expire        : 172,800 second(s) (last: Wed 26 Jul 2023 11:10:59 PM CST)<br>Repo-filename      : /etc/yum.repos.d/rocky.repo<br><br>Repo-id            : BaseOS<br>Repo-name          : BaseOS<br>Repo-revision      : 8.8<br>Repo-distro-tags      : [cpe:/o:rocky:rocky:8]:  ,  , 8, L, R, c, i, k, n, o, u, x, y<br>Repo-updated       : Fri 21 Jul 2023 03:04:21 PM CST<br>Repo-pkgs          : 1,857<br>Repo-available-pkgs: 1,855<br><br></code></pre></td></tr></table></figure><h3 id="2-3-2-显示程序包"><a href="#2-3-2-显示程序包" class="headerlink" title="2.3.2 显示程序包"></a>2.3.2 显示程序包</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http">yum list<br>yum list [all | glob_exp1] [glob_exp2] ...<br>yum list &#123;available | installed | updates&#125; [glob_exp1] [...]<br><br></code></pre></td></tr></table></figure><p>范例：只查看已经安装的包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[23:35:52 root@localhost data]#yum list installed | head<br>Installed Packages<br>NetworkManager.x86_64                1:1.40.16-1.el8                  @anaconda <br>NetworkManager-libnm.x86_64          1:1.40.16-1.el8                  @anaconda <br>NetworkManager-team.x86_64           1:1.40.16-1.el8                  @anaconda <br>NetworkManager-tui.x86_64            1:1.40.16-1.el8                  @anaconda <br>acl.x86_64                           2.2.53-1.el8.1                   @anaconda <br>at.x86_64                            3.1.20-12.el8                    @BaseOS   <br>audit.x86_64                         3.0.7-4.el8                      @anaconda <br>audit-libs.x86_64                    3.0.7-4.el8                      @anaconda <br>authselect.x86_64                    1.2.6-1.el8                      @anaconda <br><br></code></pre></td></tr></table></figure><p>范例：查看可以升级的包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[23:37:35 root@localhost data]#yum list updates|head -n5<br>Last metadata expiration check: 0:06:58 ago on Wed 26 Jul 2023 11:30:55 PM CST.<br>Available Upgrades<br>NetworkManager.x86_64               1:1.40.16-3.el8_8                  BaseOS   <br>NetworkManager-libnm.x86_64         1:1.40.16-3.el8_8                  BaseOS   <br>NetworkManager-team.x86_64          1:1.40.16-3.el8_8                  BaseOS  <br></code></pre></td></tr></table></figure><h3 id="2-3-3-安装程序包"><a href="#2-3-3-安装程序包" class="headerlink" title="2.3.3 安装程序包"></a>2.3.3 安装程序包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install package1 package2 package3 ...<br>yum reinstall package1 package2 package3 ...  ##重新安装<br>--downloadnoly ##只下载相关默认包至/var/cache/yum/x86_64/7/目录下，而不执行<br>install/upgrade/erase<br>--downloaddir=&lt;path&gt;, --destdir=&lt;path&gt;  ##--downloaddir指定下载的目录，如果不存在自动创建<br></code></pre></td></tr></table></figure><h4 id="2-3-3-1-安装epel源包"><a href="#2-3-3-1-安装epel源包" class="headerlink" title="2.3.3.1 安装epel源包"></a>2.3.3.1 安装epel源包</h4><p>范例：安装epel源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">[11:46:36 root@localhost ~]#yum install -y epel-release<br>[11:46:49 root@localhost ~]#yum install -y sl<br>[11:47:03 root@localhost ~]#rpm -ql sl<br>/usr/bin/sl<br>/usr/lib/.build-id<br>/usr/lib/.build-id/cb<br>/usr/lib/.build-id/cb/664a85114a0cb25cf0460ada9ed86a7b128658<br>/usr/share/doc/sl<br>/usr/share/doc/sl/LICENSE<br>/usr/share/doc/sl/README.ja.md<br>/usr/share/doc/sl/README.md<br>/usr/share/man/ja/man1/sl.1.ja.gz<br>/usr/share/man/man1/sl.1.gz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">运行安装sl程序，可以看到火车</span><br>[11:47:14 root@localhost ~]#sl -a<br></code></pre></td></tr></table></figure><p><img src="image-20230726234925724.png" alt="image-20230726234925724"></p><p>2.3.3.2 只下载相关依赖包，而不安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#/data/httpd/目录如果不存在会自动创建</span></span><br>[11:49:21 root@localhost ~]#yum -y install --downloadonly --downloaddir=/data/http httpd<br>11:53:03 root@localhost ~]#ls /data/http/<br>apr-1.6.3-12.el8.x86_64.rpm<br>apr-util-1.6.1-6.el8.x86_64.rpm<br>apr-util-bdb-1.6.1-6.el8.x86_64.rpm<br>apr-util-openssl-1.6.1-6.el8.x86_64.rpm<br>centos-logos-httpd-85.8-2.el8.noarch.rpm<br>httpd-2.4.37-43.module_el8.5.0+1022+b541f3b1.x86_64.rpm<br>httpd-filesystem-2.4.37-43.module_el8.5.0+1022+b541f3b1.noarch.rpm<br>httpd-tools-2.4.37-43.module_el8.5.0+1022+b541f3b1.x86_64.rpm<br>mailcap-2.1.48-3.el8.noarch.rpm<br>mod_http2-1.15.7-3.module_el8.4.0+778+c970deab.x86_64.rpm<br><br></code></pre></td></tr></table></figure><h3 id="2-3-4-卸载程序包"><a href="#2-3-4-卸载程序包" class="headerlink" title="2.3.4 卸载程序包"></a>2.3.4 卸载程序包</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">yum remove | erase PACKAGE1 PACKAGE2 ...<br></code></pre></td></tr></table></figure><h3 id="2-3-5-升级和降级"><a href="#2-3-5-升级和降级" class="headerlink" title="2.3.5 升级和降级"></a>2.3.5 升级和降级</h3><p>检查可升级：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">yum check-update<br></code></pre></td></tr></table></figure><p>升级和降级</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum update | upgrade PACKAGE1 PACKAGE2 ...<br>yum upgrade-minimal  #最小化升级<br>yum downgrade  PACKAGE1 PACKAGE2 ... ##降级<br></code></pre></td></tr></table></figure><h3 id="2-3-6-查询"><a href="#2-3-6-查询" class="headerlink" title="2.3.6 查询"></a>2.3.6 查询</h3><p>查看程序包information</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum info  [...]<br></code></pre></td></tr></table></figure><p>查看指定的特性（或者某文件）是由哪个程序包所提供：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">yum provides | whatprovides [feature1] [...]<br></code></pre></td></tr></table></figure><p>注意：要写全路径，而不只是文件名，否则有可能无法查询到</p><h3 id="2-3-7仓库缓存"><a href="#2-3-7仓库缓存" class="headerlink" title="2.3.7仓库缓存"></a>2.3.7仓库缓存</h3><p>清除目录/var/cache/yum缓存</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">yum clean [package | metadata | expire-cache |rpmdb | plugins | all]<br></code></pre></td></tr></table></figure><p>构建缓存：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">yum makecache<br></code></pre></td></tr></table></figure><h3 id="2-3-8-查看yum事务历史"><a href="#2-3-8-查看yum事务历史" class="headerlink" title="2.3.8 查看yum事务历史"></a>2.3.8 查看yum事务历史</h3><p>yum执行安装卸载命令会记录到相关日志中</p><p>日志文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">Centos 7以前版本日志</span><br>/var/log/yum.log<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Centos 8版本日志</span><br>/var/log/dnf.rpm.log<br>/var/log/dnf.log<br></code></pre></td></tr></table></figure><p>日志命令</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">yum history [info | list| package-lsit|summary |package-info|.....]<br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">[22:22:20 root@localhost ~]#yum history<br>Repository epel is listed more than once in the configuration<br>ID     | Command line                                                      | Date and time    | Action(s)      | Altered<br>------------------------------------------------------------------------------------------------------------------------<br>     6 | install -y sl                                                     | 2023-07-26 11:47 | Install        |    1   <br>     5 | install -y epel-release                                           | 2023-07-26 11:46 | Install        |    1 EE<br>     4 | -y install autofs vim-enhanced tcpdump autofs chrony lrzsz tree t | 2023-07-26 11:15 | Install        |   48   <br>     3 | -y install vim                                                    | 2023-07-26 11:03 | Install        |    4   <br>     2 | -y install autofs                                                 | 2023-07-26 04:51 | Install        |    1   <br>     1 |                                                                   | 2023-07-23 23:29 | Install        |  380 EE<br>[22:22:36 root@localhost ~]#yum history info 6<br>Repository epel is listed more than once in the configuration<br>Transaction ID : 6<br>Begin time     : Wed 26 Jul 2023 11:47:03 AM EDT<br>Begin rpmdb    : 431:0acc99a5de0ad6b80452bf65a3621a41e522db90<br>End time       : Wed 26 Jul 2023 11:47:03 AM EDT (0 seconds)<br>End rpmdb      : 432:72e1a9f5d81b9e8b08bcfb0ccdf6ba8dc1f05b1a<br>User           : root &lt;root&gt;<br>Return-Code    : Success<br>Releasever     : 8<br>Command Line   : install -y sl<br>Comment        : <br>Packages Altered:<br>    Install sl-5.02-1.el8.x86_64 @epel<br><br></code></pre></td></tr></table></figure><h3 id="2-3-9-安装及升级本地程序包"><a href="#2-3-9-安装及升级本地程序包" class="headerlink" title="2.3.9 安装及升级本地程序包"></a>2.3.9 安装及升级本地程序包</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">yum localinstall | install rpmfile1 [rpmfile2] ....<br>yum localupdate| update rpmfile1 [rpmfile2] ....<br></code></pre></td></tr></table></figure><h3 id="2-3-10-查看包的安全警报"><a href="#2-3-10-查看包的安全警报" class="headerlink" title="2.3.10 查看包的安全警报"></a>2.3.10 查看包的安全警报</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">yum updateinfo --sumary | --list  |--info<br></code></pre></td></tr></table></figure><h3 id="2-3-11-包组管理相关命令"><a href="#2-3-11-包组管理相关命令" class="headerlink" title="2.3.11 包组管理相关命令"></a>2.3.11 包组管理相关命令</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http">yum grouplist [hidden] [groupwildren] ...<br>yum groupinstall [group1] [group2] ...<br>yum groupupdate[group1] [group2] ...<br>yum groupremove [group1] [group2] ...<br>yum groupinfo [group1] [group2] ...<br></code></pre></td></tr></table></figure><p>范例：最小化安装的系统安装图形环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs shell">[22:23:02 root@localhost ~]#yum grouplist<br>Repository epel is listed more than once in the configuration<br>Last metadata expiration check: 11:15:43 ago on Wed 26 Jul 2023 11:14:58 AM EDT.<br>Available Environment Groups:<br>   Server with GUI<br>   Server<br>   Workstation<br>   KDE Plasma Workspaces<br>   Custom Operating System<br>   Virtualization Host<br>Installed Environment Groups:<br>   Minimal Install<br>Available Groups:<br>   Legacy UNIX Compatibility<br>   Container Management<br>   Development Tools<br>   .NET Core Development<br>   Graphical Administration Tools<br>   Headless Management<br>   Network Servers<br>   RPM Development Tools<br>   Scientific Support<br>   Security Tools<br>   Smart Card Support<br>   System Tools<br>   Fedora Packager<br>   Xfce<br>[22:30:41 root@localhost ~]#yum groupinfo &quot;Server with GUI&quot;<br>Repository epel is listed more than once in the configuration<br>Last metadata expiration check: 11:16:48 ago on Wed 26 Jul 2023 11:14:58 AM EDT.<br>Environment Group: Server with GUI<br> Description: An integrated, easy-to-manage server with a graphical interface.<br> Mandatory Groups:<br>   Container Management<br>   GNOME<br>   Hardware Monitoring Utilities<br>   Headless Management<br>   Internet Browser<br>   Server product core<br>   base-x<br>   core<br>   fonts<br>   guest-desktop-agents<br>   hardware-support<br>   input-methods<br>   multimedia<br>   networkmanager-submodules<br>   print-client<br>   standard<br> Optional Groups:<br>   Basic Web Server<br>   DNS Name Server<br>   Debugging Tools<br>   FTP Server<br>   File and Storage Server<br>   Guest Agents<br>   Infiniband Support<br>   Mail Server<br>   Network File System Client<br>   Network Servers<br>   Performance Tools<br>   Remote Desktop Clients<br>   Remote Management for Linux<br>   Virtualization Client<br>   Virtualization Hypervisor<br>   Virtualization Tools<br>   Windows File Server<br>[22:31:47 root@localhost ~]#yum groupinstall GNOME<br>Repository epel is listed more than once in the configuration<br>Last metadata expiration check: 11:17:55 ago on Wed 26 Jul 2023 11:14:58 AM EDT.<br>Dependencies resolved.<br>========================================================================================================================<br> Package                                      Arch    Version                                          Repository  Size<br>========================================================================================================================<br>Installing group/module packages:<br> ModemManager                                 x86_64  1.10.8-4.el8                                     BaseOS     923 k<br> NetworkManager-adsl                          x86_64  1:1.32.10-4.el8                                  BaseOS     144 k<br> PackageKit-command-not-found                 x86_64  1.1.12-6.el8                                     AppStream   27 k<br> PackageKit-gtk3-module                       x86_64  1.1.12-6.el8                                     AppStream   18 k<br> at-spi2-atk                                  x86_64  2.26.2-1.el8                                     AppStream   89 k<br> at-spi2-core                                 x86_64  2.28.0-1.el8                                     AppStream  169 k<br> avahi                                        x86_64  0.7-20.el8                                       BaseOS     281 k<br> baobab                                       x86_64  3.28.0-4.el8                                     AppStream  402 k<br> cheese                                       x86_64  2:3.28.0-3.el8                                   AppStream  174 k<br> chrome-gnome-shell                           x86_64  10.1-7.el8                                       AppStream   33 k<br> dconf                                        x86_64  0.28.0-4.el8                                     AppStream  108 k<br> eog                                          x86_64  3.28.4-1.el8                                     AppStream  5.2 M<br> evince                                       x86_64  3.28.4-14.el8                                    AppStream  1.6 M<br> evince-nautilus                              x86_64  3.28.4-14.el8                                    AppStream   49 k<br> file-roller                                  x86_64  3.28.1-4.el8                                     AppStream  1.3 M<br> fprintd-pam                                  x86_64  1.90.9-2.el8                                     AppStream   28 k<br> gdm                                          x86_64  1:40.0-15.el8                                    AppStream  881 k<br> gedit                                        x86_64  2:3.28.1-3.el8                                   AppStream  2.5 M<br> glib-networking                              x86_64  2.56.1-1.1.el8            <br></code></pre></td></tr></table></figure><h3 id="2-3-12-实现私有yum仓库"><a href="#2-3-12-实现私有yum仓库" class="headerlink" title="2.3.12 实现私有yum仓库"></a>2.3.12 实现私有yum仓库</h3><p>下载所有yum仓库的相关包和meta数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">CentOS 8 dnf 工具集成</span><br>dnf reposync --help #查看帮助<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#默认只下载rpm包，不下载meta数据，需要指定--download-metadata才能下载meta</span></span><br>dnf reposync --repoid=REPOID --download-meta -p /path<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">CentOS 7以前版本，reposync工具来自于yum-utils包</span><br>reposync --repoid=REPOID --download-metadata -p /path<br></code></pre></td></tr></table></figure><p>创建私有仓库：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">createrepo [options] &lt;directory&gt;<br></code></pre></td></tr></table></figure><p>范例：创建局域网的基础base的私有仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#配置仓库服务器：</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#安装apache</span></span><br>[16:48:44 root@rocky8 ~]#yum -y install httpd<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#开启apache服务</span></span><br>[16:52:20 root@rocky8 html]#systemctl enable --now httpd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#创建私有yum源仓库路径</span></span><br>[16:53:50 root@rocky8 html]#mkdir /var/www/html/centos/8 -pv<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#下载相关仓库包和元数据</span></span><br>[16:55:38 root@rocky8 html]#dnf reposync --repoid=extras --download-metadata -p /var/www/html/centos<br><br><br>[17:20:22 root@rocky8 centos]# ls extras/Packages/a<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#配置客户端仓库：</span></span><br><br></code></pre></td></tr></table></figure><h1 id="3-源码编译"><a href="#3-源码编译" class="headerlink" title="3 源码编译"></a>3 源码编译</h1><h2 id="3-1-源码编译介绍"><a href="#3-1-源码编译介绍" class="headerlink" title="3.1 源码编译介绍"></a>3.1 源码编译介绍</h2><p>程序包编译安装：</p><p>源代码–&gt;预处理–&gt;编译–&gt;汇编–&gt;链接–&gt;执行</p><p>多文件：文件中的代码之间，很可能存在跨文件依赖关系</p><p>虽然有很多开源软件将软件打包，可以直接使用，但并不是所有的源代码都打包了，如果想使用开源软件，可能需要自己下载源码包，进行编译安装。另外即使提供了包，由于生产中需要使用软件的某些特性，仍需要自行编译安装。</p><h2 id="3-2开源程序源代码的获取"><a href="#3-2开源程序源代码的获取" class="headerlink" title="3.2开源程序源代码的获取"></a>3.2开源程序源代码的获取</h2><p>项目官方自建站点：</p><p>​        apache.org</p><p>​        mariada.org</p><p>代码托管：</p><p>​        github.com</p><p>​        gitee.com</p><p>​        SourceForge.net</p><p>​        code.goole.com</p><p>3.3 编译源码的项目工具</p><ul><li><p>C、C++的源码编译：使用make项目管理器</p><p>configure脚本–&gt;makefile.in–&gt;makefile</p><p>相关开发工具：</p><p>autoconf：生成configure脚本</p><p>automake：生成makefile.in</p></li><li><p>java的源代码便利：使用maven</p></li></ul><h2 id="3-4-C语言的源代码编译安装过程"><a href="#3-4-C语言的源代码编译安装过程" class="headerlink" title="3.4 C语言的源代码编译安装过程"></a>3.4 C语言的源代码编译安装过程</h2><p>利用编译工具，通常只需要三大步骤</p><ul><li>./configure<ol><li>通过选项传递参数，指定安装路径、启用特性等；执行时会参考用户的指定以及Makefile.in文件生成Makefile</li><li>检查依赖到的外部文件，如依赖的软件包</li></ol></li><li>make 根据makefile文件，会检测依赖的环境，进行构建应用程序</li><li>make install 复制文件到相应路径</li></ul><p>注意：安装前可以通过查看README，INSTALL获取帮助</p><h3 id="3-4-1编译安装准备"><a href="#3-4-1编译安装准备" class="headerlink" title="3.4.1编译安装准备"></a>3.4.1编译安装准备</h3><p>准备：安装相关的依赖包</p><ul><li>开发工具：make，gcc</li><li>开发环境：开发库（glibc），头文件，可以安装开发包组Development Tools</li><li>软件相关依赖包</li></ul><p>生产实践：基于最小化安装的系统建议安装下面相关包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">yum -y install gcc make autoconf gcc-c++ glibc glibc-devel pcre pcre-devel openssl  openssl-devel systemd-devel zlib-devel vim lrzsz tree tmux lsof tcpdump wget net-tools iotop bc bzip2 zip unzip nfs-utils man-pages<br></code></pre></td></tr></table></figure><h3 id="3-4-2-编译安装"><a href="#3-4-2-编译安装" class="headerlink" title="3.4.2 编译安装"></a>3.4.2 编译安装</h3><p>第一步：运行configure脚本，生成makefile文件</p><p>其选项主要功能：</p><ul><li>可以指定安装位置</li><li>指定启用的特性</li></ul><p>获取其支持使用的选项</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">./configure --help<br></code></pre></td></tr></table></figure><p>选项分类：</p><ul><li><p>安装路径设定</p><p>–prefix=/PATH ：指定默认的安装位置，默认为/usr/local</p><p>–sysconfdir=/PATH：配置文件安装位置</p><p>system types：支持交叉编译</p></li><li><p>软件特性和相关指定：</p><p>Optional Feature ：可选特性</p><p>​    –disable-FEATURE</p><p>​    –enable-FEATURE[=ARG]</p><p>Optional Packages：可选包</p><p>​    –with-PackAGE[=ARG]   依赖包</p><p>​    –without-PACKAGE    禁用依赖关系</p><p>注意：通常被编译操作依赖的程序包，需要安装此程序包的“开发”组件，其包名一般类似于name-devel-VERSION</p></li></ul><p>第二步：make</p><p>第三步：make install</p><h3 id="3-4-3-安装后的配置"><a href="#3-4-3-安装后的配置" class="headerlink" title="3.4.3 安装后的配置"></a>3.4.3 安装后的配置</h3><ol><li><p>二进制程序目录导入至PATH环境变量中</p><p>编辑文件/etc/profile.d/NAME.sh</p></li></ol><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">export PATH=/PATH/TO/BIN:$PATH<br></code></pre></td></tr></table></figure><p>​    2.相关用户及文件</p><p>有些开源软件编译完成后，还需要创建相关的用户及文件</p><p>​    3.导入帮助手册</p><p>​        编辑/etc/man.config | man_db.conf文件，添加一个MANPATH</p><h3 id="3-4-4-编译安装实战案例"><a href="#3-4-4-编译安装实战案例" class="headerlink" title="3.4.4 编译安装实战案例"></a>3.4.4 编译安装实战案例</h3><h4 id="3-4-4-1-官网下载并编译安装新版httpd-2-4-57"><a href="#3-4-4-1-官网下载并编译安装新版httpd-2-4-57" class="headerlink" title="3.4.4.1 官网下载并编译安装新版httpd 2.4.57"></a>3.4.4.1 官网下载并编译安装新版httpd 2.4.57</h4><p>范例：centos8编译安装httpd-2.4.57</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#安装前准备，关闭防护墙和selinux</span></span><br>[root@centos7 ~]# systemctl disable --now firewalld<br>sed -i &#x27;/^SELINUX=/c SELINUX=disabled&#x27; /etc/selinux/config<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">1 安装相关包</span><br>[05:15:39 root@localhost ~]#yum -y install gcc make autoconf apr-devel apr-util-devel pcre-devel openssl-devel redhat-rpm-config <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2 下载并解压缩包</span><br>[05:15:39 root@localhost ~]#wget https://mirrors.aliyun.com/apache/httpd/httpd-2.4.57.tar.gz<br><br>[05:15:39 root@localhost ~]#tar xvf httpd-2.4.57.tar.gz -C /usr/local/src<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">3 配置</span><br>[05:29:13 root@localhost httpd-2.4.57]#cd /usr/local/src/httpd-2.4.57/<br>[05:29:13 root@localhost httpd-2.4.57]#./configure --prefix=/apps/httpd --sysconfdir=/etc/httpd --enable-ssl<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">4 编译并安装</span><br>[05:29:13 root@localhost httpd-2.4.57]#make -j 4 &amp;&amp; make install<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">5 配置环境</span><br>[05:29:13 root@localhost httpd-2.4.57]#echo &#x27;PATH=/apps/httpd/bin:$PATH&#x27; &gt; /etc/profile.d/httpd.sh<br>[05:29:13 root@localhost httpd-2.4.57]#. /etc/profile.d/httpd.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">6 运行</span><br>[05:29:13 root@localhost httpd-2.4.57]#apachectl start<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">7 指定用apache用户运行</span><br>[05:52:38 root@localhost httpd-2.4.57]#useradd -r -s /sbin/nologin -d /var/www -c Apache -u 48 apache<br>[05:29:13 root@localhost httpd-2.4.57]#<br>user apache<br>group apache<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">8 配置生效和验证</span><br>[05:29:13 root@localhost httpd-2.4.57]#apachectl restart<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">9 查看进程</span><br>[05:29:13 root@localhost httpd-2.4.57]#ps aux<br><br></code></pre></td></tr></table></figure><p>范例：httpd一键安装脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment">#***************************************************************************</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Author:tangbeiting</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">QQ:306876058</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Date:2023-07-28</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">FileName:http_src.sh</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">URL:https://xiaohexie00.github.io/</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Description:The <span class="hljs-built_in">test</span> script</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Copyright (C):2023 ALL rights reserved</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">**************************************************************************</span><br><br><br>HTTPD_VERSION=2.4.57<br>INSTALL_DIR=/apps/httpd<br>COLOR=&quot;echo -e  \E[32;1m&quot;<br>END=&quot;\E[0m&quot;<br>CPUS=4<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#安装前准备，关闭防护墙和selinux</span></span><br>fun_disable () &#123;<br>    systemctl disable --now firewalld<br>    sed -i &#x27;/^SELINUX=/c SELINUX=disabled&#x27; /etc/selinux/config<br><br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">##使用yum命令的httpd源码编译安装</span></span><br>fun_yum_httpd () &#123;<br>    #1 安装相关包<br>    yum -y install gcc make autoconf apr-devel apr-util-devel pcre-devel openssl-devel redhat-rpm-config <br>    rpm -q wget || yum -y install wget<br><br>    cd /usr/local/src<br>    #2 下载并解压缩包<br>    if [ ! -f httpd-$&#123;HTTPD_VERSION&#125;.tar.gz  ]; then<br>        wget https://mirrors.aliyun.com/apache/httpd/httpd-$&#123;HTTPD_VERSION&#125;.tar.gz || &#123; $COLOR&quot;下载失败，退出&quot;$END ; exit ; &#125; <br>    fi<br>    <br>    <br>    tar xf httpd-$&#123;HTTPD_VERSION&#125;.tar.gz <br><br>    <br>    #3 配置<br>    cd /usr/local/src/httpd-$&#123;HTTPD_VERSION&#125;/<br>    ./configure --prefix=$&#123;INSTALL_DIR&#125; --sysconfdir=/etc/httpd --enable-ssl<br>    #4 编译并安装<br>    make -j $CPUS  &amp;&amp;  make install<br>    #5 配置环境<br>    echo &#x27;PATH=/apps/httpd/bin:$PATH&#x27; &gt; /etc/profile.d/httpd.sh<br>    . /etc/profile.d/httpd.sh<br>    #6 运行<br>    apachectl start &amp;&amp; $COLOR&quot;安装成功&quot;$END<br>    $COLOR&quot;请访问：http://`hostname -I`&quot;$END<br><br><br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">##使用apt命令的httpd源码编译安装</span></span><br>fun_apt_httpd () &#123;<br>    #1 安装相关包<br>    apt update<br>    apt -y install gcc  autoconf  openssl-devel redhat-rpm-config wget <br>    apt -y install libapr* libpcre3* libssl-dev make <br>    ##dpkg -q wget || apt -y install wget<br><br>    cd /usr/local/src<br>    #2 下载并解压缩包<br>    if [ ! -f httpd-$&#123;HTTPD_VERSION&#125;.tar.gz  ]; then<br>        wget https://mirrors.aliyun.com/apache/httpd/httpd-$&#123;HTTPD_VERSION&#125;.tar.gz || &#123; $COLOR&quot;下载失败，退出&quot;$END;exit ; &#125; <br>    fi<br>    tar xvf httpd-$&#123;HTTPD_VERSION&#125;.tar.gz -C /usr/local/src<br><br><br>    #3 配置<br>    cd /usr/local/src/httpd-$&#123;HTTPD_VERSION&#125;/<br>    ./configure --prefix=$&#123;INSTALL_DIR&#125; --sysconfdir=/etc/httpd --enable-ssl<br>    #4 编译并安装<br>    make -j $CPUS  &amp;&amp;  make install<br>    #5 配置环境<br>    echo &#x27;PATH=/apps/httpd/bin:$PATH&#x27; &gt; /etc/profile.d/httpd.sh<br>    . /etc/profile.d/httpd.sh<br>    #6 运行<br>    apachectl start &amp;&amp; $COLOR&quot;安装成功&quot;$END<br>    $COLOR&quot;请访问：http://`hostname -I`&quot;$END<br><br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#httpd源码编译安装</span></span><br>fun_httpd_install () &#123;<br>    . /etc/os-release<br>    if [ $ID = &#x27;rocky&#x27; -o $ID = &#x27;centos&#x27; ]; then<br>        echo OS version is $ID-$VERSION_ID<br>        fun_yum_httpd<br>    elif [ $ID = &#x27;ubuntu&#x27; ]; then<br>        echo OS version is $ID-$VERSION_ID<br>        apt update<br>        fun_apt_httpd<br>    else<br>        echo &quot;不支持OS&quot;<br>    fi<br><br>&#125;<br><br>main () &#123;<br>    fun_disable<br>    fun_httpd_install<br><br>&#125;<br><br>main<br><br></code></pre></td></tr></table></figure><h1 id="4-Ubuntu软件管理"><a href="#4-Ubuntu软件管理" class="headerlink" title="4 Ubuntu软件管理"></a>4 Ubuntu软件管理</h1><p>Debian软件包通常为预编译的二进制格式扩展名“.deb”,类似rpm文件，因此安装快速无需编译软件。包文件包括特定功能或软件所必需的文件、元数和指令</p><ul><li>dpkg：package manager for debian，类似于rpm。dpkg是基于debian的系统的包管理工具。可以安装，删除和构建软件包，但无法自动下载和安装软件包或其他依赖项</li><li>apt：Advanced Packaging Tool，功能强大的软件包管理工具，甚至可升级整个Ubuntu的系统，基于客户/服务器架构，类似于yum</li></ul><h2 id="4-1-APT工作原理"><a href="#4-1-APT工作原理" class="headerlink" title="4.1 APT工作原理"></a>4.1 APT工作原理</h2><p>略</p><h2 id="4-2-dpkg包管理工具"><a href="#4-2-dpkg包管理工具" class="headerlink" title="4.2 dpkg包管理工具"></a>4.2 dpkg包管理工具</h2><p>帮助查看：man dpkg</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">安装包，不支持包的依赖</span><br>dpkg -i package.deb<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除包，不建议，不自动卸载依赖于它的包</span><br>dpkg -r package.deb<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除包（包括配置文件）</span><br>dpkg -P package.deb<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">列出当前已经安装的包，类似于rpm -qa</span><br>dpkg -l<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">显示该包的简要说明</span><br>dpkg -l package.deb<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">列出该包的状态，包括详细信息，类似rpm -qi</span><br>dpkg -s package.deb<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">列出该包所包含的文件，类似rpm -ql</span><br>dpkg -L package.deb<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">搜索包含pattern的包，类似rpm -qf</span><br>dpkg -S &lt;pattern&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置包，-a使用，配置所有没有配置的软件包</span><br>dpkg --configure package<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">列出deb包的内容，类似rpm -qpl</span><br>dpkg -c package.deb<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">解开deb包的内容</span><br>dpkg --unpack package.deb<br></code></pre></td></tr></table></figure><h2 id="4-3-apt"><a href="#4-3-apt" class="headerlink" title="4.3 apt"></a>4.3 apt</h2><p>apt 和apt-get命令对比</p><table><thead><tr><th>apt命令</th><th>被取代的命令（即apt-get）</th><th>命令的功能</th></tr></thead><tbody><tr><td>apt install</td><td>apt-get install</td><td>安装软件包</td></tr><tr><td>apt move</td><td></td><td>移除软件包</td></tr><tr><td>apt pruge</td><td></td><td>移除软件包及配置文件</td></tr><tr><td>apt update</td><td></td><td>刷新存储库索引</td></tr><tr><td>apt upgrade</td><td></td><td>升级所有可升级的软件包</td></tr><tr><td>apt autoremove</td><td></td><td>自动删除不需要的包</td></tr><tr><td>apt full-upgrade</td><td></td><td>在升级软件包时自动处理依赖关系</td></tr><tr><td>apt search</td><td>apt-cache search</td><td>搜索应用程序</td></tr><tr><td>apt show</td><td>apt-cache show</td><td>显示安装细节</td></tr></tbody></table><p>apt特有命令</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">apt list              列出包含条件的包（已安装，可以升级的）<br>apt edit-sources      编辑源列表<br></code></pre></td></tr></table></figure><p>APT包索引文件</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">/etc/apt/sources.list<br>/etc/apt/sources.list.d<br></code></pre></td></tr></table></figure><h2 id="4-4-查看仓库中的指定软件的所有版本"><a href="#4-4-查看仓库中的指定软件的所有版本" class="headerlink" title="4.4 查看仓库中的指定软件的所有版本"></a>4.4 查看仓库中的指定软件的所有版本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@ubuntu:/data# apt-cache madison vim<br>       vim | 2:8.1.2269-1ubuntu5.15 | https://mirrors.aliyun.com/ubuntu focal-security/main amd64 Packages<br>       vim | 2:8.1.2269-1ubuntu5.15 | https://mirrors.aliyun.com/ubuntu focal-updates/main amd64 Packages<br>       vim | 2:8.1.2269-1ubuntu5 | https://mirrors.aliyun.com/ubuntu focal/main amd64 Packages<br>       vim | 2:8.1.2269-1ubuntu5 | https://mirrors.aliyun.com/ubuntu focal/main Sources<br>       vim | 2:8.1.2269-1ubuntu5.15 | https://mirrors.aliyun.com/ubuntu focal-security/main Sources<br>       vim | 2:8.1.2269-1ubuntu5.15 | https://mirrors.aliyun.com/ubuntu focal-updates/main Sources<br><br></code></pre></td></tr></table></figure><h2 id="4-5-Ubuntu-建议安装的常用包"><a href="#4-5-Ubuntu-建议安装的常用包" class="headerlink" title="4.5 Ubuntu 建议安装的常用包"></a>4.5 Ubuntu 建议安装的常用包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@ubuntu:/data# apt -y install iproute2 ntpdate tcpdump telnet traceroute nfs-kernel-server nfs-common  lrzsz tree openssl libssl-dev  bash-completion libpcre3 libpcre3-dev zlib-dev gcc wget bzip2 zip unzip rsync openssh_server iotop unzip zip<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第三周作业7.21</title>
    <link href="/2023/07/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A7-21/"/>
    <url>/2023/07/21/%E7%AC%AC%E4%B8%89%E5%91%A8%E4%BD%9C%E4%B8%9A7-21/</url>
    
    <content type="html"><![CDATA[<h1 id="第三周作业"><a href="#第三周作业" class="headerlink" title="第三周作业"></a>第三周作业</h1><h2 id="1-yum私有仓库的实现及博客输出"><a href="#1-yum私有仓库的实现及博客输出" class="headerlink" title="1. yum私有仓库的实现及博客输出"></a>1. yum私有仓库的实现及博客输出</h2><h3 id="配置仓库服务器："><a href="#配置仓库服务器：" class="headerlink" title="配置仓库服务器："></a>配置仓库服务器：</h3><figure class="highlight http"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><pre><code class="hljs http">##配置仓库服务器：<br><br>##安装apache<br>[16:48:44 root@rocky8 ~]#yum -y instll httpd<br><br>##关闭防火墙<br>[16:48:44 root@rocky8 html]#systemctl disabled --now firewalld<br><br>##开启apache服务<br>[16:52:20 root@rocky8 html]#systemctl enable --now httpd<br><br>##创建私有yum源仓库路径<br>[16:53:50 root@rocky8 html]#mkdir /var/www/html/centos/8 -pv<br><br>##下载相关仓库包和元数据<br>[16:55:38 root@rocky8 html]#dnf reposync --repoid=extras --download-metadata -p /var/www/html/centos<br><br><br>[17:20:22 root@rocky8 centos]# ls extras/Packages/a<br>anaconda-live-33.16.8.8-1.el8.rocky.0.1.x86_64.rpm  anaconda-live-33.16.8.9-1.el8_8.rocky.0.1.x86_64.rpm<br><br><br></code></pre></td></tr></table></figure><h3 id="浏览器访问私有源仓库服务器："><a href="#浏览器访问私有源仓库服务器：" class="headerlink" title="浏览器访问私有源仓库服务器："></a>浏览器访问私有源仓库服务器：</h3><p><img src="image-20230721173402442.png" alt="image-20230721173402442"></p><h3 id="客户端yum源配置："><a href="#客户端yum源配置：" class="headerlink" title="客户端yum源配置："></a>客户端yum源配置：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs hhtp">##配置yum源仓库<br>[root@centos7 ~]# cat /etc/yum.repos.d/centos7.repo <br>[centos7]<br>name=centos7<br>baseurl=http://192.168.157.145/centos/extras/<br>gpgcheck=0<br>enabled=1<br><br>[extras]<br>name=extras<br>baseurl=http://192.168.157.145/centos/extras/<br>gpgcheck=0<br>enabled=1<br><br><br>[root@centos7 ~]# yum repolist<br>Loaded plugins: fastestmirror<br>Loading mirror speeds from cached hostfile<br>centos7                                                                                          | 3.1 kB  00:00:00     <br>extras                                                                                           | 3.1 kB  00:00:00     <br>(1/2): extras/primary_db                                                                         |  19 kB  00:00:00     <br>(2/2): centos7/primary_db                                                                        |  19 kB  00:00:00     <br>repo id                                                  repo name                                                status<br>centos7                                                  centos7                                                  52<br>extras                                                   extras                                                   52<br><br><br><br></code></pre></td></tr></table></figure><h3 id="使用私有源yum安装："><a href="#使用私有源yum安装：" class="headerlink" title="使用私有源yum安装："></a>使用私有源yum安装：</h3><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs http">[root@centos7 ~]# yum install -y centos-release-ceph-nautilus<br>Loaded plugins: fastestmirror<br>Loading mirror speeds from cached hostfile<br>Resolving Dependencies<br>--&gt; Running transaction check<br>---&gt; Package centos-release-ceph-nautilus.noarch 0:1.3-2.el8 will be installed<br>--&gt; Processing Dependency: centos-release-storage-common for package: centos-release-ceph-nautilus-1.3-2.el8.noarch<br>--&gt; Running transaction check<br>---&gt; Package centos-release-storage-common.noarch 0:2-2.el8 will be installed<br>--&gt; Finished Dependency Resolution<br><br>Dependencies Resolved<br><br>========================================================================================================================<br> Package                                     Arch                 Version                   Repository             Size<br>========================================================================================================================<br><span class="hljs-attribute">Installing</span>:<br> centos-release-ceph-nautilus                noarch               1.3-2.el8                 centos7               7.8 k<br>Installing for dependencies:<br> centos-release-storage-common               noarch               2-2.el8                   centos7               8.5 k<br><br>Transaction Summary<br>========================================================================================================================<br>Install  1 Package (+1 Dependent package)<br><br>Total download size: 16 k<br>Installed size: 2.3 k<br>Downloading packages:<br>(1/2): centos-release-ceph-nautilus-1.3-2.el8.noarch.rpm                                         | 7.8 kB  00:00:00     <br>(2/2): centos-release-storage-common-2-2.el8.noarch.rpm                                          | 8.5 kB  00:00:00     <br>------------------------------------------------------------------------------------------------------------------------<br>Total                                                                                   173 kB/s |  16 kB  00:00:00     <br>Running transaction check<br>Running transaction test<br>Transaction test succeeded<br>Running transaction<br>  Installing : centos-release-storage-common-2-2.el8.noarch                                                         1/2 <br>  Installing : centos-release-ceph-nautilus-1.3-2.el8.noarch                                                        2/2 <br>  Verifying  : centos-release-storage-common-2-2.el8.noarch                                                         1/2 <br>  Verifying  : centos-release-ceph-nautilus-1.3-2.el8.noarch                                                        2/2 <br><br><span class="hljs-attribute">Installed</span>:<br>  centos-release-ceph-nautilus.noarch 0:1.3-2.el8                                                                       <br><br>Dependency Installed:<br>  centos-release-storage-common.noarch 0:2-2.el8                                                                        <br><br>Complete!<br><br></code></pre></td></tr></table></figure><h2 id="2-阅读《图解TCP-IP》一书，地址：https-leon-wtf-github-io-doc-E5-9B-BE-E8-A7-A3TCPIP-pdf，有时间的可以写下读书笔记（选做）"><a href="#2-阅读《图解TCP-IP》一书，地址：https-leon-wtf-github-io-doc-E5-9B-BE-E8-A7-A3TCPIP-pdf，有时间的可以写下读书笔记（选做）" class="headerlink" title="2.阅读《图解TCP/IP》一书，地址：https://leon-wtf.github.io/doc/%E5%9B%BE%E8%A7%A3TCPIP.pdf，有时间的可以写下读书笔记（选做）"></a>2.阅读《图解TCP/IP》一书，地址：<a href="https://leon-wtf.github.io/doc/%E5%9B%BE%E8%A7%A3TCPIP.pdf%EF%BC%8C%E6%9C%89%E6%97%B6%E9%97%B4%E7%9A%84%E5%8F%AF%E4%BB%A5%E5%86%99%E4%B8%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E9%80%89%E5%81%9A%EF%BC%89">https://leon-wtf.github.io/doc/%E5%9B%BE%E8%A7%A3TCPIP.pdf，有时间的可以写下读书笔记（选做）</a></h2><h2 id="3-画图-TCP协议和三次握手及四次挥手"><a href="#3-画图-TCP协议和三次握手及四次挥手" class="headerlink" title="3.画图 TCP协议和三次握手及四次挥手"></a>3.画图 TCP协议和三次握手及四次挥手</h2><h3 id="TCP三次握手："><a href="#TCP三次握手：" class="headerlink" title="TCP三次握手："></a>TCP三次握手：</h3><p><img src="image-20230721221958935.png" alt="image-20230721221958935"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http">1、由Client A向ServerB(监听状态)发起连接请求。<br>2、serverB收到请求之后向Client A回复同意连接<br>3、收到server B的同意之后，client A向Server B发送确认建立连接<br><br></code></pre></td></tr></table></figure><h3 id="TCP四次挥手："><a href="#TCP四次挥手：" class="headerlink" title="TCP四次挥手："></a>TCP四次挥手：</h3><p><img src="image-20230721224511803.png" alt="image-20230721224511803"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs http">1、由Client A向ServerB(连接状态)发起断开连接请求。<br>2、ServerB收到请求后，回复收到请求<br>3、确认ServerB数据发送完之后，ServerB向ServerA发送同意断开连接<br>4、ServerA回复确认断开连接。<br>5、等待2倍等待时间之后，断开连接<br><br></code></pre></td></tr></table></figure><h2 id="4-静态配置网卡IP，centos-ubuntu实现"><a href="#4-静态配置网卡IP，centos-ubuntu实现" class="headerlink" title="4.静态配置网卡IP，centos/ubuntu实现"></a>4.静态配置网卡IP，centos/ubuntu实现</h2>  <figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">centos</span>:<br>##配置或修改IP<br>[root@localhost ~]# cat /etc/sysconfig/network-scripts/ifcfg-abc<br>NAME=eth0<br>DEVICE=eth0<br>ONBOOT=yes<br>BOOTPROTO=static<br>IPADDR=192.168.157.166<br>GATEWAY=192.168.157.2<br>PREFIX=24<br>DNS1=192.168.157.2<br>DNS2=100.76.76.76<br>重启网卡命令：[root@localhost ~]#systemctl restart network<br><br>centos8重启网卡命令：<br>[21:26:22 root@localhost data]#nmcli connection reload<br>[21:27:54 root@localhost data]#nmcli connection up eth0<br><br><br><br><br><span class="hljs-attribute">ubuntu</span>:<br>root@ubuntu:~# cat  /etc/netplan/00-installer-config.yaml<br># This is the network config written by &#x27;subiquity&#x27;<br><span class="hljs-attribute">network</span>:<br>  ethernets:<br>    eth0:<br>      addresses:  [192.168.157.140/24]<br>      gateway4: 192.168.157.2<br>      nameservers:<br>        addresses:<br>          - 180.76.76.76<br>          - 192.168.157.2<br>  version: 2<br>  renderer: networkd<br>root@ubuntu:~# netplan apply<br></code></pre></td></tr></table></figure><h2 id="5-实现免密登陆脚本-expect登陆远程主机，将生成的密钥写入到目标主机-expect测试远程登陆。"><a href="#5-实现免密登陆脚本-expect登陆远程主机，将生成的密钥写入到目标主机-expect测试远程登陆。" class="headerlink" title="5.实现免密登陆脚本, expect登陆远程主机，将生成的密钥写入到目标主机, expect测试远程登陆。"></a>5.实现免密登陆脚本, expect登陆远程主机，将生成的密钥写入到目标主机, expect测试远程登陆。</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs http">#!/bin/bash<br>#<br>#***************************************************************************<br>#Author:tangbeiting<br>#QQ:306876058<br>#Date:2023-07-19<br>#FileName:shfit.sh<br>#URL:https://xiaohexie00.github.io/<br>#Description:The test script<br>#Copyright (C):2023 ALL rights reserved<br>#***************************************************************************<br><br><br>##yum安装mysql,<br>func_yuminstall_mysql () &#123;<br>    yum -y install mysql<br>    <br>&#125;<br><br>##apt安装mysql<br>func_aptinstall_mysql () &#123;<br>    apt update<br>    apt -y install mysql<br> <br>&#125;<br><br>##yum安装apache<br>func_yuminstall_apache () &#123;<br>    yum -y install apache<br><br>&#125;<br><br>##apt安装apache<br>func_aptinstall_apache () &#123;<br>    apt update<br>    apt -y install apache<br><br>&#125;<br><br>##安装apache<br>func_install_apache () &#123;<br>    . /etc/os-release<br>    if [ $ID = &#x27;rocky&#x27; -o $ID = &#x27;centos&#x27; ]; then<br>        echo OS version is $ID-$VERSION_ID<br>        func_yuminstall_apache<br>    elif [ $ID = &#x27;ubuntu&#x27; ]; then<br>        echo OS version is $ID-$VERSION_ID<br>        apt update<br>        func_aptinstall_apache<br>    else<br>        echo &quot;不支持OS&quot;<br>    fi<br><br><br>&#125;<br><br><br><br>##安装mysql<br>func_install_mysql () &#123;<br>    . /etc/os-release<br>    if [ $ID = &#x27;rocky&#x27; -o $ID = &#x27;centos&#x27; ]; then<br>        echo OS version is $ID-$VERSION_ID<br>        func_yuminstall_mysql<br>    elif [ $ID = &#x27;ubuntu&#x27; ]; then<br>        echo OS version is $ID-$VERSION_ID<br>        apt update<br>        func_aptinstall_mysql<br>    else<br>        echo &quot;不支持OS&quot;<br>    fi<br><br>&#125;<br><br><br>net=192.168.157<br>user=&quot;root&quot;<br>password=&quot;123456&quot;<br>iplist=&quot;<br>145<br>146<br>166<br>66<br>&quot;<br><br>###免密远程登录<br>func_freepaswd_login () &#123;<br>    for ID in $iplist;do<br>    ip=$net.$ID<br><br>    expect &lt;&lt;EOF<br>set timeout 20<br>spawn ssh $user@$ip<br>expect &#123;<br>        &quot;yes/no&quot; &#123; send &quot;yes\n&quot;;exp_continue &#125; <br>        &quot;password&quot; &#123; send &quot;$password\n&quot; &#125; <br><br>&#125;<br><br>expect &quot;]#&quot; &#123; send &quot;useradd haha123\n&quot; &#125;<br>expect &quot;]#&quot; &#123; send &quot;exit\n&quot; &#125;<br>expect eof<br>EOF<br>    done<br>&#125;<br><br>func_quit () &#123;<br>    echo &quot;quit&quot;<br>    exit<br>&#125;<br><br>##菜单<br>func_menu () &#123;<br><br>    PS3=&quot;请选择需要执行的操作(1-4): &quot;<br>    OP1=&#x27;安装mysql 安装apache 免密登录主机 退出&#x27;<br>    select M in $OP1 ; do<br>    case $REPLY in<br>    1)<br>        func_install_mysql<br>        ;;<br>    2)<br>        func_install_apache<br>        ;;<br>    3)<br>        func_freepaswd_login<br>        ;;<br>    4)<br>        func_quit<br>        ;;<br>    esac<br>    done<br><br>&#125;<br><br>func_menu<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第二周作业</title>
    <link href="/2023/07/10/%E7%AC%AC%E4%BA%8C%E5%91%A8%E4%BD%9C%E4%B8%9A/"/>
    <url>/2023/07/10/%E7%AC%AC%E4%BA%8C%E5%91%A8%E4%BD%9C%E4%B8%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="第二周作业"><a href="#第二周作业" class="headerlink" title="第二周作业"></a>第二周作业</h1><p>题目：</p><figure class="highlight markdown"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs markdown">完成作业：<br>&quot;完成一个shell脚本，脚本的作用。<br><span class="hljs-bullet">1.</span> 运行脚本可以显示出本机的ip地址<br><span class="hljs-bullet">2.</span> 如果ip地址中有3这个数字，那么就打印出当前的系统时间<br><span class="hljs-bullet">3.</span> 如果ip地址中不含3这个数字，就批量建立用户magedu<span class="hljs-emphasis">_00, magedu_</span>01, ... magedu<span class="hljs-emphasis">_100并且所有用户同属于magedu组</span><br><span class="hljs-emphasis">4. 打印出/etc/passwd这个文件中可以登陆的用户（非/usr/sbin/nologin）</span><br><span class="hljs-emphasis">5. yum安装nginx服务，并且启动该服务</span><br><span class="hljs-emphasis">6. 一个脚本完成&quot;</span><br></code></pre></td></tr></table></figure><p>脚本代码：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs http">echo &quot;this is week two homework&quot;<br>NETPORT=`ifconfig | sed -nr &#x27;s/(ens[0-9]+).*/\1/p&#x27;`<br>echo &quot;localhost IP address is : &quot; ; ifconfig $&#123;NETPORT&#125; | sed -nr &#x27;2s/[^0-9]+([0-9.]+).*/\1/p&#x27;<br>IPADDR=`ifconfig $&#123;NETPORT&#125; | sed -nr &#x27;2s/[^0-9]+([0-9.]+).*/\1/p&#x27;`<br>echo &quot;ipaddr$IPADDR&quot;<br>sum=`echo $IPADDR | tr -d &quot; &quot; | grep -o 3`<br>##echo &quot;$sum&quot;<br>if [ $sum == 3 ]; then<br>    echo date +%F_%T ;<br>else<br>    groupadd magedu<br>    for i in &#123;00..99&#125;;do<br>        useradd -g magedu magedu_$i<br>        echo &quot;user magedu_$i create success&quot;<br>    done<br>    useradd -g magedu magedu_100<br>fi<br><br>grep -v  &quot;/usr/sbin/nologin&quot; /etc/passwd | cut -d &quot;:&quot; -f1<br>. /etc/os-release<br><br>if [ $ID = &quot;rocky&quot; -o $ID = &quot;centos&quot; ];then<br>    echo OS version is rocky or centos<br>    yum -y install nginx<br>elif [ $ID = &quot;ubuntu&quot; ];then<br>    echo OS version is Ubuntu<br>    apt update<br>    apt  -y install nginx<br>else<br>    echo &quot;不支持OS&quot;<br>    exit<br>fi<br><br></code></pre></td></tr></table></figure><h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1<br>22<br>333<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第一周作业2023-7-3</title>
    <link href="/2023/07/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A2023-7-3/"/>
    <url>/2023/07/03/%E7%AC%AC%E4%B8%80%E5%91%A8%E4%BD%9C%E4%B8%9A2023-7-3/</url>
    
    <content type="html"><![CDATA[<h1 id="a"><a href="#a" class="headerlink" title="a"></a>a</h1><h1 id="第一周作业"><a href="#第一周作业" class="headerlink" title="第一周作业"></a>第一周作业</h1><h2 id="1：图文并茂解释开源许可证-GPL、BSD、MIT、Mozilla、Apache和LGPL的区别？"><a href="#1：图文并茂解释开源许可证-GPL、BSD、MIT、Mozilla、Apache和LGPL的区别？" class="headerlink" title="1：图文并茂解释开源许可证 GPL、BSD、MIT、Mozilla、Apache和LGPL的区别？"></a>1：图文并茂解释开源许可证 GPL、BSD、MIT、Mozilla、Apache和LGPL的区别？</h2><p>GPL（GNU General Public License，通用公共许可证）是一种著佐权许可证。基于GPL的软件允许商业化销售，但不允许封闭源代码。如果对遵循GPL的软件进行任何改动和/或再次开发并予以发布，只要包含了GPL的代码，则产品必须继承GPL协议，不允许封闭源代码。</p><p>BSD协议是“宽容自由软件许可证”中的一员，在软件复用上给予了最小限度的限制。BSD协议允许作者使用该协议下的资源，将其并入私人版本的软件，该软件可使用闭源软件协议发布。</p><p>MIT是一种自由软件许可证，它源自于美国麻省理工学院（Massachusetts Institute of Technology），也被称为X11协议。与BSD协议一样，MIT协议是最早的开源协议之一。被授权人有权利使用、复制、修改、合并、出版发行、散布、再授权及贩售软件及软件的副本，可根据程序的需要修改授权条款为适当的内容。在软件和软件的所有副本中都必须包含版权声明和许可声明。</p><p>Mozilla：MPL（The Mozilla Public License）是一种弱著佐权许可证，1998年初由Netscape的 Mozilla小组为其开源软件项目设计。MPL许可证不像GPL许可证那样明确表示反对软件专利，但是却明确要求源代码的提供者不能提供已经受专利保护的源代码（除非他本人是专利权人，并书面向公众免费许可这些源代码），也不能在将这些源代码以开放源代码许可证形式许可后再去申请与这些源代码有关的专利。</p><p>Apache许可证是宽松型许可证，商业软件最爱，主要条件是要求保留原始版权和许可声明，同时原始开发者/贡献者向使用者明确授予专利权。使用者可以自由修改，进行商业使用，大型项目可以不同的条款分发，没有开源要求，修改源代码需要记录变更。</p><p>LGPL(GNU Lesser General Public License，宽通用公共许可证）是一种弱著佐权许可证，LGPL与GPL相比更为宽松，允许商业化销售，不允许封闭源代码。对遵循 LGPL的软件进行任何改动和/或再次开发并予以发布时，产品必须继承LGPL许可证，不允许封闭源代码。</p><p><img src="image-20230703141511696.png" alt="image-20230703141511696"></p><h2 id="2：安装各发行版系统的安装-centos-rockylinux-ubuntu-等-【任选1个】"><a href="#2：安装各发行版系统的安装-centos-rockylinux-ubuntu-等-【任选1个】" class="headerlink" title="2：安装各发行版系统的安装(centos, rockylinux, ubuntu, 等) 【任选1个】"></a>2：安装各发行版系统的安装(centos, rockylinux, ubuntu, 等) 【任选1个】</h2><h3 id="2-1安装ubuntu时遇到问题"><a href="#2-1安装ubuntu时遇到问题" class="headerlink" title="2.1安装ubuntu时遇到问题"></a>2.1安装ubuntu时遇到问题</h3><p>​        无法使用root账号进行远程登陆，将/etc/ssh/sshd_config文件里面设置为‘’PermitRootLogin yes”问题依旧试了多次之后，重新看视频才发现没有设置root密码，所有不能使用root账号登录。</p><h2 id="3：Linux中总结，1）如何通过一个简短的关键字-【man-k-man-k-process-】，例如process-获取相关的命令。2）通过命令的描述，选择一个命令，获取命令的man文档。【-man-top】-3）解读man文档，man分几个部分？man每个部分的解释，特别是语法部分。-lt-gt-…等各代表什么含义。4）根据语法部分-简要的写几个操作。"><a href="#3：Linux中总结，1）如何通过一个简短的关键字-【man-k-man-k-process-】，例如process-获取相关的命令。2）通过命令的描述，选择一个命令，获取命令的man文档。【-man-top】-3）解读man文档，man分几个部分？man每个部分的解释，特别是语法部分。-lt-gt-…等各代表什么含义。4）根据语法部分-简要的写几个操作。" class="headerlink" title="3：Linux中总结，1）如何通过一个简短的关键字 【man -k man -k process 】，例如process 获取相关的命令。2）通过命令的描述，选择一个命令，获取命令的man文档。【 man top】 3）解读man文档，man分几个部分？man每个部分的解释，特别是语法部分。&lt;&gt;, [] …等各代表什么含义。4）根据语法部分 简要的写几个操作。"></a>3：Linux中总结，1）如何通过一个简短的关键字 【man -k man -k process 】，例如process 获取相关的命令。2）通过命令的描述，选择一个命令，获取命令的man文档。【 man top】 3）解读man文档，man分几个部分？man每个部分的解释，特别是语法部分。&lt;&gt;, [] …等各代表什么含义。4）根据语法部分 简要的写几个操作。</h2><h3 id="3-1man-k-process"><a href="#3-1man-k-process" class="headerlink" title="3.1man -k process"></a>3.1man -k process</h3><p>会搜索所有 man 文档中名字或描述包含 process关键字的：</p><p><img src="image-20230703125728045.png" alt="image-20230703125728045"></p><h3 id="3-2-man-top"><a href="#3-2-man-top" class="headerlink" title="3.2 man top"></a>3.2 man top</h3><p><img src="image-20230703125917602-1688476747655.png" alt="image-20230703125917602"></p><h3 id="3-3-解读man文档，man分几个部分？man每个部分的解释"><a href="#3-3-解读man文档，man分几个部分？man每个部分的解释" class="headerlink" title="3.3 解读man文档，man分几个部分？man每个部分的解释"></a>3.3 解读man文档，man分几个部分？man每个部分的解释</h3><h4 id="3-3-1-man分为9个部分"><a href="#3-3-1-man分为9个部分" class="headerlink" title="3.3.1 man分为9个部分"></a>3.3.1 man分为9个部分</h4><div class="code-wrapper"><pre><code class="hljs">   1   Executable programs or shell commands   2   System calls (functions provided by the kernel)   3   Library calls (functions within program libraries)   4   Special files (usually found in /dev)   5   File formats and conventions eg /etc/passwd   6   Games   7   Miscellaneous (including macro packages and conventions), e.g. man(7), groff(7)   8   System administration commands (usually only for root)   9   Kernel routines [Non standard]</code></pre></div><ol><li><p>用户命令</p></li><li><p>系统调用</p></li><li><p>程序库函数</p></li><li><p>特殊文件帮助</p></li><li><p>文件格式</p></li><li><p>有游戏</p></li><li><p>杂项</p></li><li><p>系统管理员命令</p></li><li><p>内核运行时</p><h3 id="3-3-2-man段落帮助说明"><a href="#3-3-2-man段落帮助说明" class="headerlink" title="3.3.2 man段落帮助说明"></a>3.3.2 man段落帮助说明</h3><p>name: 名称</p><p>SYNOPSIS：用法格式及说明</p><p>DESCRIPTION:    命令详细描述</p><p>EXAMPLE：示例</p><p>[]：可选内容</p><p>&lt;&gt;：必选内容</p><p>{}：分组</p><p>…：同意内容可多次出现</p><h3 id="3-3-3-根据语法部分-简要的写几个操作"><a href="#3-3-3-根据语法部分-简要的写几个操作" class="headerlink" title="3.3.3 根据语法部分 简要的写几个操作"></a>3.3.3 根据语法部分 简要的写几个操作</h3><p>[13:50:55 root@rocky8 ~]#cat /etc/passwd | grep -E “^s|^u”<br>sync:x:5:0:sync:/sbin:/bin/sync<br>shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown<br>systemd-coredump:x:999:997:systemd Core Dumper:/:/sbin/nologin<br>systemd-resolve:x:193:193:systemd Resolver:/:/sbin/nologin<br>unbound:x:996:992:Unbound DNS resolver:/etc/unbound:/sbin/nologin<br>usbmuxd:x:113:113:usbmuxd user:/:/sbin/nologin<br>setroubleshoot:x:991:984::/var/lib/setroubleshoot:/sbin/nologin<br>saslauth:x:990:76:Saslauthd user:/run/saslauthd:/sbin/nologin<br>sssd:x:981:981:User for sssd:/:/sbin/nologin<br>sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin<br>user1:x:1002:1002::/home/user1:/bin/bash<br>user2:x:1003:1003::/home/user2:/bin/bash</p></li></ol><div class="code-wrapper"><pre><code class="hljs">    [13:51:30 root@rocky8 ~]#cat /etc/passwd | tail -5 | head -3</code></pre></div><p>xiaohexie:x:1000:1000:xiaohexie:/home/xiaohexie:/bin/bash<br>postfix:x:89:89::/var/spool/postfix:/sbin/nologin<br>xiaowangzi:x:1001:1001::/home/xiaowangzi:/bin/bash</p><h2 id="4：切换到-etc-目录，列出fstab文件的详细信息，详细解决fstab一行，每个或每几个字符的详细含义。-【cd-etc-ls-l-etc-fstab】"><a href="#4：切换到-etc-目录，列出fstab文件的详细信息，详细解决fstab一行，每个或每几个字符的详细含义。-【cd-etc-ls-l-etc-fstab】" class="headerlink" title="4：切换到/etc/目录，列出fstab文件的详细信息，详细解决fstab一行，每个或每几个字符的详细含义。 【cd /etc; ls -l /etc/fstab】"></a>4：切换到/etc/目录，列出fstab文件的详细信息，详细解决fstab一行，每个或每几个字符的详细含义。 【cd /etc; ls -l /etc/fstab】</h2><p><img src="image-20230703000614919.png" alt="image-20230703000614919"></p><p>​    </p><p>file system：硬件设备特征，一般为路径或者UUID</p><p>mount point ：挂载路径</p><p>type：文件系统类型，比如ext2、ext3、xfs等等</p><p>options ：挂载选项，一般为默认default</p><p>dump备份，0表示不备份、1表示每天都备份、2表示不定期备份</p><p>pass：表示开机过程中是否校验扇区；0表示不要校验，1表示优先校验（一般为根目录），2表示为在1级别校验完后再进行校验；</p><h2 id="5：简要说明FHS结构"><a href="#5：简要说明FHS结构" class="headerlink" title="5：简要说明FHS结构"></a>5：简要说明FHS结构</h2><p>FHS是Filesystem Hierarchy Standard（文件系统层次化标准）的缩写，FHS定义了系统中每个区域的用途、所需要的最小构成的文件和目录。比如，bin、sbin下面放的是可执行文件、dev放的是设备文件等等。</p><h2 id="6：用自己的理解总结-文件管理，用户管理，组用户，权限管理相关的命令。文件-【touch-rm-rmdir-cat-head-less-more】。用户及组：user-group-【useradd-userdel-usermode-groupadd-groupdel-groupmod-chsh-…】。权限-【chmod-chown-setfacl】”"><a href="#6：用自己的理解总结-文件管理，用户管理，组用户，权限管理相关的命令。文件-【touch-rm-rmdir-cat-head-less-more】。用户及组：user-group-【useradd-userdel-usermode-groupadd-groupdel-groupmod-chsh-…】。权限-【chmod-chown-setfacl】”" class="headerlink" title="6：用自己的理解总结 文件管理，用户管理，组用户，权限管理相关的命令。文件: 【touch/rm/rmdir/cat/head/less/more】。用户及组：user/group 【useradd/userdel/usermode; groupadd/groupdel/groupmod; chsh/…】。权限 【chmod/chown/setfacl】”"></a>6：用自己的理解总结 文件管理，用户管理，组用户，权限管理相关的命令。文件: 【touch/rm/rmdir/cat/head/less/more】。用户及组：user/group 【useradd/userdel/usermode; groupadd/groupdel/groupmod; chsh/…】。权限 【chmod/chown/setfacl】”</h2><p>touch：用于文件创建，后面跟文件名称</p><p>rm: 删除文件，-f强制删除，-r可以删除目录</p><p>rmdir：删除目录</p><p>cat：查看文件所有内容</p><p>head：显示文件内容前n行，默认10行</p><p>less：从后往前显示，翻页</p><p>more：翻页显示，从前往后</p><p>useradd：创建用户</p><p>userdel：删除用户</p><p>usermode：修改用户设置</p><p>groupadd：创建组</p><p>groupdel：删除组</p><p>groupmod：修改组属性</p><p>chsh：修改shell类型</p><p>chmod：修改文件或者文件夹的属性</p><p>chown：修改文件或者文件夹的属组/属组</p><p>setfcal：给文件或者文件夹设置特殊权限</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>免费搞网站-gitpages</title>
    <link href="/2022/05/12/%E5%85%8D%E8%B4%B9%E6%90%9E%E7%BD%91%E7%AB%99-gitpages/"/>
    <url>/2022/05/12/%E5%85%8D%E8%B4%B9%E6%90%9E%E7%BD%91%E7%AB%99-gitpages/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>完全免费的git网站搭建, 参考 <a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a></p><p>实现的目标: 本地写markdown, 推送github即可以看 github.io 域名查看网页。</p><p>实现的工具</p><ul><li><code>nodejs</code>           hexo生成网站</li><li><code>codeup.aliyun.com</code>    保存自己的博客代码</li><li><code>github.com</code>   静态页面展示 </li><li><code>vscode</code>   开发工具</li></ul><span id="more"></span><h1 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h1><p>参考  <a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a> 确保访问OK</p><p>slcnx.github.io 仓库名</p><p>准备index.html</p><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>主页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  hello world<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="20220512214701-16524035403072.png" alt="image-20220512214700115"></p><p><img src="20220512214623.png" alt="image-20220512214617755"></p><h1 id="docker推送github"><a href="#docker推送github" class="headerlink" title="docker推送github"></a>docker推送github</h1><p>新建临时目录，vscode打开, 准备以下文件</p><p>id_rsa_2048 <strong>需要linux生成或xshell生成，不可以自己生成</strong></p><p>id_rsa_2048的公钥加入到以上仓库中</p><p><img src="20220512225649.png" alt="image-20220512225647448"></p><p>Dockerfile</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">FROM</span> node:latest<br><br><br>WORKDIR /data/git <br><br><span class="hljs-built_in">ADD</span> id_rsa_2048 /root/.ssh/<br><span class="hljs-built_in">RUN</span>  chmod 600 /root/.ssh/id_rsa_2048 <br><br><span class="hljs-built_in">ADD</span> . ./<br><br><span class="hljs-comment"># 生成网页</span><br><span class="hljs-comment">#RUN npm run build </span><br><br><br><span class="hljs-comment"># 上传到GIT</span><br><br><span class="hljs-built_in">RUN</span> install -dv /data/page/ &amp;&amp; cp -a index.html /data/page/<br><br><br>WORKDIR /data/page/<br>ENV <span class="hljs-attribute">GIT_SSH_COMMAND</span>=<span class="hljs-string">&#x27;ssh -i /root/.ssh/id_rsa_2048  -o IdentitiesOnly=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no&#x27;</span><br><span class="hljs-built_in">RUN</span> git<span class="hljs-built_in"> config </span>--global init.defaultBranch main &amp;&amp; git<span class="hljs-built_in"> config </span>--global user.email <span class="hljs-string">&#x27;2192383945@qq.com&#x27;</span> &amp;&amp; git<span class="hljs-built_in"> config </span>--global user.name <span class="hljs-string">&#x27;songliangcheng&#x27;</span>  &amp;&amp; \<br>    git<span class="hljs-built_in"> config </span>--global pull.rebase <span class="hljs-literal">true</span> &amp;&amp; \<br>    git init &amp;&amp; \<br>    git remote <span class="hljs-built_in">add</span> origin git@github.com:slcnx/slcnx.github.io.git &amp;&amp; git <span class="hljs-built_in">add</span> -A &amp;&amp; git commit -m init &amp;&amp; git push --force origin main <br></code></pre></td></tr></table></figure><p>index.html</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>主页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    cat<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">D:\vscode_projects\myblog&gt;docker build -t <span class="hljs-built_in">test</span> .<br></code></pre></td></tr></table></figure><p><img src="20220512223352.png" alt="image-20220512223351323"></p><h1 id="本地生成hexo仓库"><a href="#本地生成hexo仓库" class="headerlink" title="本地生成hexo仓库"></a>本地生成hexo仓库</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g<br><br><span class="hljs-comment"># 当前目录为项目根</span><br>hexo init test1blog<br><span class="hljs-built_in">cd</span> test1blog<br><br><span class="hljs-comment"># 内容</span><br>$ <span class="hljs-built_in">ls</span><br>_config.landscape.yml  node_modules/  package-lock.json  <span class="hljs-built_in">source</span>/<br>_config.yml            package.json   scaffolds/         themes/<br></code></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p><img src="20220512224452.png" alt="image-20220512224451207"></p><h2 id="发布到github"><a href="#发布到github" class="headerlink" title="发布到github"></a>发布到github</h2><p>在以上目录 <code>test1blog</code> 中生成以下文件</p><ol><li><p><code>.dockerignore</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">node_modules/<br></code></pre></td></tr></table></figure></li><li><p><code>Dockerfile</code></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> node:latest<br><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /data/git </span><br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> id_rsa_2048 /root/.ssh/</span><br><span class="hljs-keyword">RUN</span><span class="language-bash">  <span class="hljs-built_in">chmod</span> 600 /root/.ssh/id_rsa_2048 </span><br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> . ./</span><br><br><span class="hljs-comment"># 生成网页</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm install &amp;&amp; npm run build </span><br><br><span class="hljs-comment"># 上传到GIT</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> install -dv /data/page/ &amp;&amp; <span class="hljs-built_in">cp</span> -a public /data/page/</span><br><br><span class="hljs-keyword">ARG</span> GITHUB<br><span class="hljs-keyword">ARG</span> GUSER <br><span class="hljs-keyword">ARG</span> EMAIL <br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /data/page/public/</span><br><span class="hljs-keyword">ENV</span> GIT_SSH_COMMAND=<span class="hljs-string">&#x27;ssh -i /root/.ssh/id_rsa_2048  -o IdentitiesOnly=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no&#x27;</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> git config --global init.defaultBranch main &amp;&amp; git config --global user.email <span class="hljs-variable">$EMAIL</span>  &amp;&amp; git config --global user.name <span class="hljs-variable">$GUSER</span>  &amp;&amp; \</span><br><span class="language-bash">    git config --global pull.rebase <span class="hljs-literal">true</span> &amp;&amp; \</span><br><span class="language-bash">    git init &amp;&amp; \</span><br><span class="language-bash">    git remote add origin <span class="hljs-variable">$GITHUB</span> &amp;&amp; git add -A &amp;&amp; git commit -m init &amp;&amp; git push --force origin main </span><br></code></pre></td></tr></table></figure></li><li><p><code>id_rsa_2048</code> 以上与github互通的密钥</p></li><li><p>发布</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">docker build <span class="hljs-attr">--build-arg</span> GITHUB=git@github<span class="hljs-selector-class">.com</span>:slcnx/slcnx<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.git</span> <span class="hljs-attr">--build-arg</span> EMAIL=<span class="hljs-string">&#x27;2192383945@qq.com&#x27;</span> <span class="hljs-attr">--build-arg</span> GUSER=<span class="hljs-string">&#x27;songliangcheng&#x27;</span> ./<br></code></pre></td></tr></table></figure></li></ol><p><img src="20220512225143.png" alt="image-20220512225141348"></p><h1 id="codeup一键发布"><a href="#codeup一键发布" class="headerlink" title="codeup一键发布"></a>codeup一键发布</h1><h2 id="添加codeup仓库"><a href="#添加codeup仓库" class="headerlink" title="添加codeup仓库"></a>添加codeup仓库</h2><p>将当前仓库加入到自己的codeup中</p><p><img src="20220512230442.png" alt="image-20220512230441057"></p><p>复制https地址 <a href="https://codeup.aliyun.com/5f73e5a3728df4b180fab5ca/myblog-2022-05-12.git">https://codeup.aliyun.com/5f73e5a3728df4b180fab5ca/myblog-2022-05-12.git</a></p><h2 id="初始化代码"><a href="#初始化代码" class="headerlink" title="初始化代码"></a>初始化代码</h2><p>将上面test1blog中，初始化，添加代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global init.defaultBranch main<br>git init<br>git remote add origin https://codeup.aliyun.com/5f73e5a3728df4b180fab5ca/myblog-2022-05-12.git<br></code></pre></td></tr></table></figure><p>添加文件 <code>.gitignore</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Logs</span><br>logs<br>*.<span class="hljs-built_in">log</span><br>npm-debug.log*<br>yarn-debug.log*<br>yarn-error.log*<br>lerna-debug.log*<br>.pnpm-debug.log*<br><br><span class="hljs-comment"># Diagnostic reports (https://nodejs.org/api/report.html)</span><br>report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json<br><br><span class="hljs-comment"># Runtime data</span><br>pids<br>*.pid<br>*.seed<br>*.pid.lock<br><br><span class="hljs-comment"># Directory for instrumented libs generated by jscoverage/JSCover</span><br>lib-cov<br><br><span class="hljs-comment"># Coverage directory used by tools like istanbul</span><br>coverage<br>*.lcov<br><br><span class="hljs-comment"># nyc test coverage</span><br>.nyc_output<br><br><span class="hljs-comment"># Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)</span><br>.grunt<br><br><span class="hljs-comment"># Bower dependency directory (https://bower.io/)</span><br>bower_components<br><br><span class="hljs-comment"># node-waf configuration</span><br>.lock-wscript<br><br><span class="hljs-comment"># Compiled binary addons (https://nodejs.org/api/addons.html)</span><br>build/Release<br><br><span class="hljs-comment"># Dependency directories</span><br>node_modules/<br>jspm_packages/<br><br><span class="hljs-comment"># Snowpack dependency directory (https://snowpack.dev/)</span><br>web_modules/<br><br><span class="hljs-comment"># TypeScript cache</span><br>*.tsbuildinfo<br><br><span class="hljs-comment"># Optional npm cache directory</span><br>.npm<br><br><span class="hljs-comment"># Optional eslint cache</span><br>.eslintcache<br><br><span class="hljs-comment"># Optional stylelint cache</span><br>.stylelintcache<br><br><span class="hljs-comment"># Microbundle cache</span><br>.rpt2_cache/<br>.rts2_cache_cjs/<br>.rts2_cache_es/<br>.rts2_cache_umd/<br><br><span class="hljs-comment"># Optional REPL history</span><br>.node_repl_history<br><br><span class="hljs-comment"># Output of &#x27;npm pack&#x27;</span><br>*.tgz<br><br><span class="hljs-comment"># Yarn Integrity file</span><br>.yarn-integrity<br><br><span class="hljs-comment"># dotenv environment variable files</span><br>.<span class="hljs-built_in">env</span><br>.env.development.local<br>.env.test.local<br>.env.production.local<br>.env.local<br><br><span class="hljs-comment"># parcel-bundler cache (https://parceljs.org/)</span><br>.cache<br>.parcel-cache<br><br><span class="hljs-comment"># Next.js build output</span><br>.next<br>out<br><br><span class="hljs-comment"># Nuxt.js build / generate output</span><br>.nuxt<br>dist<br><br><span class="hljs-comment"># Gatsby files</span><br>.cache/<br><span class="hljs-comment"># Comment in the public line in if your project uses Gatsby and not Next.js</span><br><span class="hljs-comment"># https://nextjs.org/blog/next-9-1#public-directory-support</span><br><span class="hljs-comment"># public</span><br><br><span class="hljs-comment"># vuepress build output</span><br>.vuepress/dist<br><br><span class="hljs-comment"># vuepress v2.x temp and cache directory</span><br>.temp<br>.cache<br><br><span class="hljs-comment"># Docusaurus cache and generated files</span><br>.docusaurus<br><br><span class="hljs-comment"># Serverless directories</span><br>.serverless/<br><br><span class="hljs-comment"># FuseBox cache</span><br>.fusebox/<br><br><span class="hljs-comment"># DynamoDB Local files</span><br>.dynamodb/<br><br><span class="hljs-comment"># TernJS port file</span><br>.tern-port<br><br><span class="hljs-comment"># Stores VSCode versions used for testing VSCode extensions</span><br>.vscode-test<br><br><span class="hljs-comment"># yarn v2</span><br>.yarn/cache<br>.yarn/unplugged<br>.yarn/build-state.yml<br>.yarn/install-state.gz<br>.pnp.*<br><br><br><span class="hljs-comment"># 静态文件</span><br>public <br></code></pre></td></tr></table></figure><h2 id="推送aliyun"><a href="#推送aliyun" class="headerlink" title="推送aliyun"></a>推送aliyun</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 状态</span><br>$ git status<br>hint: core.useBuiltinFSMonitor will be deprecated soon; use core.fsmonitor instead<br>hint: Disable this message with <span class="hljs-string">&quot;git config advice.useCoreFSMonitorConfig false&quot;</span><br>On branch main<br><br>No commits yet<br><br>Untracked files:<br>  (use <span class="hljs-string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="hljs-keyword">in</span> what will be committed)<br>        .dockerignore<br>        .github/<br>        .gitignore<br>        .npmignore<br>        Dockerfile<br>        _config.landscape.yml<br>        _config.yml<br>        db.json<br>        id_rsa_2048<br>        package-lock.json<br>        package.json<br>        scaffolds/<br>        <span class="hljs-built_in">source</span>/<br>        themes/<br>        <br><span class="hljs-comment"># 生成标志</span><br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;1111&#x27;</span> &gt;&gt; <span class="hljs-built_in">source</span>/_posts/hello-world.md<br><br><span class="hljs-comment"># 推送</span><br>git add . <br>git commit -m init<br><br>$ git push origin main<br>Enumerating objects: 122, <span class="hljs-keyword">done</span>.<br>Counting objects: 100% (122/122), <span class="hljs-keyword">done</span>.<br>Delta compression using up to 8 threads<br>Compressing objects: 100% (110/110), <span class="hljs-keyword">done</span>.<br>Writing objects: 100% (122/122), 580.00 KiB | 7.34 MiB/s, <span class="hljs-keyword">done</span>.<br>Total 122 (delta 0), reused 0 (delta 0), pack-reused 0<br>To https://codeup.aliyun.com/5f73e5a3728df4b180fab5ca/myblog-2022-05-12.git<br> * [new branch]      main -&gt; main<br><br></code></pre></td></tr></table></figure><h2 id="aliyun验证"><a href="#aliyun验证" class="headerlink" title="aliyun验证"></a>aliyun验证</h2><p><img src="20220512231059.png" alt="image-20220512231058218"></p><h2 id="添加流水线"><a href="#添加流水线" class="headerlink" title="添加流水线"></a>添加流水线</h2><p><img src="20220512231120.png" alt="image-20220512231118465"></p><p><img src="20220512231146.png" alt="image-20220512231145367"></p><p><img src="20220513000840.png" alt="image-20220513000838863"></p><p><img src="20220512231255.png" alt="image-20220512231253578"></p><p><img src="20220512231628.png" alt="image-20220512231626849"></p><p>删除kubernetes发布</p><p>保存并运行</p><p><img src="20220512231324.png" alt="image-20220512231322519"></p><h2 id="查看运行日志"><a href="#查看运行日志" class="headerlink" title="查看运行日志"></a>查看运行日志</h2><p><img src="20220512232021.png" alt="image-20220512232019242"></p><h2 id="查看github进度"><a href="#查看github进度" class="headerlink" title="查看github进度"></a>查看github进度</h2><p><img src="20220512232122.png" alt="image-20220512232121239"></p><h2 id="查看页面"><a href="#查看页面" class="headerlink" title="查看页面"></a>查看页面</h2><p>当进度为</p><p><img src="20220512232141.png" alt="image-20220512232140087"></p><p><img src="20220512232151.png" alt="image-20220512232150142"></p><h1 id="开发方式"><a href="#开发方式" class="headerlink" title="开发方式"></a>开发方式</h1><h2 id="准备vscode"><a href="#准备vscode" class="headerlink" title="准备vscode"></a>准备vscode</h2><p>在vscode中加载 codeup的仓库</p><p>安装插件 typora  <strong>安装后需要重启vscode</strong></p><p><img src="20220512231737.png" alt="image-20220512231735959"></p><h2 id="本地开发"><a href="#本地开发" class="headerlink" title="本地开发"></a>本地开发</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># clone 代码</span><br><br><span class="hljs-comment"># 安装依赖</span><br>npm install<br><br><span class="hljs-comment"># 运行服务</span><br>npx hexo server<br></code></pre></td></tr></table></figure><blockquote><p><code>npx command</code> 相当于加载了<code>$(npm bin)</code> 目录到环境变量, 后面的命令可以执行</p></blockquote><p>通过本地调试出合理的界面, 推送aliyun, 就可以一键发布</p><h2 id="本地添加文章"><a href="#本地添加文章" class="headerlink" title="本地添加文章"></a>本地添加文章</h2><p>脚本 <code>addarticle.sh</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">echo -ne <span class="hljs-string">&quot;Enter a \033[1;31mtitle\033[0m for your blog: &quot;</span>; read title<br>[ $? -ne <span class="hljs-number">0</span> ] &amp;&amp; echo <span class="hljs-string">&#x27;exit&#x27;</span> &amp;&amp; sleep <span class="hljs-number">3</span> &amp;&amp; <span class="hljs-keyword">exit</span> <span class="hljs-number">1</span><br>[ -z <span class="hljs-string">&quot;$title&quot;</span> ] &amp;&amp; echo title must be exists. &amp;&amp; sleep <span class="hljs-number">3</span> &amp;&amp; <span class="hljs-keyword">exit</span> <span class="hljs-number">1</span><br>npx hexo new <span class="hljs-string">&quot;$title&quot;</span><br><br>start $(readlink -f .)<span class="hljs-regexp">/source/</span>_posts<br></code></pre></td></tr></table></figure><p>生成文章, 运行脚本</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">第1个文章</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-05-12 23:27:58</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h2 id="个性化页面展示"><a href="#个性化页面展示" class="headerlink" title="个性化页面展示"></a>个性化页面展示</h2><p><a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a></p><ul><li><code>hexo站点配置</code></li><li><code>fluid</code>主题配置</li><li><code>阅读量</code></li><li><code>评论功能</code></li></ul><p>例如修改标题 <code>_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">&quot;5-12 23:30&quot;</span><br><span class="hljs-comment"># ...</span><br><br><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 处理typora相对路径</span><br>npm install hexo-typora-asset --registry https://registry.npmjs.org --save<br></code></pre></td></tr></table></figure><p>typora中的配置</p><p><img src="image-20220513092438970.png" alt="image-20220513092438970"></p><p>重启 <code>npx hexo server</code></p><p><img src="20220512233119.png" alt="image-20220512233117729"></p><h2 id="文章默认页面-可选"><a href="#文章默认页面-可选" class="headerlink" title="文章默认页面(可选)"></a>文章默认页面(可选)</h2><p><a href="https://hexo.io/docs/writing#Scaffolds">https://hexo.io/docs/writing#Scaffolds</a></p><p>当我们写大量的文章,发现主页不应该显示所有内容,需要readmore, readmore之前有1小段简介</p><p>如下, 上面的nginx文章会<code>显示标题,简介,readmore</code>, 而下面的hello world就显示所有, 这两者区别在于</p><p>后者,默认</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">第1个文章</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-05-12 23:27:58</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>前者</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">第1个文章</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-05-12 23:27:58</span><br><span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">hello</span><br><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">nginx</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-comment"># 背景</span><br><br><span class="hljs-string">这篇讲解如何编译安装nginx,</span> <span class="hljs-string">优化nginx</span><br><br><span class="hljs-string">&lt;!--more--&gt;</span><br></code></pre></td></tr></table></figure><p><img src="20220512234116.png" alt="image-20220512234114962"></p><p>要实现每个文章创建均生成nginx这样的模板, 编辑 <code>scaffolds/post.md</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> &#123;&#123; <span class="hljs-string">title</span> &#125;&#125;<br><span class="hljs-attr">date:</span> &#123;&#123; <span class="hljs-string">date</span> &#125;&#125;<br><span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <br><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> <br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-comment"># 背景</span><br><br><span class="hljs-string">&lt;!--more--&gt;</span><br></code></pre></td></tr></table></figure><p>现在运行脚本 <code>addarticle.sh</code> 添加<strong>第2个文章</strong></p><p>网页已经达到效果</p><p><img src="20220512234553.png" alt="image-20220512234551537"></p><h2 id="准备一个主题-fluid"><a href="#准备一个主题-fluid" class="headerlink" title="准备一个主题 fluid"></a>准备一个主题 fluid</h2><blockquote><p>使用此主题后, 不需要前面的文章默认页面, 每个页面不需要加<code>&lt;!--more--&gt;</code> 主题会自动抽取前多少个字符,作为描述的.</p></blockquote><p>Fluid主题 <a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ git submodule add https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/fluid-dev/</span>hexo-theme-fluid.git themes/fluid<br></code></pre></td></tr></table></figure><p>编辑 <code>_config.yml</code></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean"># Extensions<br>## Plugins: https:<span class="hljs-comment">//hexo.io/plugins/</span><br>## Themes: https:<span class="hljs-comment">//hexo.io/themes/</span><br>theme: fluid<br></code></pre></td></tr></table></figure><p>重启 <code>npx hexo server</code></p><p><img src="20220512235039.png" alt="image-20220512235038001"></p><p>配置主题 <code>fluid</code> 需要准备一个文件 <code>_config.主题名.yml</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp themes<span class="hljs-regexp">/fluid/</span>_config.yml _config.fluid.yml<br></code></pre></td></tr></table></figure><p>测试配置是否生效,修改 <code>_config.fluid.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 首页副标题的独立设置</span><br><span class="hljs-comment"># Independent config of home page subtitle</span><br><span class="hljs-attr">slogan:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 为空则按 hexo config.subtitle 显示</span><br>  <span class="hljs-comment"># If empty, text based on `subtitle` in hexo config</span><br>  <span class="hljs-attr">text:</span> <span class="hljs-string">&quot;Hello 05-12 .... &quot;</span><br></code></pre></td></tr></table></figure><p>重启 <code>npx hexo server</code></p><p><img src="20220512235647.png" alt="image-20220512235645718"></p><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>准备脚本 <code>push.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>git config --<span class="hljs-built_in">local</span> pull.rebase <span class="hljs-literal">true</span><br>git add .<br>git commit -m <span class="hljs-string">&quot;笔记本-`date +%F_%T`&quot;</span><br><br><br>git push origin main<br><br>git pull origin main<br>[ $? -ne 0 ] &amp;&amp; <span class="hljs-built_in">exit</span> -1<br><br>git push origin main<br><br><span class="hljs-comment"># test</span><br>start $(<span class="hljs-built_in">readlink</span> -f .)/source/_posts<br></code></pre></td></tr></table></figure><p><a href="https://slcnx.github.io/">https://slcnx.github.io/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
